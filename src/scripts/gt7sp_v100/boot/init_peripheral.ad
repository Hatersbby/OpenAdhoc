//---------------------------------------------------------------------------------------
// init_peripherial.ad
//
// (ä¾‹)
// init_peripherial.ad
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// function
//---------------------------------------------------------------------------------------

function initDevice()
{
    TASK_LOG("initDevice");

    main::Hmd = pdiext::MHmd();
    DeviceLoader::Initialize();
    PowerUtil::Initialize();
}

function initController()
{
    TASK_LOG("initController");

    var controller = gtengine::MController();
    declare_play_normal(controller, "DUALSHOCK4", 2, "UP", nil);
    declare_play_normal(controller, "DUALSHOCK4", 2, "DOWN", nil);
    declare_play_normal(controller, "DUALSHOCK4", 2, "LEFT", nil);
    declare_play_normal(controller, "DUALSHOCK4", 2, "RIGHT", nil);
    declare_play_normal(controller, "DUALSHOCK4", 2, "CIRCLE", nil);
    declare_play_normal(controller, "DUALSHOCK4", 2, "CROSS", nil);
    declare_play_normal(controller, "DUALSHOCK4", 2, "TRIANGLE", nil);
    declare_play_normal(controller, "DUALSHOCK4", 2, "SQUARE", nil);
    declare_play_normal(controller, "DUALSHOCK4", 2, "L1", nil);
    declare_play_normal(controller, "DUALSHOCK4", 2, "R1", nil);
    declare_play_normal(controller, "DUALSHOCK4", 2, "L2", "PRESS_L2");
    declare_play_normal(controller, "DUALSHOCK4", 2, "R2", "PRESS_R2");
    declare_play_normal(controller, "DUALSHOCK4", 2, nil, "STICK_BY1");
    declare_play_normal(controller, "DUALSHOCK4", 2, nil, "STICK_BY1F");
    declare_play_normal(controller, "DUALSHOCK4", 2, nil, "STICK_BY1L");
    declare_play_normal(controller, "DUALSHOCK4", 2, nil, "STICK_BX1");
    declare_play_normal(controller, "DUALSHOCK4", 2, nil, "STICK_BX1F");
    declare_play_normal(controller, "DUALSHOCK4", 2, nil, "STICK_BX1L");
    declare_play_normal(controller, "DUALSHOCK4", 2, nil, "STICK1_HEADING");
    declare_play_normal(controller, "DUALSHOCK4", 2, nil, "STICK_BY2");
    declare_play_normal(controller, "DUALSHOCK4", 2, nil, "STICK_BY2F");
    declare_play_normal(controller, "DUALSHOCK4", 2, nil, "STICK_BY2L");
    declare_play_normal(controller, "DUALSHOCK4", 2, nil, "STICK_BX2");
    declare_play_normal(controller, "DUALSHOCK4", 2, nil, "STICK_BX2F");
    declare_play_normal(controller, "DUALSHOCK4", 2, nil, "STICK_BX2L");
    declare_play_normal(controller, "DUALSHOCK4", 2, nil, "PAD_ROLL");
    declare_play_normal(controller, "DUALSHOCK4", 2, "L3", nil);
    declare_play_normal(controller, "DUALSHOCK4", 2, "R3", nil);
    declare_play_normal(controller, "DUALSHOCK4", 2, "OPTIONS", nil);
    declare_play_normal(controller, "DUALSHOCK4", 2, nil, nil, "CLICK_LEFT");
    declare_play_normal(controller, "DUALSHOCK4", 2, nil, nil, "CLICK_CENTER");
    declare_play_normal(controller, "DUALSHOCK4", 2, nil, nil, "CLICK_RIGHT");

    declare_play_normal(controller, "STDWHEEL", 2, "UP", nil);
    declare_play_normal(controller, "STDWHEEL", 2, "DOWN", nil);
    declare_play_normal(controller, "STDWHEEL", 2, "LEFT", nil);
    declare_play_normal(controller, "STDWHEEL", 2, "RIGHT", nil);
    declare_play_normal(controller, "STDWHEEL", 2, "CIRCLE", nil);
    declare_play_normal(controller, "STDWHEEL", 2, "CROSS", nil);
    declare_play_normal(controller, "STDWHEEL", 2, "TRIANGLE", nil);
    declare_play_normal(controller, "STDWHEEL", 2, "SQUARE", nil);
    declare_play_normal(controller, "STDWHEEL", 2, "L1", nil);
    declare_play_normal(controller, "STDWHEEL", 2, "R1", nil);
    declare_play_normal(controller, "STDWHEEL", 2, "L2", "PRESS_L2");
    declare_play_normal(controller, "STDWHEEL", 2, "R2", "PRESS_R2");
    declare_play_normal(controller, "STDWHEEL", 2, "L3", nil);
    declare_play_normal(controller, "STDWHEEL", 2, "R3", nil);
    declare_play_normal(controller, "STDWHEEL", 2, "OPTIONS", nil);
    declare_play_normal(controller, "STDWHEEL", 2, nil, "STICK_BY1");
    declare_play_normal(controller, "STDWHEEL", 2, nil, "STICK_BY1F");
    declare_play_normal(controller, "STDWHEEL", 2, nil, "STICK_BY1L");
    declare_play_normal(controller, "STDWHEEL", 2, nil, "STICK_BX1");
    declare_play_normal(controller, "STDWHEEL", 2, nil, "STICK_BX1F");
    declare_play_normal(controller, "STDWHEEL", 2, nil, "STICK_BX1L");
    declare_play_normal(controller, "STDWHEEL", 2, nil, "STICK_BY2");
    declare_play_normal(controller, "STDWHEEL", 2, nil, "STICK_BY2F");
    declare_play_normal(controller, "STDWHEEL", 2, nil, "STICK_BY2L");
    declare_play_normal(controller, "STDWHEEL", 2, nil, "STICK_BX2");
    declare_play_normal(controller, "STDWHEEL", 2, nil, "STICK_BX2F");
    declare_play_normal(controller, "STDWHEEL", 2, nil, "STICK_BX2L");

    declare_play_normal(controller, "UNCIA2", 2, "UP", nil);
    declare_play_normal(controller, "UNCIA2", 2, "DOWN", nil);
    declare_play_normal(controller, "UNCIA2", 2, "LEFT", nil);
    declare_play_normal(controller, "UNCIA2", 2, "RIGHT", nil);
    declare_play_normal(controller, "UNCIA2", 2, "TRIANGLE", nil);
    declare_play_normal(controller, "UNCIA2", 2, "CROSS", nil);
    declare_play_normal(controller, "UNCIA2", 2, "SQUARE", nil);
    declare_play_normal(controller, "UNCIA2", 2, "CIRCLE", nil);
    declare_play_normal(controller, "UNCIA2", 2, "R1", nil);
    declare_play_normal(controller, "UNCIA2", 2, "R2", nil);
    declare_play_normal(controller, "UNCIA2", 2, "R3", nil);
    declare_play_normal(controller, "UNCIA2", 2, "L1", nil);
    declare_play_normal(controller, "UNCIA2", 2, "L2", nil);
    declare_play_normal(controller, "UNCIA2", 2, "L3", nil);
    declare_play_normal(controller, "UNCIA2", 2, "OPTIONS", nil);
    declare_play_normal(controller, "UNCIA2", 2, "PLUS", nil);
    declare_play_normal(controller, "UNCIA2", 2, "MINUS", nil);
    declare_play_normal(controller, "UNCIA2", 2, "DIAL_1", nil);
    declare_play_normal(controller, "UNCIA2", 2, nil, "DIAL_1");

    declare_play_normal(controller, "T80", 2, "UP", nil);
    declare_play_normal(controller, "T80", 2, "DOWN", nil);
    declare_play_normal(controller, "T80", 2, "LEFT", nil);
    declare_play_normal(controller, "T80", 2, "RIGHT", nil);
    declare_play_normal(controller, "T80", 2, "TRIANGLE", nil);
    declare_play_normal(controller, "T80", 2, "CROSS", nil);
    declare_play_normal(controller, "T80", 2, "SQUARE", nil);
    declare_play_normal(controller, "T80", 2, "CIRCLE", nil);
    declare_play_normal(controller, "T80", 2, "R2", nil);
    declare_play_normal(controller, "T80", 2, "R3", nil);
    declare_play_normal(controller, "T80", 2, "L2", nil);
    declare_play_normal(controller, "T80", 2, "L3", nil);
    declare_play_normal(controller, "T80", 2, "PADDLE_LEFT", nil);
    declare_play_normal(controller, "T80", 2, "PADDLE_RIGHT", nil);
    declare_play_normal(controller, "T80", 2, "OPTIONS", nil);

    declare_play_normal(controller, "T150", 2, "UP", nil);
    declare_play_normal(controller, "T150", 2, "DOWN", nil);
    declare_play_normal(controller, "T150", 2, "LEFT", nil);
    declare_play_normal(controller, "T150", 2, "RIGHT", nil);
    declare_play_normal(controller, "T150", 2, "TRIANGLE", nil);
    declare_play_normal(controller, "T150", 2, "CROSS", nil);
    declare_play_normal(controller, "T150", 2, "SQUARE", nil);
    declare_play_normal(controller, "T150", 2, "CIRCLE", nil);
    declare_play_normal(controller, "T150", 2, "R2", nil);
    declare_play_normal(controller, "T150", 2, "R3", nil);
    declare_play_normal(controller, "T150", 2, "L2", nil);
    declare_play_normal(controller, "T150", 2, "L3", nil);
    declare_play_normal(controller, "T150", 2, "PADDLE_LEFT", nil);
    declare_play_normal(controller, "T150", 2, "PADDLE_RIGHT", nil);
    declare_play_normal(controller, "T150", 2, "OPTIONS", nil);

    declare_play_normal(controller, "T300RS", 2, "UP", nil);
    declare_play_normal(controller, "T300RS", 2, "DOWN", nil);
    declare_play_normal(controller, "T300RS", 2, "LEFT", nil);
    declare_play_normal(controller, "T300RS", 2, "RIGHT", nil);
    declare_play_normal(controller, "T300RS", 2, "TRIANGLE", nil);
    declare_play_normal(controller, "T300RS", 2, "CROSS", nil);
    declare_play_normal(controller, "T300RS", 2, "SQUARE", nil);
    declare_play_normal(controller, "T300RS", 2, "CIRCLE", nil);
    declare_play_normal(controller, "T300RS", 2, "R2", nil);
    declare_play_normal(controller, "T300RS", 2, "R3", nil);
    declare_play_normal(controller, "T300RS", 2, "L2", nil);
    declare_play_normal(controller, "T300RS", 2, "L3", nil);
    declare_play_normal(controller, "T300RS", 2, "PADDLE_LEFT", nil);
    declare_play_normal(controller, "T300RS", 2, "PADDLE_RIGHT", nil);
    declare_play_normal(controller, "T300RS", 2, "OPTIONS", nil);

    declare_play_normal(controller, "TRS", 2, "UP", nil);
    declare_play_normal(controller, "TRS", 2, "DOWN", nil);
    declare_play_normal(controller, "TRS", 2, "LEFT", nil);
    declare_play_normal(controller, "TRS", 2, "RIGHT", nil);
    declare_play_normal(controller, "TRS", 2, "TRIANGLE", nil);
    declare_play_normal(controller, "TRS", 2, "CROSS", nil);
    declare_play_normal(controller, "TRS", 2, "SQUARE", nil);
    declare_play_normal(controller, "TRS", 2, "CIRCLE", nil);
    declare_play_normal(controller, "TRS", 2, "R2", nil);
    declare_play_normal(controller, "TRS", 2, "R3", nil);
    declare_play_normal(controller, "TRS", 2, "L2", nil);
    declare_play_normal(controller, "TRS", 2, "L3", nil);
    declare_play_normal(controller, "TRS", 2, "PADDLE_LEFT", nil);
    declare_play_normal(controller, "TRS", 2, "PADDLE_RIGHT", nil);
    declare_play_normal(controller, "TRS", 2, "OPTIONS", nil);
    declare_play_normal(controller, "TRS", 2, "SELECT", nil);
    declare_play_normal(controller, "TRS", 2, "PS", nil);

    declare_play_normal(controller, "TGT", 2, "UP", nil);
    declare_play_normal(controller, "TGT", 2, "DOWN", nil);
    declare_play_normal(controller, "TGT", 2, "LEFT", nil);
    declare_play_normal(controller, "TGT", 2, "RIGHT", nil);
    declare_play_normal(controller, "TGT", 2, "TRIANGLE", nil);
    declare_play_normal(controller, "TGT", 2, "CROSS", nil);
    declare_play_normal(controller, "TGT", 2, "SQUARE", nil);
    declare_play_normal(controller, "TGT", 2, "CIRCLE", nil);
    declare_play_normal(controller, "TGT", 2, "R2", nil);
    declare_play_normal(controller, "TGT", 2, "R3", nil);
    declare_play_normal(controller, "TGT", 2, "L2", nil);
    declare_play_normal(controller, "TGT", 2, "L3", nil);
    declare_play_normal(controller, "TGT", 2, "PADDLE_LEFT", nil);
    declare_play_normal(controller, "TGT", 2, "PADDLE_RIGHT", nil);
    declare_play_normal(controller, "TGT", 2, "OPTIONS", nil);
    declare_play_normal(controller, "TGT", 2, "DIAL_1", nil);
    declare_play_normal(controller, "TGT", 2, "DIAL_2", nil);
    declare_play_normal(controller, "TGT", 2, "DIAL_3", nil);
    declare_play_normal(controller, "TGT", 2, "DIAL_4", nil);
    declare_play_normal(controller, "TGT", 2, nil, "DIAL_1");
    declare_play_normal(controller, "TGT", 2, nil, "DIAL_2");
    declare_play_normal(controller, "TGT", 2, nil, "DIAL_3");
    declare_play_normal(controller, "TGT", 2, nil, "DIAL_4");
    declare_play_normal(controller, "TGT", 2, nil, "STICK_BY1");
    declare_play_normal(controller, "TGT", 2, nil, "STICK_BY1F");
    declare_play_normal(controller, "TGT", 2, nil, "STICK_BY1L");
    declare_play_normal(controller, "TGT", 2, nil, "STICK_BX1");
    declare_play_normal(controller, "TGT", 2, nil, "STICK_BX1F");
    declare_play_normal(controller, "TGT", 2, nil, "STICK_BX1L");
    declare_play_normal(controller, "TGT", 2, nil, "STICK_BY2");
    declare_play_normal(controller, "TGT", 2, nil, "STICK_BY2F");
    declare_play_normal(controller, "TGT", 2, nil, "STICK_BY2L");
    declare_play_normal(controller, "TGT", 2, nil, "STICK_BX2");
    declare_play_normal(controller, "TGT", 2, nil, "STICK_BX2F");
    declare_play_normal(controller, "TGT", 2, nil, "STICK_BX2L");

    main::Controller = controller;
}

function declare_play_normal(controller, device, port_max, button_channel, analog_channel, gesture_bit)
{
    var port = 0;
    while (port < port_max)
    {
        if (button_channel != nil)
        {
            controller.declare(gtengine::InputMode::PLAY_NORMAL, device, port, "button", pdistd::SuperPortButtonBit[button_channel]);
        }

        if (analog_channel != nil)
        {
            controller.declare(gtengine::InputMode::PLAY_NORMAL, device, port, "analog", pdistd::SuperPortAnalogChannel[analog_channel]);
        }

        if (gesture_bit != nil)
        {
            controller.declare(gtengine::InputMode::PLAY_NORMAL, device, port, "gesture", pdistd::SuperPortGestureBit[gesture_bit]);
        }

        ++port;
    }
}

function initKeyAssign()
{
    var device_list = [
        "DUALSHOCK4",
        "STDWHEEL",
        "UNCIA2",
        "TGT",
        "TRS",
        "T300RS",
        "T150",
        "T80"
    ];

    foreach (var device_name in device_list)
    {
        for (var cont_no = 0; cont_no < 2; ++cont_no)   
            FunctionManager::call("KeyConfig::setDefault", device_name, cont_no);
    }
}