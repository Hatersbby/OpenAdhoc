













module TopMenuUtil
{
    import main::ActorUtil;

    class Icon
    {
        attribute caption;
        attribute image_name;
        attribute func;
        attribute is_enable;
        attribute is_new;
        attribute has_progressbar;
        attribute mprogress;

        method __init__(_caption, _image_name, _func, _is_enable, _is_new, _has_progressbar = false)
        {
            self.caption = _caption;
            self.image_name = _image_name;
            self.func = _func;
            self.is_enable = _is_enable;
            self.is_new = _is_new;
            self.has_progressbar = _has_progressbar;   
        }
    }

    function createIcon(caption_key, image_path, func, is_enable, is_new, _has_progressbar)
    {
        return Icon(caption_key, image_path, func, is_enable, is_new, _has_progressbar);
    }

    function focus_icon(widget, enter, warp = false)
    {
        if (widget == nil)
            return;

        widget.Composite.active = enter;
        ActorUtil::ResetInterpolators(widget.Composite, !enter, warp);
        ActorUtil::ResetInterpolators(widget.icon_spot, !enter, warp);
        ActorUtil::ResetInterpolators(widget.label, !enter, warp);
    }

    function updateNew_icon(context, widget)
    {
        var icon = widget.icon;
        var is_new = icon.is_new != nil ? icon.is_new(context) : false;

        is_new; // Normal

        widget.Composite.new.visible = is_new;
    }

    function updateEnable_icon(context, widget)
    {
        var icon = widget.icon;
        var is_enable = icon.is_enable != nil ? icon.is_enable(context) : true;
        widget.Composite.insensitive = !is_enable;
    }

    function initialize_icon(context, translate_page, widget, icon)
    {
        if (icon.image_name != nil && icon.image_name != "")
        {
            widget.Composite::tex.image_path = "image/gt5p/icon/" + icon.image_name + ".dds";
            widget.Composite::tex_f.image_path = "image/gt5p/icon/" + icon.image_name + "_over.dds";
            widget.Composite::tex_i.image_path = "image/gt5p/icon/" + icon.image_name + "_off.dds";
        }
        else
        {
            widget.Composite::tex.image_path = "";
            widget.Composite::tex_f.image_path = "";
            widget.Composite::tex_i.image_path = "";
        }

        widget.Composite.active = false;

        var enter = true;
        var warp = true;

        focus_icon(widget, !enter, warp);

        widget.label.text = context.translate(translate_page, icon.caption);
        widget.icon = icon;
        widget.doInitialize(context);

        updateEnable_icon(context, widget);
        updateNew_icon(context, widget);
    }

    function initialize_listbox(context, listbox, item, icons, translate_page, progressbar)
    {
        listbox.setItemTemplate(context, item);
        listbox.setItemCount(icons.size);
        listbox.focus_callback = listbox.onFocus;
        listbox.focus_active = true;

        for (var i = 0; i < icons.size; i++)
        {
            var icon = icons[i];
            var w = listbox.getItemWidget(i, context);

            initialize_icon(context, translate_page, w, icon);

            if (icon.has_progressbar)
            {
                var p = progressbar.doCopy();
                icon.mprogress = main::pdistd::MProgress();
                p.Bar::progress.progress = icon.mprogress;
                p.ErrorBar::progress.progress = icon.mprogress;
                p.x = w.Progress.x;
                p.y = w.Progress.y;
                w.replaceChild(context, p, w.Progress);

                icon.mprogress.value = 0.0;
            }
        }
    }

    function initialize_box(context, box, item, icons, translate_page, progressbar)
    {
        box.ListBox.h_adjustment = main::menu::MAdjustment();
        box.HArrow.adjustment = box.ListBox.h_adjustment;

        var listbox = box.ListBox;
        initialize_listbox(context, listbox, item, icons, translate_page, progressbar);
        box.visible = true;
    }

    static sAppendedParent = nil;
    static sAppendedBox = nil;
    static sIsActivated = nil;
    static sCursorVisible = nil;
    static sFocusEvent = nil;

    function create(context, parent, template, icons, focus_event)
    {
        sAppendedBox = template.Box.doCopy();
        parent.appendChild(context, sAppendedBox);

        sAppendedParent = parent;

        var progressbar = template.Progress;

        initialize_box(context, sAppendedBox, template.Item, icons, sAppendedParent, progressbar);

        sIsActivated = true;
        sFocusEvent = focus_event;
        sCursorVisible = context.cursor_visible; 
    }

    function remove(context)
    {
        sCursorVisible = nil;
        sIsActivated = nil;
        sFocusEvent = nil;

        if (sAppendedBox != nil)
        {
            sAppendedParent.removeChild(context, sAppendedBox);
            sAppendedBox = nil;
        }
        
        sAppendedParent = nil;
    }

    function onFocusEnterListBox(context, listbox)
    {
        if (sFocusEvent != nil && sFocusEvent)
        {
            var index = listbox.focus_index;
            var w = listbox.getItemWidget(index, context);
            focus_icon(w, true);
        }

        return EVENTRESULT_FILTER;
    }

    function onFocusLeaveListBox(context, listbox)
    {
        if (sFocusEvent != nil && sFocusEvent)
        {
            var index = listbox.focus_index;
            var w = listbox.getItemWidget(index, context);
            focus_icon(w, false);
            ActorUtil::ResetInterpolators(w.icon_spot, true);
        }

        return EVENTRESULT_FILTER;
    }

    function onFocusListBox(context, listbox, new_index, old_index)
    {
        var new_w = listbox.getItemWidget(new_index, context);
        var old_w = listbox.getItemWidget(old_index, context);

        var box = sAppendedBox;
        var enter = true;

        focus_icon(new_w, enter);
        focus_icon(old_w, !enter);
    }

    function onActivateListBox(context, listbox)
    {
        var index = listbox.focus_index;
        var w = listbox.getItemWidget(index, context);
        w.icon.func(context);

        return EVENTRESULT_FILTER;
    }

    function getIconWidget(context, name)
    {
        var box = sAppendedBox;
        var LBox = box.ListBox;
        var icon_cnt = LBox.getItemCount();

        for (var i = 0; i < icon_cnt; i++)
        {
            var w = LBox.getItemWidget(i, context);
            var icon = w.icon;
            if (icon.caption == name)
                return w;
        }

        return nil;
    }
    function activated()
    {
        return sIsActivated;
    }

    function updateNew(context)
    {
        var box = sAppendedBox;
        var LBox = box.ListBox;
        var icon_cnt = LBox.getItemCount();

        for (var i = 0; i < icon_cnt; i++)
        {
            var w = LBox.getItemWidget(i, context);
            updateNew_icon(context, w);
        }
    }

    function updateEnable(context)
    {
        var box = sAppendedBox;
        var LBox = box.ListBox;
        var icon_cnt = LBox.getItemCount();

        for (var i = 0; i < icon_cnt; i++)
        {
            var w = LBox.getItemWidget(i, context);
            updateEnable_icon(context, w);
        }
    }

    function setFocus(context, index)
    {
        var box = sAppendedBox;
        var LBox = box.ListBox;

        sAppendedParent.setFocus(LBox);

        if (index != nil)
        {
            var last_idx = LBox.focus_index;
            LBox.focus_index = index;
            LBox.onFocus(context, LBox.focus_index, last_idx);
        }
    }

    function getFocusIndex()
    {
        var box = sAppendedBox;
        var LBox = box.ListBox;
        return LBox.focus_index;
    }

    function hideAction(warp = false)
    {
        sIsActivated = false;
    
        var box = sAppendedBox;

        if (warp)
            box.y = 1080;

        ActorUtil::ResetInterpolators(box, true, warp);
        ActorUtil::ResetInterpolators(box.ListBox, true, warp);
    }

    function appearAction()
    {
        sIsActivated = true;

        var box = sAppendedBox;
        ActorUtil::ResetInterpolators(box, false, false);
        ActorUtil::ResetInterpolators(box.ListBox, false, false);
        box.visible = true;
    }

    function getTopBox()
    {
        return sAppendedBox;
    }
}