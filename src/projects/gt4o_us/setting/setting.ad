module SettingProject
{
    #include "../share/dialog.ad";
	#include "../share/page_util.ad";

	static BRAKE_list = [
	"BRAKE_NORMAL",
	"RACING_BRAKE"
	];
	
	static BRAKECONTROLLER_list = [
	"NO_BRAKECONTROLLER",
	"BRAKECONTROLLER"
	];
	
	static SUSPENSION_list = [
		"NORMAL_SUSPENSION",
		"SPORTS_SUSPENSION",
		"SEMIRACING_SUSPENSION",
		"RACING_SUSPENSION",
		"ORIGINAL_SUSPENSION"
	];
	
	static ASCC_list = ["NO_ASCC", "ASCC"];
	
	static TCSC_list = ["NO_TCSC", "TCSC"];
	
	static CHASSIS_list = [nil];
	
	static RACINGMODIFY_list = [nil];
	
	static LIGHTWEIGHT_list = [
	nil,
	"LIGHT_WEIGHT_STAGE1",
	"LIGHT_WEIGHT_STAGE2",
	"LIGHT_WEIGHT_STAGE3"
	];
	
	static STEER_list = [nil];
	
	static DRIVETRAIN_list = ["NORMAL_DRIVETRAIN", "VALIABLE_CENTER_DEF_DRIVETRAIN"];
	
	static GEAR_list = [
	"NORMAL_GEAR",
	"CLOSE_GEAR",
	"SUPER_CLOSE_GEAR",
	"VALIABLE_GEAR"
	];
	
	static ENGINE_list = [nil];
	
	static NATUNE_list = [
	nil,
	"NA_TUNE_STAGE1",
	"NA_TUNE_STAGE2",
	"NA_TUNE_STAGE3"
	];
	
	static TURBINEKIT_list = [
		"NO_TURBINE_KIT",
		"TURBINE_KIT_STAGE1",
		"TURBINE_KIT_STAGE2",
		"TURBINE_KIT_STAGE3",
		"TURBINE_KIT_STAGE4",
		"TURBINE_KIT_STAGE5"
	];
	
	static PORTPOLISH_list = [
	nil,
	"PORTPOLISH"
	];
	
	static ENGINEBALANCE_list = [nil, "ENGINEBALANCE"];
	
	static DISPLACEMENT_list = [nil, "DISPLACEMENT"];
	
	static COMPUTER_list = [nil, "COMPUTER"];
	
	static INTERCOOLER_list = [
	nil,
	"INTERCOOLER_SPORTS",
	"INTERCOOLER_RACING_BIG"
	];
	
	static MUFFLER_list = [
	nil,
	"SPORTS_MUFFLER",
	"SEMI_RACING_MUFFLER",
	"RACING_MUFFLER"
	];
	
	static CLUTCH_list = [
		"NORMAL_CLUTCH",
		"HIGH_CAPACITY_CLUTCH",
		"TWIN_CLUTCH",
		"TRIPLE_CLUTCH"
	];
	
	static FLYWHEEL_list = [
	nil,
	"FLYWHEEL_LIGHT",
	"FLYWHEEL_Cr_Mo",
	"FLYWHEEL_LIGHT_Cr_Mo"
	];
	
	static PROPELLERSHAFT_list = [nil, "PROPELLERSHAFT"];
	
	static LSD_list = [
		"NORMAL_LSD",
		"1WAY_LSD",
		"15WAY_LSD",
		"2WAY_LSD",
		"VARIABLE_LSD",
		"AYCC_LSD"
	];
	
	static FRONTTIRE_list = [
		"FRONTTIRE_NORMAL_ECONOMY",
		"FRONTTIRE_NORMAL_COMFORT",
		"FRONTTIRE_NORMAL_STREET",
		"FRONTTIRE_SPORTS_HARD",
		"FRONTTIRE_SPORTS_MEDIUM",
		"FRONTTIRE_SPORTS_SOFT",
		"FRONTTIRE_RACING_SUPER_HARD",
		"FRONTTIRE_RACING_HARD",
		"FRONTTIRE_RACING_MEDIUM",
		"FRONTTIRE_RACING_SOFT",
		"FRONTTIRE_RACING_QUALIFY",
		"FRONTTIRE_DIRT",
		"FRONTTIRE_SNOW"
	];
	static REARTIRE_list = [
		"REARTIRE_NORMAL_ECONOMY",
		"REARTIRE_NORMAL_COMFORT",
		"REARTIRE_NORMAL_STREET",
		"REARTIRE_SPORTS_HARD",
		"REARTIRE_SPORTS_MEDIUM",
		"REARTIRE_SPORTS_SOFT",
		"REARTIRE_RACING_SUPER_HARD",
		"REARTIRE_RACING_HARD",
		"REARTIRE_RACING_MEDIUM",
		"REARTIRE_RACING_SOFT",
		"REARTIRE_RACING_QUALIFY",
		"REARTIRE_DIRT",
		"REARTIRE_SNOW"
	];
	static NOS_list = [nil, "NOS"];
	static SUPERCHARGER_list = [nil, "SUPERCHARGER"];
	static WHEEL_list = [nil];
	static WING_list = [nil];
	static STIFFNESS_list = [nil, "STIFFNESS"];
	
	static TYPE_list = [
		BRAKE_list,
		BRAKECONTROLLER_list,
		SUSPENSION_list,
		ASCC_list,
		TCSC_list,
		CHASSIS_list,
		RACINGMODIFY_list,
		LIGHTWEIGHT_list,
		STEER_list,
		DRIVETRAIN_list,
		GEAR_list,
		ENGINE_list,
		NATUNE_list,
		TURBINEKIT_list,
		PORTPOLISH_list,
		ENGINEBALANCE_list,
		DISPLACEMENT_list,
		COMPUTER_list,
		INTERCOOLER_list,
		MUFFLER_list,
		CLUTCH_list,
		FLYWHEEL_list,
		PROPELLERSHAFT_list,
		LSD_list,
		FRONTTIRE_list,
		REARTIRE_list,
		NOS_list,
		SUPERCHARGER_list,
		WHEEL_list,
		WING_list,
		STIFFNESS_list
	];

	function getPartsName(type, cat)
	{
		var partslist = TYPE_list[type];
		if (partslist == nil)
			return;
		return partslist[cat]; // cat means category, the same category parameter in the SpecDB
	}

	#include "../share/regulation.ad";

	static current_race = nil;
	static current_course = nil;
	static current_car = nil;
	static notice_shown = 0;

	function onLoad(context)
	{
		main::sound.load();
	
		context.createRenderContext(1);
	
		var render_context = context.getRenderContext(0);
		render_context.transition = main::menu::MColorTransition();
		render_context.transition.panIn(render_context);
	
		if (main::game.race_code != "")
			current_race = main::game.race_code;
		else
			current_race = nil;
	
		if (main::game.course_code != "")
			current_course = main::game.course_code;
		else
			current_course = nil;
	
		current_car = main::game.garage.riding_car;
		current_car.beginSetting();
	
		if (current_race != nil)
			;
		if (current_course != nil)
			;
	
		render_context.startPage(SettingRoot);
	}

	function onUnload(context)
	{
		current_car.endSetting();
		current_car = nil;
		current_course = nil;
		current_race = nil;
		main::sound.unload();
	}

	function setupSlider(slider, bias, offset)
	{
		if (slider.insensitive)
		{
			slider["label"].text = "--";
			return;
		}
	
		if (bias == nil)
			bias = 0;
	
		if (offset == nil)
			offset = 0;
	
		if (!slider.defined("level"))
		{
			if (bias == 1)
			{
				var val_text = main::menu::MUtility::GetFormatString("%.1t", slider.index + offset);
				slider["label"].text = val_text;
	
				var popup = slider["popup"];
				popup["min"].text = main::menu::MUtility::GetFormatString("%.1t", slider.display_min.toInt() + offset);
				popup["max"].text = main::menu::MUtility::GetFormatString("%.1t", slider.display_max.toInt() + offset);
				popup["pinch"]["value"].text = val_text;
			}
			else if (bias == 2)
			{
				var val_text = main::menu::MUtility::GetFormatString("%.2t", slider.index + offset);
				slider["label"].text = val_text;
	
				var popup = slider["popup"];
				popup["min"].text = main::menu::MUtility::GetFormatString("%.2t", slider.display_min.toInt() + offset);
				popup["max"].text = main::menu::MUtility::GetFormatString("%.2t", slider.display_max.toInt() + offset);
				popup["pinch"]["value"].text = val_text;
			}
			else if (bias == 3)
			{
				var val_text = main::menu::MUtility::GetFormatString("%.3t", slider.index + offset);
				slider["label"].text = val_text;
	
				var popup = slider["popup"];
				popup["min"].text = main::menu::MUtility::GetFormatString("%.3t", slider.display_min.toInt() + offset);
				popup["max"].text = main::menu::MUtility::GetFormatString("%.3t", slider.display_max.toInt() + offset);
				popup["pinch"]["value"].text = val_text;
			}
			else
			{
				slider["label"].text = slider.index + offset;
	
				var popup = slider["popup"];
				popup["min"].text = (slider.display_min.toInt() + offset).toString();
				popup["max"].text = (slider.display_max.toInt() + offset).toString();
				popup["pinch"]["value"].text = (slider.index + offset).toString();
			}
		}
		else
		{
			slider["label"].text = slider.index.toString();
	
			var popup = slider["popup"];
			popup["min"].text = slider.display_min.toString();
			popup["max"].text = slider.display_max.toString();
			popup["pinch"]["value"].text = slider.index.toString();
		}
	}

	function initSlider(slider, value, min, max, bias, offset)
	{
		slider.insensitive = (min >= max);
		slider.range = [min, max];
	
		if (min <= value && value <= max)
			slider.index = value;
		else
			slider.index = min;
	
		setupSlider(slider, bias, offset);
	}

	function initSliderLevel(slider, level, level_range)
	{
		slider.insensitive = (level <= 0);
		slider.range = [1, level_range];
		slider.index = level;
	
		setupSlider(slider);
	}

	function initSliderLevel0(slider, level, level_range)
	{
		slider.insensitive = (level_range == 0);
		slider.range = [0, level_range];
		slider.index = level;
	
		setupSlider(slider);
	}

	function initSliderRange(slider, value, min, max, dmin, dmax, bias, offset)
	{
		slider.insensitive = (min >= max);
		slider.range = [min, max];
		slider.display_min = dmin;
		slider.display_max = dmax;
	
		if (min <= value && value <= max)
			slider.index = value;
		else
			slider.index = min;
	
		setupSlider(slider, bias, offset);
	}

	function get_value_by_level(level, level_range, min, max)
	{
		return level;
	}
	
	function get_level_by_value(value, level_range, min, max)
	{
		if (level_range <= 1)
			return 0;
		return value;
	}

	function on_step_changed(slider, SKIP_THR)
	{
		var x = slider.value - slider.repeat_start;
		x /= 4.0;
	
		if (x < 0.0)
			x = -x;
	
		if (x < 1.0)
			x = 1.0;
	
		if (x > SKIP_THR)
			x = SKIP_THR;
	
		slider.step = x;
	}


	function getLimitedAspiration()
	{
		if (current_race != nil)
		{
			var race = main::menu::MRaceData(current_race);
			return race.getNeedAspiration();
		}
		else
		{
		    return nil;
		}
	}


	function isLimitedAspiration()
	{
		var limited = getLimitedAspiration();
		return (limited != nil && limited != 0);
	}
	
	function isLimitedNATUNE()
	{
		var limited = getLimitedAspiration();
		return (limited != nil && limited == 1);
	}


	function isLimitedTURBO()
	{
		var limited = getLimitedAspiration();
		return (limited != nil && limited == 2);
	}
	
	function isLimitedSUPERCHARGER()
	{
		var limited = getLimitedAspiration();
		return (limited != nil && limited == 3);
	}

}
