//---------------------------------------------------------------------------------------
// ArcadeRoot.ad
//
// Arcade mode Pre-race Menu: Main menu
// 
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// module
//---------------------------------------------------------------------------------------

module QuickArcadeProject::ArcadeRoot
{
	//#include "../quick-share/icon.ad";
	// icon.ad was included, but each script contains different logic from its icon.ad inclusion.
	// It is probably best to axe this particular include, or, create separate script name for this include
	// begin icon.ad included stuff
	
	function setFadeActor(widget, Velocity, Depth)
	{
		widget.actor = main::menu::MFadeActor(widget, 1.0);
		widget.actor.velocity = Velocity;
		widget.actor.out = 1;
		widget.actor.over = Depth;
		widget.actor.warp();
		widget.actor.out = 0;
	}

	function rewindFadeActor(widget)
	{
		widget.actor.out = 1;
		widget.actor.warp();
		widget.actor.out = 0;
	}

	function setScrollActor(widget)
	{
		widget.actor = main::menu::MMoveActor(widget, 0.0, 0.0);
		widget.actor.ratio = 0.2;
		widget.actor.out = 1;
		widget.actor.warp();
	}

	function setMoveActor(widget, x, y, r)
	{
		var actor = main::menu::MMoveActor(widget, widget.x + x, widget.y + y);
		widget.actor = actor;
		widget.actor.ratio = r;
		widget.actor.out = 1;
		widget.actor.warp();
	}

	function rewindMoveActor(widget)
	{
		widget.actor.out = 1;
		widget.actor.warp();
		widget.actor.out = 0;
	}

	function getIconTopIndex(context)
	{
		var num = icon_name_tbl.size;
		var i = 0;
	
		while (i < num)
		{
			if (ArcadeRoot::Buttons[icon_name_tbl[i]].visible == 1)
			{
				return i;
			}
	
			i++;
		}
	
		return -1;
	}

	function setDefaultIconFocus(context)
	{
		var quick_work = main::menu::MQuickWork();
		var idx = quick_work.cursorPosition;
	
		if (ArcadeRoot::Buttons[icon_name_tbl[idx]].visible != 1)
		{
			idx = getIconTopIndex(context);
		}
	
		ArcadeRoot.setFocus(Buttons[icon_name_tbl[idx]]);
	}

	function getIconIndex(context, icon_name)
	{
		var idx = -1;
		var num = icon_name_tbl.size;
	
		for (var i = 0; i < num; i++)
		{
			if (icon_name_tbl[i] == icon_name)
			{
				idx = i;
				break;
			}
			else
			{
				// Nenkai: Dissassembly claims there's an extra redundant jump here, so it's probably a if {} else {} block
				// Unnecessary else, can be removed by user
			} 
		}
	
		return idx;
	}
	// end icon.ad included stuff
	
	//#include "../quick-share/quick_tune.ad";
	// Impractical include
	// begin quick_tune.ad included stuff

	static tirename_tbl = [
    	"tire_short_name_Economy",
		"tire_short_name_Comfort",
    	"tire_short_name_Street",
    	"tire_short_name_SprortsHard",
    	"tire_short_name_SprortsMedium",
    	"tire_short_name_SprortsSoft",
    	"tire_short_name_RacingSuperHard",
    	"tire_short_name_RacingHard",
    	"tire_short_name_RacingMedium",
    	"tire_short_name_RacingSoft",
    	"tire_short_name_RacingSuperSoft",
		"tire_short_name_Dirt",
    	"tire_short_name_Snow"
	];

	// end quick_tune.ad included stuff

	function updateMyCarInfo(context)
	{
		var quick_work = main::menu::MQuickWork();
		var i = quick_work.numberOfEntries - 1;
	
		if (quick_work.getPower(i) == 0)
		{
			ArcadeRoot["Grid" + (i + 1)]["PS"].text = "--";
		}
		else
		{
			var ps = (quick_work.getPower(i) * (100 + quick_work.QuickTunePowerLevel)) / 100;
			ArcadeRoot["Grid" + (i + 1)]["PS"].text = main::menu::MUnit::GetPowerForDisplay(ps);
		}
		ArcadeRoot["Grid" + (i + 1)]["KG"].text = (quick_work.getWeight(i) * (100 + quick_work.QuickTuneWeightLevel)) / 100;
		setTireText(context, i, quick_work.QuickTuneFrontTireType);
	}

	function setTireText(context, grid, type)
	{
		// If the tire type is invalid, call it "--".
		if (type >= tirename_tbl.size || type < 0)
		{
			if (type != 255)
			{
				ArcadeRoot["Grid" + (grid + 1)]["Tire"].text = "--";
			}
		}
		else
		{
			ArcadeRoot["Grid" + (grid + 1)]["Tire"].text = context.translate(ArcadeRoot,tirename_tbl[type]);
		}
	
		if (type >= 0 && type <= 2)
		{
			ArcadeRoot["Grid" + (grid + 1)]["Tire"].color = ArcadeRoot::Hidden::NormalTireColor.color;
		}
		else if (type >= 3 && type <= 5)
		{
			ArcadeRoot["Grid" + (grid + 1)]["Tire"].color = ArcadeRoot::Hidden::SportsTireColor.color;
		}
		else if (type >= 6)
		{
			//if type equals 255 this one is used
			ArcadeRoot["Grid" + (grid + 1)]["Tire"].color = ArcadeRoot::Hidden::RacingTireColor.color;
		}
	}

	var quick_work = main::menu::MQuickWork();
	var i = 1;
	
	// Handles the grid list
	while (i <= quick_work.numberOfEntries)
	{
		var widget = ArcadeRoot["Grid" + i];
		setMoveActor(widget, 640 + (392 * 2 * i), 0, 0.15); // Original transition
		//setMoveActor(widget, 640, 392 * 2 * i + 0, 0.15); // Cool vertical transition
		i++;
	}

	function onInitialize(context)
	{
		var quick_work = main::menu::MQuickWork();
	
		if (quick_work.canReplay == 0)
		{
			Buttons::Replay.visible = 0;
			Buttons::SaveReplay.visible = 0;
		}
		else
		{
			Buttons::Replay.visible = 1;
			Buttons::SaveReplay.visible = 1;
		}
	
		if (quick_work.IsBSpec == 0)
		{
			Buttons::Spectator.visible = 0;
		}
		else
		{
			Buttons::Spectator.visible = 1;
		}
	
		if (main::menu::MSystem::CanSave() == 0)
		{
			Buttons::SaveReplay.visible = 0;
		}
	
		ArcadeRoot::PS.text = main::menu::MUnit::GetUnitOfPower();
	
		var i = 0;
		while (i < quick_work.numberOfEntries)
		{
			ArcadeRoot["Grid" + (i + 1)]["CarName"].text = quick_work.getGridCarName(i);
			ArcadeRoot["Grid" + (i + 1)]["CarName"].abbreviate();
			ArcadeRoot["Grid" + (i + 1)]["ColorChip"].setColor(quick_work.getColorChipInfo(i));
	
			if (quick_work.getPower(i) == 0)
			{
				ArcadeRoot["Grid" + (i + 1)]["PS"].text = "--";
			}
			else
			{
				ArcadeRoot["Grid" + (i + 1)]["PS"].text = quick_work.getPower(i);
			}
	
			ArcadeRoot["Grid" + (i + 1)]["KG"].text = quick_work.getWeight(i);
	
			setTireText(context, i, quick_work.getTireType(i));
			i++;
		}
	
		i = 1;
		while (i <= quick_work.numberOfEntries)
		{
			var widget = ArcadeRoot["Grid" + i];
			widget.actor.out = 1;
			widget.actor.warp();
			widget.actor.out = 0;
			i++;
		}
	
		i = quick_work.numberOfEntries + 1;
		while (i <= 6)
		{
			ArcadeRoot["Grid" + i].visible = 0;
			i++;
		}
	
		if (quick_work.playerGridNumber >= 0)
		{
			var gnum = quick_work.playerGridNumber + 1;
	
			ArcadeRoot["Grid" + gnum]["CarName"].color = ArcadeRoot::Hidden::MyGridColor.color;
			ArcadeRoot["Grid" + gnum]["GridNumber"].color = ArcadeRoot::Hidden::MyGridColor.color;
			ArcadeRoot["Grid" + gnum]["PS"].color = ArcadeRoot::Hidden::MyGridColor.color;
			ArcadeRoot["Grid" + gnum]["KG"].color = ArcadeRoot::Hidden::MyGridColor.color;
		}
	
		var course_label = quick_work.courseLabel;
	
		Title.text = context.translate(ArcadeRoot, "CourseName", course_label);
	
		var unit = main::game.course_record.getUnit(course_label);
	
		Score.text = context.translate(ArcadeRoot, "BestScore").format(unit.best_score);
	
		main::sound.startStreamEx("pcm", "default_quick", -1, 1, main::game.option.menu_bgm_volume);
	
		updateMyCarInfo(context);
		setIconPosition(context);
		setDefaultIconFocus(context);
	}

	function onFinalize(context)
	{
	}

	static icon_name_tbl = [
		"Start",
		"Spectator",
		"Replay",
		"SaveReplay",
		"QuickTune",
		"Option",
		"Exit"
	];

	// Handles the UI positioning of Start, Replay, exit, etc.
	function setIconPosition(context)
	{
		var max = icon_name_tbl.size;
		var num = 0;
		var icon_w = 0;
	
		var i = 0;
		while (i < max)
		{
			if (ArcadeRoot::Buttons[icon_name_tbl[i]].visible == 1)
			{
				icon_w = ArcadeRoot::Buttons[icon_name_tbl[i]].w;
				num++;
			}
			i++;
		}
	
		var screen_w = 640;
		var space = 4;
		var st = (screen_w - num * icon_w - space * (num - 1)) / 2;
	
		var c = 0;
		i = 0;
		while (i < max)
		{
			if (ArcadeRoot::Buttons[icon_name_tbl[i]].visible == 1)
			{
				ArcadeRoot::Buttons[icon_name_tbl[i]].x = st + (icon_w + space) * c;
				c++;
			}
			i++;
		}
	}


	function set_next_start_project()
	{
		main::game.next_menu_project = main::game.major_menu_project;
	}

	function hydeGrid(context)
	{
		Title.visible = 0;
	
		var quick_work = main::menu::MQuickWork();
	
		var i = 1;
		while (i <= quick_work.numberOfEntries)
		{
			ArcadeRoot["Grid" + i].visible = 0;
			i++;
		}
	}

	function dispGrid(context)
	{
		Title.visible = 1;
	
		var quick_work = main::menu::MQuickWork();
	
		var i = 1;
		while (i <= quick_work.numberOfEntries)
		{
			ArcadeRoot["Grid" + i].visible = 1;
			i++;
		}
	}

	function onCancel(context, event, item)
	{
		main::sound.play("cancel");
		main::sound.stopStream();
	
		var quick_work = main::menu::MQuickWork();
		quick_work.selectedCommand = "COMMAND_EXIT";
	
		context.transition.panOut(context);
		context.transition.syncOut(context);
	
		set_next_start_project();
	
		context.finish();
	
		return EVENTRESULT_FILTER;
	}

}

module QuickArcadeProject::ArcadeRoot::Buttons::Start
{
	function onActivate(context)
	{
		main::sound.play("ok");
		main::sound.stopStream();
	
		var quick_work = main::menu::MQuickWork();
		quick_work.selectedCommand = "COMMAND_START";
		quick_work.cursorPosition = getIconIndex(context, "Start");
	
		context.transition.panOut(context);
		context.transition.syncOut(context);
		context.finish();
	
		return EVENTRESULT_FILTER;
	}
}

module QuickArcadeProject::ArcadeRoot::Buttons::Spectator
{
	function onActivate(context)
	{
		main::sound.play("ok");
		main::sound.stopStream();
	
		var quick_work = main::menu::MQuickWork();
		quick_work.selectedCommand = "COMMAND_SPECTATOR";
		quick_work.cursorPosition = getIconIndex(context, "Spectator");
	
		context.transition.panOut(context);
		context.transition.syncOut(context);
	
		set_next_start_project();
		context.finish();
	
		return EVENTRESULT_FILTER;
	}

}

module QuickArcadeProject::ArcadeRoot::Buttons::QuickTune
{
	function onActivate(context)
	{
		main::sound.play("ok");
	
		var quick_work = main::menu::MQuickWork();
		quick_work.cursorPosition = getIconIndex(context, "QuickTune");
	
		QuickTunePopup::open(context);
	
		return EVENTRESULT_FILTER;
	}
}

module QuickArcadeProject::ArcadeRoot::Buttons::Replay
{
	function onActivate(context)
	{
		main::sound.play("ok");
		main::sound.stopStream();
	
		var quick_work = main::menu::MQuickWork();
		quick_work.selectedCommand = "COMMAND_REPLAY";
		quick_work.cursorPosition = getIconIndex(context, "Replay");
	
		context.transition.panOut(context);
		context.transition.syncOut(context);
	
		context.finish();
	
		return EVENTRESULT_FILTER;
	}
}


module QuickArcadeProject::ArcadeRoot::Buttons::SaveReplay
{
	function onActivate(context)
	{
		main::sound.play("ok");
		main::sound.stopStream();
	
		var quick_work = main::menu::MQuickWork();
		quick_work.selectedCommand = "COMMAND_SAVE_REPLAY";
		quick_work.cursorPosition = getIconIndex(context, "SaveReplay");
	
		context.transition.panOut(context);
		context.transition.syncOut(context);
	
		context.finish();
	
		return EVENTRESULT_FILTER;
	}
}

module QuickArcadeProject::ArcadeRoot::Buttons::Option
{
	function onActivate(context)
	{
		main::sound.play("ok");
		main::sound.stopStream();
	
		var quick_work = main::menu::MQuickWork();
		quick_work.selectedCommand = "COMMAND_OPTION";
		quick_work.cursorPosition = getIconIndex(context, "Option");
	
		context.transition.panOut(context);
		context.transition.syncOut(context);
	
		set_next_start_project();
		context.finish();
	
		return EVENTRESULT_FILTER;
	}
}

module QuickArcadeProject::ArcadeRoot::Buttons::Exit
{
	function onActivate(context)
	{
		main::sound.play("ok");
		main::sound.stopStream();
	
		var quick_work = main::menu::MQuickWork();
		quick_work.selectedCommand = "COMMAND_EXIT";
	
		context.transition.panOut(context);
		context.transition.syncOut(context);
	
		set_next_start_project();
		context.finish();
	
		return EVENTRESULT_FILTER;
	}
}