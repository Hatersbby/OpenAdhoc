module PROJECT::MComponent::SetupPanel::SetupWindow
{
    method doColorize()
    {
        var title = MComponent::SetupPanel::SetupWindow::Title;
        var slider;

        if (MComponent::SetupPanel.defined("Slider"))
            slider = MComponent::SetupPanel::Slider;

        var pulldown;
        if (MComponent::SetupPanel.defined("Pulldown"))
            pulldown = MComponent::SetupPanel::Pulldown;

        var text_input;
        if (MComponent::SetupPanel.defined("TextInput"))
            text_input = MComponent::SetupPanel::TextInput;

        var number_input;
        if (MComponent::SetupPanel.defined("NumberInput"))
            number_input = MComponent::SetupPanel::NumberInput;

        var vacant;
        if (MComponent::SetupPanel.defined("Vacant"))
            vacant = MComponent::SetupPanel::Vacant;

        var bottom_spacer;
        if (MComponent::SetupPanel.defined("BottomSpacer"))
            bottom_spacer = MComponent::SetupPanel::BottomSpacer;

        var buttons;
        if (MComponent::SetupPanel.defined("Buttons"))
            buttons = MComponent::SetupPanel::Buttons;

        var i = 0;

        for (var it = self.first_window; it != nil; it = it.next_window)
        {
            var p = it.__prototype__;

            if (p == title)
                continue;

            if (p == buttons)
                continue;

            if (it.visible)
            {
                if (p == bottom_spacer)
                {
                    var ii = (i % 2) + 7;
                    var c = main::menu::MColorObject();
                    c.color_index = ii;
                    it.bspacer.setColor(c);
                }
                else if (p == pulldown || p == text_input || p == number_input || p == slider || p == vacant)
                {
                    var ii = (i + 1) % 2 + 7;
                    var c = main::menu::MColorObject();
                    c.color_index = ii;
                    it.bg.setColor(c);
                    i++;
                }
            }
        }
    }

    method onLoad(context)
    {
        doColorize();
    }
}

module PROJECT::MComponent::SetupPanel::Buttons::OK::bgf
{
    method __copy_init__()
    {
        self.actor = main::menu::MFadeActor(self, 1.0);
        self.actor.period = 0.25;
        self.actor.repeat = true;
    }
}

module PROJECT::MComponent::SetupPanel::Buttons::CancelOK::No::bgf
{
    method __copy_init__()
    {
        self.actor = main::menu::MFadeActor(self, 1.0);
        self.actor.period = 0.25;
        self.actor.repeat = true;
    }
}

module PROJECT::MComponent::SetupPanel::Buttons::CancelOK::Yes::bgf
{
    method __copy_init__()
    {
        self.actor = main::menu::MFadeActor(self, 1.0);
        self.actor.period = 0.25;
        self.actor.repeat = true;
    }
}

module PROJECT
{
    #include "../share/dialog.ad"
    #include "../share/page_util.ad"
    #include "../share/course_define.ad"
    #include "../share/watcher_util.ad"

    PROJECT.load("/projects/arcade/" + main::game.option.game_zone + "_carlist");

    function onLoad(context)
    {
        main::sound.load();

        context.createRenderContext(1);
        var render_context = context.getRenderContext(0);
        render_context.transition = main::menu::MColorTransition();
        render_context.event_mask |= 2;
        render_context.startPage(OptionRoot);
    }

    function onUnload(context)
    {
        main::sound.unload();
        var render_context = context.getRenderContext(0);
        render_context.event_mask &= ~2;
    }

    function common_open(context, root, original_y)
    {
        start_page(context, root);
    }

    function common_close(context, root)
    {
        start_page(context, OptionRoot);
    }

    function setupSlider(slider, bias, none, overwriteMinMax)
    {
        if (bias == nil)
            bias = 1;

        if (none != nil && slider.index == 0)
            slider["label"].text = none;
        else
            slider["label"].text = slider.index * bias;

        var popup = slider["popup"];
        popup["pinch"]["value"].text = slider.index * bias;

        if (overwriteMinMax == nil || overwriteMinMax == 1)
        {
            var min = slider.min * bias;
            var max = slider.max * bias;
            popup["min"].text = min.toInt();
            popup["max"].text = max.toInt();
        }
    }
}