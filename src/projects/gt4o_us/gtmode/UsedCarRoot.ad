//---------------------------------------------------------------------------------------
// UsedCarRoot.ad
//
// Used Car Dealership root
// 
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// module
//---------------------------------------------------------------------------------------

module PROJECT::ROOT
{
    static current_region = nil;
    
    module ShopTable
    {
        static JP = "00";
        static US = "01";
        static EU = "02";

        static JP_offset = 0;
        static US_offset = 80;
        static EU_offset = 160;

        static JP_seed = 13;
        static US_seed = 23;
        static EU_seed = 37;

        static JP_bg = "80";
        static US_bg = "90";
        static EU_bg = "90";

        static JP_widget = "UsedCarAsia";
        static US_widget = "UsedCarUSA";
        static EU_widget = "UsedCarEU";

        static JP_title = "title80";
        static US_title = "title90a";
        static EU_title = "title90b";
    }
    
    module UsedCarModule { }

    function onInitialize(context)
    {
        hidden.visible = false;

        var week = main::game.calendar.getElapsedWeek(100);
        var game_zone = main::game.option.game_zone;

        UsedCarModule.load("usedcar/" + game_zone + "_used%04d".format(week));
        Title.text = context.translate(ROOT, ShopTable[current_region + "_title"]);
        Title.adjustScale();

        var bg_name = ShopTable[current_region + "_bg"];
        Year.image_path = "image/gtmode/usedcar/" + bg_name + ".png";
        Year.doInitialize(context);

        if (main::game.used_car.week != week)
        {
            delayOpenConfirmDialog(context, context.translate(ROOT, "used cars updated"));
            last_focus = nil;
        }

        enterPage(context, ROOT, "UsedCarTitle");
        var tip = ROOT["Common"]["ToolTip"]["tip"];
        tip.remove();
        tip.value = context.translate(ROOT, "TOOLTIP|UsedCar");

        var shop_name = ShopTable[current_region];
        var car_list = UsedCarModule::UsedCarData["usedcar_" + shop_name + "_carlist"];
        var col_list = UsedCarModule::UsedCarData["color_" + shop_name + "_carlist"];
        var seed = (week + 11) * 100 + ShopTable[current_region + "_seed"];
        var id_offset = ShopTable[current_region + "_offset"];

        for (var i = 0; i < car_list.size; i++)
        {
            var car = car_list[i];
            var col = col_list[i];
            var item = hidden::Item.doCopy();
            var meter = -1;

            if (week > -1)
            {
                if (main::menu::MRandom::GetValue(0, 100, seed * (i + 1)) == 0)
                    meter = main::menu::MRandom::GetValue(10000, 15000, seed * (i + 1));
            }
                
            var cg = main::menu::MCarGarage(car);
            cg.makeUsed(seed + (i * 111), col, meter);
            cg.updateCurrentStatus();
            item["chip"].setData(cg);
            item["Name"].text = cg.short_name;
            item["Name"].adjustScale();

            var train = cg.getDTrainType();
            train = context.translate(ROOT, "DriveTrainName", train);
            
            var spec0 = context.translate(ROOT, "car_spec0");
            item["Spec0"].text = spec0.format(train);

            var power = cg.getCatPs("%d%s/%s%s");
            var spec1 = context.translate(ROOT, "car_spec1");
            item["Spec1"].text = spec1.format(power);
            
            var torque = cg.getCatTq("%.2t%s/%s%s");
            var spec2 = context.translate(ROOT, "car_spec2");
            item["Spec2"].text = spec2.format(torque);

            var distance = cg.getOdometer("%.1t%s");
            var spec3 = context.translate(ROOT, "car_spec3");
            if (meter != -1)
            {
                item["Spec3"].visible = false;
                item["Spec3a"].visible = true;
                item["Spec3a"].text = spec3.format(distance);
            }
            else
            {
                item["Spec3"].visible = true;
                item["Spec3a"].visible = false;
                item["Spec3"].text = spec3.format(distance);
            }

            item["Price"].text = "Cr." + main::menu::MUtility::GetMoneyString(cg.getUsedPrice());
            item["Price"].adjustScale();

            item.defineStatic("gcar", cg);
            item.defineStatic("week", week);

            var id = i + id_offset;
            item.defineStatic("idx", id);
            var soldout = main::game.used_car.get(week, id);
            item.defineStatic("soldout", soldout);
            item["SoldOut"].visible = soldout;

            ScrollBox::SelectBox.appendChild(context, item);
        }

        if (last_focus != nil)
        {
            var idx = last_focus.toInt();
            idx -= id_offset;
            ScrollBox::SelectBox.index = idx;
            last_focus = nil;
        }

        ScrollBox::SelectBox.callFocus(ROOT);
    }

    function onFinalize(context)
    {
        ScrollBox::SelectBox.clearChildren(context);
        leavePage(context, ROOT);
        UsedCarModule.clearStatic();
    }

    function onCancel(context)
    {
        main::sound.play("cancel");  
        set_last_focus(ShopTable[current_region + "_widget"]);
        start_page(context, TopRoot);

        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::ScrollBox::SelectBox
{
    function onValueChanged(context, index) { }

    function onActivate(context, event)
    {
        var widget = event.widget;
        if (widget["soldout"])
            main::sound.play("disable");
        else
        {
            main::sound.play("ok");
            BuyCarRoot::openUsedCar(context, widget["gcar"], widget["week"], widget["idx"], ROOT);
        }

        return EVENTRESULT_FILTER;
    }
}