module MemcardProject::FileSelector
{
	static listMaked = false;
	static manager = nil;
	static watcher = nil;
	static currentModeTitle = "";
	static isSaveMode = false;
	static phase = 0;
	static openDialog = nil;
	static newFileWidget = nil;

	function setActor(widget)
	{
		widget.actor = main::menu::MBlinkActor(widget);
		widget.actor.period = 0.25;
	}
	
	setActor(info::dec_arrow::img);
	setActor(info::inc_arrow::img);

	function onInitialize(context)
	{
		context.cursor_visible = false;
	
		message.visible = false;
		info.visible = false;
	
		phase = 0;
		openDialog = nil;
		listMaked = -1;
	
		manager = main::menu::MMemoryCardManager(MemcardProject::mode);
		currentModeTitle = "";
	
		ProgressDialog::setProgress(manager.progress);
		manager.start();
	
		isSaveMode = false;
	
		switch (MemcardProject::mode)
		{
			case "MODE_SAVE_FULL_REPLAY":
				{
					currentModeTitle = StoreHouse::gt4p_replay.value;
					isSaveMode = true;
					title.image_path = "image/memcard/JP/save_schl_title.png";
				}
			case "MODE_SAVE_BESTLAP_REPLAY":
				{
					currentModeTitle = StoreHouse::gt4p_best_replay.value;
					isSaveMode = true;
					title.image_path = "image/memcard/JP/save_schl_title.png";
				}
			case "MODE_LOAD_REPLAY" || "MODE_LOAD_BESTLAP_REPLAY":
				{
					title.image_path = "image/memcard/JP/load_replay_title.png";
				}
			case "MODE_DEMONSTRATION":
				{
					title.image_path = "image/memcard/JP/demonstration_title.png";
				}
		}
	
		title.doInitialize(context, FileSelector);
	
		if (isSaveMode)
		{
			var objName = manager.getNewFile().objectName;
			//print("object name = "  objName  "");
	
			newFileWidget = setItem(manager.getNewFile(), SHFile).getDeepCopy();
			newFileWidget.active = true;
			info.appendChild(context, newFileWidget);
	
			var mcact = main::menu::MFadeActor(newFileWidget, 1.0, 0.0);
			mcact.repeat = 1;
			mcact.src_over = 1.5;
			mcact.dest_over = 0.2;
	
			newFileWidget.actor = mcact;
		}
		else
		{
			info::navigate.visible = 0;
			info::free.visible = 0;
		}
	
		watcher = main::menu::MScriptWatcher(context, onCheck);
		watcher.interval = 1;
		watcher.append();
	}

	function onCancel(context, event, item)
	{
		main::sound.play("cancel");
		exitMenu(context);
		return EVENTRESULT_FILTER;
	}
	
	function exitMenu(context)
	{
		watcher.remove();
	
		info::FileList.clearChildren(context);
		manager = nil;
	
		context.transition = main::menu::MColorTransition();
		context.transition.panOut(context);
		context.transition.syncOut(context);
	
		context.finish();
	}

	function clearList(context)
	{
		info::FileList.clearChildren(context);
		listMaked = -1;
	}
	
	function isPressDelete()
	{
		return MemcardProject::deleteKeyPress;
	}
	
	function clearPressDelete()
	{
		MemcardProject::deleteKeyPress = 0;
	}
	
	static deleteModeLock = 0;

	function isDeleteMode()
	{
		if (!isSaveMode)
		{
			return;
		}
	
		if (phase == 0)
		{
			isPressDelete()
			return;
		}
		return deleteModeLock;
	}
	
	function selectIndex()
	{
		return info::FileList.index;
	}

	function displayCommand()
	{
		if (isSaveMode)
		{
			var isNewFile = (selectIndex() == 0 && manager.isUseNewFile());
	
			if (isDeleteMode())
			{
				if (isNewFile)
				{
					info::command.text = StoreHouse::cant_delete_newfile.value;
				}
				else
				{
					info::command.text = StoreHouse::delete.value;
				}
	
				setDeleteModeBG(1);
			}
			else
			{
				if (isNewFile)
				{
					info::command.text = StoreHouse::save.value;
				}
				else
				{
					info::command.text = StoreHouse::overwrite.value;
				}
	
				setDeleteModeBG(0);
			}
		}
		else
		{
			info::command.text = StoreHouse::load.value;
		}
	}

	function setDeleteModeBG(f)
	{
		if (f)
		{
			var cobj = main::menu::MColorObject(1.0, 0.5, 0.5, 1.0);
			bg.setColor(cobj);
		}
		else
		{
			var cobj = main::menu::MColorObject(1.0, 1.0, 1.0, 1.0);
			bg.setColor(cobj);
		}
	}
	
	static free = -2;
	static previousFocusedItem = nil;

	function onCheck(context)
	{
		if (!manager.isConnect())
		{
			if (listMaked >= 0)
			{
				print("delete list.");
				info::FileList.index = 0;
				clearList(context);
	
				if (phase == 1)
				{
					if (openDialog == YesNoDialog)
					{
						YesNoDialog::close(context);
					}
					else if (openDialog == OKDialog)
					{
						OKDialog::close(context);
					}
				}
				setDeleteModeBG(0);
			}
			else
			{
				message.text = StoreHouse::nocard.value;
				info.visible = false;
				message.visible = true;
			}
			return;
		}
	
		if (!isSaveMode && manager.isNoFile())
		{
			message.visible = true;
			message.text = StoreHouse::nofile.value;
		}
		else
		{
			message.visible = false;
		}
	
		info.visible = true;
		displayCommand();
	
		if (manager.isFormat())
		{
			var prevFree = free;
			free = manager.free;
	
			if (free != prevFree)
			{
				info::free.text = StoreHouse::free_space_kb.value.format(free);
			}
		}
		else
		{
			info::free.text = StoreHouse::unformat.value;
			free = -1;
		}
	
		appendVirtual(context);
	
		var sw = info::FileList.getFocusedWidget();
	
		if (newFileWidget != nil)
		{
			if (sw == nil)
			{
				newFileWidget.visible = 0;
			}
			else
			{
				newFileWidget.visible = !isDeleteMode();
				newFileWidget.interpolateY(sw.y + info::FileList.y - 8, 0.6);
				newFileWidget.x = sw.x + info::FileList.x - 8;
			}
		}
	
		if (previousFocusedItem != sw && sw != nil)
		{
			if (previousFocusedItem != nil)
			{
				previousFocusedItem.actor = nil;
			}
	
			setActor(sw["cursor"]);
			previousFocusedItem = sw;
		}
	}

	function appendVirtual(context)
	{
		var count = manager.count;
	
		if (listMaked >= count)
		{
			return;
		}
	
		if (listMaked > count)
		{
			clearList(context);
		}
	
		//print("count is " (count));
		print("making filelist.");
	
		if (manager.isUseNewFile() && listMaked == -1)
		{
			var obj = template::FileNew.getDeepCopy();
			info::FileList.appendChild(context, obj);
		}
	
		if (listMaked < 0)
		{
			listMaked = 0;
		}
	
		var i = listMaked;
		while (i < count)
		{
			var obj = setItem(manager.getFile(i)).getDeepCopy();
			info::FileList.appendChild(context, obj);
			++i;
		}
	
		listMaked = count;
	}

	function itemCallback(context, widget)
	{
		var index = widget.parameter;
	
		if (index >= manager.count)
		{
			return nil;
		}
	
		var file = manager.getFile(index);
		if (file == nil)
		{
			return nil;
		}
	
		setItem(file);
		return;
	}

	function setItem(file, templateComp)
	{
		var objName = file.objectName;
	
		if (templateComp == nil)
		{
			templateComp = template;
		}
	
		var t = templateComp[file.objectName];
		var size = file.size;
	
		t["size"].text = (size < 0) ? "---" : ("" + (size) + "KB"); // 1481
		t["date"].text = file.date;
	
		switch (objName)
		{
			case "FileReplayFull" || "FileReplayLicense":
			{
				t["time"].text  = file.time;
				t["title"].text = file.title;
				t["car"].text   = file.carName;
			}
		}
	
		return t;
	}

	static unformatChars = [117, 110, 102, 111, 114, 109, 97, 116]; // "unformat"
	static unformatCount = 0;
	
	function onKeyPress(context, event)
	{
		if (event.keysym == unformatChars[unformatCount])
		{
			unformatCount++;
			if (unformatCount == unformatChars.size)
			{
				checkUnformat(context);
				unformatCount = 0;
			}
			return 2;
		}
		else
		{
			unformatCount = 0;
		}
	
		if (event.keysym == 65379 && isPressDelete())
		{
			print("do dump.");
	
			var index = selectIndex();
			//print("index = " + (index)); // 1617
	
			var file = nil;
	
			if (isSaveMode)
			{
				if (index == 0)
				{
					print("can't dump new file.");
					return 2;
				}
				index--;
			}
	
			file = manager.getFile(index);
	
			if (file != nil)
			{
				file.dump(manager);
			}
	
			return 2;
		}
	
		return 0;
	}

	function checkUnformat(context)
	{
		main::sound.play("ok");
	
		if (isSaveMode)
		{
			print("unformat?");
			manager.requestPause();
			manager.waitPause();
	
			YesNoDialog::open(context, FileSelector::doUnformat, FileSelector::processEnd, "unformat ok?", 0);
		}
	}
	
	function doUnformat(context)
	{
		print("unformat!");
	
		var file = manager.getNewFile();
		file.unformat(manager);
	
		manager.restart();
	
		print("unformat done.");
	
		manager.clear();
		clearList(context);
	}

	function doFormatSave(context)
	{
		manager.waitPause();
		main::sound.play("ok");
	
		phase = 2;
	
		ProgressDialog::open(context, StoreHouse::formating.value);
		YesNoDialog::simpleClose(context);
	
		var file = manager.getNewFile();
		var r = file.format(manager, ProgressDialog::setTarget);
	
		if (r)
		{
			print("format success.");
			doSave(context);
	
			ProgressDialog::setTarget(0.0);
			ProgressDialog::setTarget(0.0);
		}
		else
		{
			print("format failed.");
			processEnd(context);
	
			OKDialog::open(context, oksound, cancelsound, StoreHouse::format_error.value);
		}
	
		ProgressDialog::close(context);
	}

	function doSave(context)
	{
		print("do save.");
	
		var index = selectIndex();
	
		// print("index = " + (index));
	
		main::sound.play("ok");
		manager.waitPause();
		phase = 2;
	
		var file = manager.getNewFile();
	
		if (index != 0)
		{
			var oldfile = manager.getFile(index - 1);
			if (oldfile == nil)
			{
				print("file is nil!");
				processEnd(context);
				return;
			}
	
			ProgressDialog::open(context, StoreHouse::deleting.value);
	
			var r = oldfile.remove(manager, ProgressDialog::setTarget);
			if (r)
			{
				ProgressDialog::setTarget(0.0);
			}
			else
			{
				print("delete failed.");
	
				OKDialog::open(context, oksound, cancelsound, context.translate(StoreHouse, "delete_error"));
				processEnd(context);
				ProgressDialog::close(context);
				return;
			}
		}
	
		ProgressDialog::open(context, StoreHouse::writing.value);
		YesNoDialog::simpleClose(context);
	
		var r = file.saveNew(manager, currentModeTitle, ProgressDialog::setTarget);
		file.setNewFile(1);
	
		if (r == "OK")
		{
			print("save success.");
			manager.clearAutoSaveDisabled();
	
			OKDialog::open(
				context,
				oksound,
				cancelsound,
				StoreHouse::save_complete.value
			);
		}
		else
		{
			print("save failed.");
	
			OKDialog::open(
				context,
				oksound,
				cancelsound,
				StoreHouse::write_error.value
			);
		}
	
		ProgressDialog::close(context);
		clearList(context);
		manager.clear();
		processEnd(context);
	}

	function doLoad(context)
	{
		print("do load.");
	
		var index = selectIndex();
	
		// print("index = " + (index)); // 2044
	
		main::sound.play("ok");
	
		var file = manager.getFile(index);
	
		if (file == nil)
		{
			print("file is nil!");
			processEnd(context);
			return;
		}
	
		manager.waitPause();
		phase = 2;
	
		ProgressDialog::open(context, StoreHouse::reading.value);
		YesNoDialog::simpleClose(context);
	
		var r = file.load(manager, ProgressDialog::setTarget);
	
		// print("load result " + (r));
	
		switch (r)
		{
			case "DEVICE_ERROR":
			{
				print("Device error.");
				OKDialog::open(context, oksound, cancelsound, StoreHouse::read_error.value);
			}
			case "INVALID_FILE":
			{
				print("invalid file error.");
				OKDialog::open(context, oksound, cancelsound, StoreHouse::invalid_file.value);
			}
			default:
			{
				manager.clearAutoSaveDisabled();
				OKDialog::open(context, oksoundexit, oksoundexit, StoreHouse::load_complete.value);
				ProgressDialog::close(context);
				context.sync(0.75);
				oksoundexit(context);
				return;
			}
		}
	
		ProgressDialog::close(context);
		processEnd(context);
	}

	function doDelete(context)
	{
		print("do delete.");
	
		var index = selectIndex();
	
		//print("index = " + (index)); // 2207
	
		if (index == 0)
		{
			processEnd(context);
			return;
		}
	
		var file = manager.getFile(index - 1);
	
		if (file == nil)
		{
			print("file is nil!");
			processEnd(context);
			return;
		}
	
		manager.waitPause();
		main::sound.play("ok");
	
		phase = 2;
	
		ProgressDialog::open(context, StoreHouse::deleting.value);
		YesNoDialog::simpleClose(context);
	
		var r = file.remove(manager, ProgressDialog::setTarget);
	
		if (r)
		{
			print("delete success.");
			OKDialog::open(
				context,
				oksound,
				cancelsound,
				StoreHouse::delete_complete.value
			);
		}
		else
		{
			print("delete failed.");
			OKDialog::open(
				context,
				oksound,
				cancelsound,
				context.translate(StoreHouse, "delete_error")
			);
		}
	
		ProgressDialog::close(context);
		clearList(context);
		manager.clear();
		processEnd(context);
	}

	function processEnd(context)
	{
		openDialog = nil;
		clearPressDelete();
		phase = 0;
		manager.restart();
	}
	
	function oksound(context)
	{
		main::sound.play("ok");
	}
	
	function cancelsound(context)
	{
		main::sound.play("cancel");
	}
	
	function oksoundexit(context)
	{
		main::sound.play("ok");
		exitMenu(context);
	}

	function oksoundend(context)
	{
		main::sound.play("ok");
		processEnd(context);
	}
	
	function cancelsoundend(context)
	{
		main::sound.play("cancel");
		processEnd(context);
	}
}

module MemcardProject::FileSelector::info::FileList
{
	function onValueChanged(context, idx)
	{
		main::sound.play("cursor")
	}

	function onActivate(context, event, item)
	{
		var focus = item.getFocusedWidget();
		if (focus == nil)
		{
			print("selected focus is nil");
			return EVENTRESULT_FILTER;
		}
	
		var index = item.index;
		FileSelector::phase = 1;
	
		if (isSaveMode)
		{
			FileSelector::deleteModeLock = isPressDelete();
	
			if (isDeleteMode())
			{
				if (index == 0)
				{
					FileSelector::phase = 0;
					return EVENTRESULT_FILTER;
				}
	
				print("delete confirm.");
				YesNoDialog::open(context,FileSelector::doDelete, FileSelector::cancelsoundend, StoreHouse::delete_file.value,0);
			}
	
			if (manager.isFormat())
			{
				print("save confirm.");
				var mes = nil;
				var defaultYes = 0;
	
				if (index == 0)
				{
					defaultYes = 1;
					mes = StoreHouse::save_file.value;
	
					var datasize = manager.getNewFile().size;
					if ((datasize > (manager.realFree - 1)))
					{
						main::sound.play("ok");
						OKDialog::open(context,
							oksoundend,
							cancelsoundend,
							StoreHouse::not_enough_space.value.format(datasize));
						openDialog = OKDialog;
						return EVENTRESULT_FILTER;
					}
				}
				else
				{
					mes = StoreHouse::overwrite_file.value;
	
					var datasize = manager.getNewFile().size;
					var file = manager.getFile(index - 1);
	
					if (file != nil && ((datasize - file.size) > manager.realFree))
					{
						main::sound.play("ok");
						OKDialog::open(context,
							oksoundend,
							cancelsoundend,
							StoreHouse::not_enough_space.value.format(datasize));
						openDialog = OKDialog;
						return EVENTRESULT_FILTER;
					}
				}
	
				YesNoDialog::open(context,FileSelector::doSave, FileSelector::cancelsoundend, mes, defaultYes);
			}
	
			print("format confirm.");
			YesNoDialog::open(context,
				FileSelector::doFormatSave,
				FileSelector::cancelsoundend,
				StoreHouse::format_save_file.value,
				0);
		}
		else
		{
			print("load confirm.");
			YesNoDialog::open(context,
				FileSelector::doLoad,
				FileSelector::cancelsoundend,
				StoreHouse::load_file.value,
				0);
		}
	
		openDialog = YesNoDialog;
		manager.requestPause();
		main::sound.play("ok");
		return EVENTRESULT_FILTER;
	}
}