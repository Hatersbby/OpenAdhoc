













module ROOT
{
    attribute result_;
    attribute modal_;
    attribute cursor_visible_;
    attribute thread_checkReady_;
    
    method open(context)
    {
        self.result_ = [nil, nil, nil, nil];
        self.modal_ = main::SequenceUtil::ModalPage(context, self);
        self.modal_.open();
        
        var res = self.result_;
        self.result_ = nil;
        return res;
    }

    method close(context)
    {
        foreach (var root in Context1P.getPageList().reverse())
            root.close(Context1P);
        
        foreach (var root in Context2P.getPageList().reverse())
            root.close(Context2P);

        context.sync(0.5);
        
        Context1P.clearPage();
        Context2P.clearPage();

        if (self.modal_ != nil)
        {
            self.modal_.close();
            self.modal_ = nil;
        }

        context.cursor_visible = self.cursor_visible_;
    }

    method onInitialize(context)
    {
        pdistd::MGamePort::SetWheelAssignMode(pdistd::WheelAssignMode::CONSOLE);
        self.cursor_visible_ = context.cursor_visible;
        context.cursor_visible = false;

        var root1 = CarSplitRoot.doCopy();
        var root2 = CarSplitRoot.doCopy();
        root1.context_number = 1;
        root2.context_number = 2;

        Context1P.startPage(root1);
        Context2P.startPage(root2);

        self.thread_checkReady_ = Thread(self.checkReady, context);
        self.thread_checkReady_.start();
    }

    method onFinalize(context)
    {
        if (self.thread_checkReady_ != nil)
        {
            self.thread_checkReady_.terminate();
            self.thread_checkReady_ = nil;
        }
    }

    method checkReady(context)
    {
        for (;;)
        {
            var root1 = Context1P.getCurrentPage();
            var root2 = Context2P.getCurrentPage();

            if (root1 != nil && root2 != nil)
            {
                if (root1.isReady() && root2.isReady())
                {
                    context.sync(2.0);

                    self.result_ = [root1.getSelectedCar(), root2.getSelectedCar(), root1.getDriver(), root2.getDriver()];
                    self.close(context);
                    break;
                }
            }

            Thread::Sleep(0.1);
        }
    }
    
}