













module ROOT
{
    hidden.visible = false;

    static sModeTextkey = [
        gtengine::GameMode::SINGLE_RACE : "GameMode_SINGLE_RACE",
        gtengine::GameMode::TIME_ATTACK : "GameMode_TIME_ATTACK",
        gtengine::GameMode::DRIFT_ATTACK : "GameMode_DRIFT_ATTACK",
        gtengine::GameMode::SPLIT_BATTLE : "GameMode_SPLIT_BATTLE",
    ];

    attribute mode_list_;
    attribute modal_;
    attribute result_;

    static sModeList_SinglePlay = [
        gtengine::GameMode::SINGLE_RACE,
        gtengine::GameMode::TIME_ATTACK,
        gtengine::GameMode::DRIFT_ATTACK,
    ];

    static sModeList_MultiPlay = [
        gtengine::GameMode::SPLIT_BATTLE,
        gtengine::GameMode::TIME_ATTACK,
        gtengine::GameMode::DRIFT_ATTACK,
    ];

    method open(context)
    {
        self.result_ = nil;
        self.modal_ = main::SequenceUtil::ModalPage(context, self);
        self.modal_.open();

        var result = self.result_;
        self.result_ = nil;
        return result;
    }

    method openSinglePlay(context)
    {
        self.mode_list_ = sModeList_SinglePlay;
        return self.open(context);
    }

    method openMultiPlay(context)
    {
        self.mode_list_ = sModeList_MultiPlay;
        return self.open(context);
    }

    method close(context)
    {
        if (self.modal_ != nil)
        {
            self.Fade.backward();
            self.Fade.start();
            self.modal_.close(self.Fade.total_time);
            self.modal_ = nil;
        }
    }

    method onInitialize(context)
    {
        self.Fade.forward();
        self.Fade.restart();

        var x, y;
        if (self.mode_list_.size < 4)
        {
            y = 1;
            x = self.mode_list_.size;
        }
        else
        {
            y = 2;
            x = self.mode_list_.size / y;
        }

        IconBox.setItemTemplate(context, hidden::Item);
        IconBox.setItemCount(x, y);

        for (var i = 0; i < self.mode_list_.size; i++)
        {
            var w = IconBox.getItemWidget(i, context);
            var mode = self.mode_list_[i];
            var key = sModeTextkey[mode];
            w.TextFace.text = manager.translate("CommonArcadeMode", key);
            w.defineAttribute("mode", mode);
        }

        ROOT.setFocus(IconBox);
    }

    module IconBox
    {
        method onActivate(context)
        {
            sound.play("ok");

            var w = IconBox.getItemWidget(IconBox.focus_index, context);
            ROOT.result_ = w.mode;
            ROOT.close(context);

            return 2;
        }

        method onCancel(context)
        {
            sound.play("cancel");

            ROOT.result_ = nil;
            ROOT.close(context);

            return 2;
        }
    }
}