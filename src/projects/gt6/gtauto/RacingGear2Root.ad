













module ROOT
{
    attribute modal_page;
    attribute need_save = false;
    
    hidden.visible = false;

    method open(context)
    {
        self.modal_page = main::SequenceUtil::ModalPage(context, ROOT);
        self.modal_page.open();
    }

    method close(context)
    {
        if (self.modal_page != nil)
        {
            ContextMain.disableInput();

            if (self.need_save)
            {
                SaveDataUtilGT6::saveEveryWhere(context);
                self.need_save = false;
            }

            GTAutoMenu::ListWindow::DriverView.finalize(context);

            PageUtil::visibleUnderPages(context, self);

            var actor = self.Fade;
            actor.backward();
            actor.start();

            var delay_time = actor.total_time;
            self.modal_page.close(delay_time);
            self.modal_page = nil;

            ContextMain.enableInput();
        }
    }

    method onCancel(context, event, item)
    {
        main::sound.play("cancel");
        close(context);
        return EVENTRESULT_FILTER;
    }

    method onInitialize(context)
    {
        var preview_dp = gtengine::MCarDriverParameter();
        preview_dp.head_code = 7;
        preview_dp.head_color_code = 0;
        preview_dp.body_code = 7;
        preview_dp.body_color_code = 0;

        GTAutoMenu::ListWindow::DriverView.initialize(context);
        GTAutoMenu::ListWindow::DriverView.setDriver(preview_dp);

        ContextMain.disableInput();

        var actor = self.Fade;
        actor.forward();
        actor.restart();
        actor.on_effect_end = function(context)
        {
            actor.on_effect_end = nil;
            PageUtil::invisibleUnderPages(context, self);
            ContextMain.enableInput();
            GTAutoRoot::showTutorial(context);
        };

        GTAutoMenu.initialize(context);
        self.Fade.forward();
        self.Fade.restart();
    }

    method onKeyPress(context, event)
    {
        if (CursorProject::StartMenuRoot::StartMenu.checkKeyPress(context, event))
            return EVENTRESULT_FILTER;

        return EVENTRESULT_CONTINUE;
    }

    method getItemThumbnailPath(type, code, color)
    {
        var path = "";
        if (type == "AVATAR_MET")
        {
            path = ThumbnailUtil::Avatar::getImagePathGT6(ThumbnailUtil::Avatar::Genre::SIMPLE,
                ThumbnailUtil::Avatar::Type::MET,
                code, color, 0, 0);
        }
        else if (type == "AVATAR_SUIT")
        {
            path = ThumbnailUtil::Avatar::getImagePathGT6(ThumbnailUtil::Avatar::Genre::SIMPLE,
                ThumbnailUtil::Avatar::Type::SUITS,
                0, 0, code, color);
        }
        else if (type == "AVATAR_SET")
        {
            path = ThumbnailUtil::Avatar::getImagePathGT6(ThumbnailUtil::Avatar::Genre::SETUP,
                ThumbnailUtil::Avatar::Type::MET_SUITS,
                code, color, code, color);
        }

        return path;
    }

    method getItemName(type, code)
    {
        var name = "";
        if (type == "AVATAR_MET")
        {
            name = manager.translate("RacingGear", "met_%02d".format(code));
        }
        else if (type == "AVATAR_SUIT")
        {
            name = manager.translate("RacingGear", "suit_%02d".format(code));
        }
        else if (type == "AVATAR_SET")
        {
            name = manager.translate("RacingGear", "met_%02d".format(code));
        }

        return name;
    }

    module GTAutoMenu
    {
        attribute active_w;

        method initialize(context)
        {
            var focus_w = nil;

            var category_w = hidden::Category.doCopy();
            category_w.setText(manager.translate("GTAuto", "Category_RacingGear"));

            foreach (var type in ["AVATAR_MET", "AVATAR_SUIT", "AVATAR_SET"])
            {
                var category_item_w = hidden::CategoryItem.doCopy();
                category_item_w.value = type;
                category_item_w.setText(manager.translate("GTAuto", "Type_%{type}"));

                if (focus_w == nil)
                    focus_w = category_item_w;

                category_w.setCategoryItemComponent(context, category_item_w);
            }

            self.setCategoryComponent(context, category_w);

            self.setActive(context, focus_w);

            ROOT.setFocus(focus_w);
        }

        method onFinalize(context)
        {
            if (self.active_w != nil)
            {
                self.active_w.active = false;
                self.active_w = nil;
            }

            self.clearCategoryComponent(context);
        }

        method setActive(context, active_item)
        {
            if (self.active_w != nil)
            {
                self.active_w.active = false;
                self.active_w = nil;
            }

            active_item.active = true;
            self.active_w = active_item;

            self.updateList(context, active_item);
        }

        method updateList(context, item)
        {
            if (item == nil)
                item = self.active_w;

            var item_type = item.value;
            
            var orderby_str = "";
            if (item_type == "AVATAR_SET")
                orderby_str = "Price, UnlockLevel, ID DESC";
            else
                orderby_str = "Price";
            
            var info_list = SPECDB.queryList("SELECT '%{item_type}' as type, ID as code, ColorBegin, ColorEnd, (ColorEnd - ColorBegin + 1) as TotalColorCount, Price1"
                                            " FROM %{item_type}"
                                            " WHERE Price > 0"
                                            " ORDER BY %{orderby_str}")

            GTAutoMenu::ListWindow::clip::ListBox.setItemList(context, info_list);
        }
    }

    module GTAutoMenu::ListWindow::clip::ListBox
    {
        attribute info_list;
        attribute prev_focus_w;
        attribute active_w_index = -1;

        method setItemList(context, info_list)
        {
            self.active_w_index = -1;
            self.setItemTemplate(context, hidden::ListItem);
            self.setItemCount(0);
            self.postRedraw();

            context.wait();

            self.setItemTemplate(context, hidden::ListItem);
            self.setItemCount(info_list.size);
            self.info_list = info_list;
            self.focus_index = 0;

            var empty = info_list.size > 0;
            self.insensitive = !empty;

            ListWindow::Empty.visible = !empty;
        }

        method inFocus(context)
        {
            if (self.insensitive)
                return;

            var focus_w = ROOT.getFocusWidget();
            if (focus_w == nil)
                return;

            self.prev_focus_w = focus_w;
            ROOT.setFocus(GTAutoMenu.getListBox());
        }

        method outFocus(context)
        {
            if (self.prev_focus_w != nil)
            {
                ROOT.setFocus(self.prev_focus_w);
                self.prev_focus_w = nil;
            }
        }

        method onActivate(context)
        {
            var w = self.getInitializedWidget(context, self.focus_index);
            if (w == nil || self.focus_index == self.active_w_index)
                return EVENTRESULT_FILTER;

            var prev_active_w = self.getItemWidget(self.active_w_index);
            if (prev_active_w != nil)
                prev_active_w.set_active(false);

            self.active_w_index = self.focus_index;
            w.set_active(true);
            w.on_activate(context);

            return EVENTRESULT_FILTER;
        }

        method getInitializedWidget(context, i)
        {
            if (i < 0)
                return nil;

            var w = self.getItemWidget(i);
            if (w == nil)
            {
                w = self.getItemWidget(i, context);
            }

            if (w.info == nil)
            {
                var info = self.info_list[i];
                w.initialize(context, info);
            }

            return w;
        }

        method onKeyPress(context, event)
        {
            if (event.keysym == CELL_PAD_CTRL_L3_LEFT)
            {
                sound.play("cursor");
                GTAutoMenu::ListWindow::clip::ListBox.outFocus(context);
                return EVENTRESULT_FILTER;
            }

            return EVENTRESULT_CONTINUE;
        }

        method onFocusNotify(context, new_index, old_index)
        {
            if (new_index != nil)
            {
                var w = self.getItemWidget(new_index, context);
                if (w != nil && w.defined("on_focus_enter"))
                    w["on_focus_enter"](context);
            }

            if (old_index != nil)
            {
                var w = self.getItemWidget(old_index, context);
                if (w != nil && w.defined("on_focus_leave"))
                    w["on_focus_leave"](context);
            }

            return EVENTRESULT_STOP;
        }

        method onVisibleNotify(context, indices)
        {
            foreach (var i in indices)
            {
                if (self.getItemVisible(i))
                {
                    var w = self.getInitializedWidget(context, i);
                    if (i == self.active_w_index)
                        w.set_active(true);
                }
                else
                    self.setItemWidget(i, context, nil);
            }

            return EVENTRESULT_STOP;
        }
    }

    module GTAutoMenu::ListWindow::DriverView
    {
        attribute base_dp;
        attribute preview_dp;
        attribute is_preview = false;
        attribute info;
        attribute list_item;
        attribute current_camera;
        attribute price;

        method initialize(context)
        {
            self.insensitive = true;
            
            var sbox = self.SBox;
            sbox.Name.text = "";
            sbox.CrPrice::Price.text = "--";
            sbox.OwnFlag.visible = false;
            sbox.CompleteFlag.visible = false;
            sbox.Colors.text = "";
            sbox.Buy.insensitive = true;

            self.SceneFace.visible = false;
        }

        method finalize(context)
        {
            self.base_dp = nil;
            self.preview_dp = nil;
            self.info = nil;
            self.list_item = nil;
            self.SceneFace.visible = false;

            ORG.setEnableStereoRendering(false);
            self.price = nil;
        }

        method onFinalize(context)
        {
            self.finalize(context);
        }

        method setDriver(dp)
        {
            self.base_dp = dp;
            self.preview_dp = gtengine::MCarDriverParameter();
            self.preview_dp.deepCopy(dp);
            setDefaultDriver(self.preview_dp);

            SceneFaceUtil::loadScene(self.SceneFace, "GTAUTO_gear");

            SceneFace.saveCommandQueue();
            
            self.current_camera = "GTAUTO_gear_top";

            ORG.setEnableStereoRendering(true);

            self.SceneFace.visible = true;
        }

        method startPreview(context, info, list_item)
        {
            if (info.type == "AVATAR_MET")
            {
                self.preview_dp.head_code = info.code;
                self.preview_dp.head_color_code = info.ColorBegin;
            }
            else if (info.type == "AVATAR_SUIT")
            {
                self.preview_dp.body_code = info.code;
                self.preview_dp.body_color_code = info.ColorBegin;
            }
            else if (info.type == "AVATAR_SET")
            {
                self.preview_dp.head_code = info.code;
                self.preview_dp.head_color_code = info.ColorBegin;
                self.preview_dp.body_code = info.code;
                self.preview_dp.body_color_code = info.ColorBegin;
            }

            self.is_preview = true;
            self.info = info;
            self.list_item = list_item;

            var sbox = self.SBox;
            sbox.Name.text = list_item.Name.text;     
            sbox.ColorSelect::OptionMenu.initialize(context, info);
            sbox.ColorSelect.visible = info.TotalColorCount > 1;

            self.reloadPreviewDriver();
            
            SceneFace.saveCommandQueue();

            var camera_script = info.type == "AVATAR_MET" ? "GTAUTO_gear_zoom" : "GTAUTO_gear_top";
            if (self.current_camera != camera_script)
            {
                SceneFaceUtil::loadScene(self.SceneFace, camera_script);
                SceneFace.saveCommandQueue();
                self.current_camera = camera_script;
            }

            self.insensitive = false;
        }

        method endPreview()
        {
            if (!self.is_preview)
                return;

            self.SBox.Buy.insensitive = true;

            self.preview_dp.head_code = base_dp.head_code;
            self.preview_dp.head_color_code = base_dp.head_color_code;
            self.preview_dp.body_code = base_dp.body_code;
            self.preview_dp.body_color_code = base_dp.body_color_code;

            self.is_preview = false;
            self.info = nil;
            self.list_item = nil;

            self.insensitive = true;
            self.reloadPreviewDriver();

            SceneFace.saveCommandQueue();

            if (self.current_camera == "GTAUTO_gear_zoom")
            {
                SceneFaceUtil::loadScene(self.SceneFace, "GTAUTO_gear_top");
                SceneFace.saveCommandQueue();
                self.current_camera = "GTAUTO_gear_top";
            }
        }

        method setColorIndex(color_index)
        {
            if (self.info.type == "AVATAR_MET")
            {
                self.preview_dp.head_color_code = color_index;
            }
            else if (self.info.type == "AVATAR_SUIT")
            {
                self.preview_dp.body_color_code = color_index;
            }
            else if (self.info.type == "AVATAR_SET")
            {
                self.preview_dp.head_color_code = color_index;
                self.preview_dp.body_color_code = color_index;
            }

            self.reloadPreviewDriver();
        }

        method setDefaultDriver(dp)
        {
            SceneFace.execCommand("setDefaultDriver %s %s %s %s 1".format(
                dp.head_code, dp.body_code, dp.head_color_code, dp.body_color_code));
        }

        method reloadPreviewDriver()
        {
            SceneFace.resetCommandQueue();
            self.setDefaultDriver(self.preview_dp);

            SceneFace.execCommand("reloadDefaultDriverModel    1      -1       driver1    true   false     .      driver2    .          %FACEHANS");
        }

        method onActivate(context, event)
        {
            if (event.widget.name == "Buy")
            {
                sound.play("ok");

                var select_color_w = SBox::ColorSelect::OptionMenu.getItem();
                var color_index = select_color_w.color_index;
                var color_num = select_color_w.color_num;
                var color_count = select_color_w.color_count;

                if (color_index != nil)
                {
                    var v0 = ROOT.getItemName(self.info.type, self.info.code);
                    var v1 = manager.translate("GTAuto", "Label_ColorNumber").build(color_num);
                    var v2 = manager.translate("Unit", "CREDIT") + " " + pdiext::MMisc::GetMoneyString(self.price);

                    var build_str = self.info.TotalColorCount == 1 ? "%{v0}\n%{v2}" : "%{v0}\n%{v1}\n%{v2}";
                    var msg = manager.translate("GTAuto", "Query_BuyRacingGear_OneColor").build(build_str);

                    var res = DialogUtil::openConfirmDialog(context, DialogUtil::YESNO, msg);
                    if (!res)
                        return EVENTRESULT_FILTER;
                }
                else
                {
                    var v0 = ROOT.getItemName(self.info.type, self.info.code);
                    var v1 = manager.translate("GTAuto", "Label_NonPurchaseColor").build(color_count);
                    var v2 = manager.translate("Unit", "CREDIT") + " " + pdiext::MMisc::GetMoneyString(self.price);
                    
                    var build_str = "%{v0}\n%{v1}\n%{v2}";
                    var msg = manager.translate("GTAuto", "Query_BuyRacingGear_Complete").build(build_str);
                    var res = DialogUtil::openConfirmDialog(context, DialogUtil::YESNO, msg);
                    if (!res)
                        return EVENTRESULT_FILTER;
                }

                if (!main::GAME_STATUS.user_profile.payCash(self.price))
                {
                    sound.play("disable");
                    ERROR(context, "CommonGTMode", "Message_EnoughMoney");
                    return EVENTRESULT_FILTER;
                }

                Grim2Util::PUTLOG::CREDIT::withdraw("racing_gear", price, self.info.type, self.info.code, color_index);
                
                CursorProject::StartMenuRoot::StartMenu.reflectCurrentStatus(context);

                select_color_w = SBox::ColorSelect::OptionMenu.getItem();

                GAME_STATUS.user_profile.item.racing_gear.addItem2(self.info.type, self.info.code, color_index);

                ROOT.need_save = true;

                var own_count = GAME_STATUS.user_profile.item.racing_gear.getItemColorCount(self.info.type, self.info.code);
                if (own_count == self.info.TotalColorCount)
                {
                    self.list_item.Complete.text = manager.translate("GTAuto", "Label_ColorCompleted");
                    self.list_item.OwnCount.text = "";
                }
                else
                {
                    self.list_item.OwnCount.text = manager.translate("GTAuto", "Label_OwnedColorCount").build(own_count);
                    self.list_item.Complete.text = "";
                }
                self.list_item.OwnFlag.visible = true;

                if (color_index != nil)
                {
                    self.SBox::OwnFlag.visible = true;
                    self.SBox::CompleteFlag.visible = false;
                }
                else
                {
                    self.SBox::CompleteFlag.visible = true;
                    self.SBox::OwnFlag.visible = false;
                }

                self.SBox::CrPrice.visible = false;
                self.SBox::Buy.insensitive = true;
            }

            return EVENTRESULT_FILTER;
        }

        method on_color_changed(context, color_index, color_count)
        {
            var sbox = self.SBox;
            if (color_index != nil)
            {
                self.setColorIndex(color_index);
                self.reloadPreviewDriver();
                self.price = info.Price1;
                sbox.CrPrice::Price.text = pdiext::MMisc::GetMoneyString(self.price);

                var has_color = GAME_STATUS.user_profile.item.racing_gear.hasItem2(self.info.type, self.info.code, color_index);
                sbox.CrPrice.visible = !has_color;
                sbox.CompleteFlag.visible = false;
                sbox.OwnFlag.visible = has_color;
                sbox.Buy.insensitive = has_color;
            }
            else
            {
                var is_color_completed = GAME_STATUS.user_profile.item.racing_gear.isItemColorCompleted(self.info.type, self.info.code);
                self.price = info.Price1 * color_count;

                sbox.CrPrice::Price.text = pdiext::MMisc::GetMoneyString(self.price);
                sbox.CrPrice.visible = !is_color_completed;
                sbox.CompleteFlag.visible = is_color_completed;
                sbox.OwnFlag.visible = false;
                sbox.Buy.insensitive = is_color_completed;
            }
        }


        module SBox::ColorSelect::OptionMenu
        {
            attribute info;
            attribute popup_opened;

            method appendColorSelectItem(context, color_index, color_num)
            {
                var w = hidden::ColorSelectItem.doCopy();
                w.Thumbnail.image_path = getItemThumbnailPath(self.info.type, self.info.code, color_index);
                w.label.text = manager.translate("GTAuto", "Label_ColorNumber").build(color_num);
                w.label_i.text = w.label.text;

                w.defineAttribute("color_index", color_index);
                w.defineAttribute("color_num", color_num);
                w.defineAttribute("color_count", 1);

                self.popup::vbox.appendChild(context, w);
            }

            method appendColorCompleteItem(context)
            {
                var w = hidden::ColorCompleteItem.doCopy();
                w.defineAttribute("color_index", nil);
                w.defineAttribute("color_num", nil);
                w.defineAttribute("color_count", nil);

                self.popup::vbox.appendChild(context, w);
            }

            method initialize(context, info)
            {
                self.info = info;
                self.popup_opened = false;
                self.popup::vbox.clearChildren(context);

                var has_item = GAME_STATUS.user_profile.item.racing_gear.hasItem2(info.type, info.code, info.ColorBegin);
                self.appendColorSelectItem(context, info.ColorBegin, 1, has_item);

                self.applyAppend(context);
                self.setIndex(context, 0);

                self.insensitive = info.TotalColorCount == 1;
            }

            method onFinalize(context)
            {
                self.popup::vbox.clearChildren(context);
                return EVENTRESULT_FILTER;
            }

            method onPopupOpen(context)
            {
                var color_indexes = GAME_STATUS.user_profile.item.racing_gear.getItemColorList(self.info.type, self.info.code);
                var non_purchase_count = self.info.TotalColorCount - color_indexes.size;

                if (!self.popup_opened)
                {
                    self.popup::vbox.clearChildren(context);
                    self.popup.minimum_height = 0.0;

                    for (var color_index = self.info.ColorBegin, color_num = 1; color_index <= self.info.ColorEnd; color_index++, color_num++)
                    {
                        var has_item = color_indexes.indexOf(color_index) > -1;
                        self.appendColorSelectItem(context, color_index, color_num, has_item);
                    }

                    self.appendColorCompleteItem(context);
                    self.applyAppend(context);
                    self.setIndex(context, 0);
                    self.popup_opened = true;
                }

                for (var w = self.popup::vbox.first; w != nil; w = w.next)
                {
                    if (w.color_index != nil)
                    {
                        var has_item = color_indexes.indexOf(w.color_index) > -1;
                        w.active2 = has_item;
                    }
                    else
                    {
                        w.label2.text = manager.translate("GTAuto", "Label_NonPurchaseColor").build(non_purchase_count);
                        w.color_count = non_purchase_count;
                        w.active2 = non_purchase_count == 0;
                    }
                }

                return EVENTRESULT_FILTER;
            }

            method onValueChanged(context)
            {
                var item = self.getItem(self.index);
                if (item.color_index != nil)
                {
                    ColorSelect::Thumbnail.image_path = item.Thumbnail.image_path;
                    ColorSelect::Label.text = item.label.text;
                    ColorSelect::Label2.text = "";
                }
                else
                {
                    ColorSelect::Thumbnail.image_path = "";
                    ColorSelect::Label.text = "";
                    ColorSelect::Label2.text = item.label.text;
                }

                GTAutoMenu::ListWindow::DriverView.on_color_changed(context, item.color_index, item.color_count);
                return EVENTRESULT_FILTER;
            }
        }
    }

    module hidden::CategoryItem
    {
        method onActivate(context, event)
        {
            if (self == GTAutoMenu.active_w)
                return EVENTRESULT_FILTER;

            sound.play("ok");

            GTAutoMenu::ListWindow::DriverView.endPreview();
            GTAutoMenu.setActive(context, event.widget);

            return EVENTRESULT_FILTER;
        }

        method onKeyPress(context, event)
        {
            if (event.keysym == CELL_PAD_CTRL_L3_RIGHT)
            {
                sound.play("cursor");

                GTAutoMenu::ListWindow::clip::ListBox.inFocus(context);
                return EVENTRESULT_FILTER;
            }

            return EVENTRESULT_CONTINUE;
        }
    }

    module hidden::ListItem
    {
        attribute info;

        method onInitialize(context)
        {
            self.Name.text = "";
            self.TotalColorCount.text = "";
            self.OwnCount.text = "";
            self.Complete.text = "";
            self.CrPrice::Price.text = "";
            self.Checkbox.active = false;
            self.OwnFlag.visible = false;
            self.New.visible = false;
            self.Opacity.reset();
        }

        method initialize(context, info)
        {
            self.info = info;
            self.Name.text = ROOT.getItemName(info.type, info.code);
            self.Thumbnail.image_path = ROOT.getItemThumbnailPath(info.type, info.code, info.ColorBegin);
            self.TotalColorCount.text = manager.translate("GTAuto", "Label_TotalColorCount").build(info.TotalColorCount);

            var own_count = GAME_STATUS.user_profile.item.racing_gear.getItemColorCount(info.type, info.code);
            if (own_count == info.TotalColorCount)
            {
                self.Complete.text = manager.translate("GTAuto", "Label_ColorCompleted");
            }
            else if (own_count > 0)
            {
                self.OwnCount.text = manager.translate("GTAuto", "Label_OwnedColorCount").build(own_count);
            }

            self.OwnFlag.visible = own_count > 0;
            self.CrPrice::Price.text = pdiext::MMisc::GetMoneyString(info.Price1);
            self.New.visible = KeyValueUtil::getFlag_NotNil("new_flag", "%s_%02d".format(info.type, info.code));
            self.Opacity.start();
        }

        method on_activate(context)
        {
            if (self.info == nil)
                return EVENTRESULT_FILTER;

            sound.play("ok");

            if (self.New.visible)
            {
                KeyValueUtil::set("new_flag", "%s_%02d".format(info.type, info.code), false);
                self.New.visible = false;
            }

            GTAutoMenu::ListWindow::DriverView.startPreview(context, self.info, self);

            return EVENTRESULT_FILTER;
        }

        method set_active(active)
        {
            if (self.info == nil)
                return EVENTRESULT_FILTER;

            self.Checkbox.active = active;
        }
    }
}