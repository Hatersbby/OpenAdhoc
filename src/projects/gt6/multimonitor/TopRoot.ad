








module ROOT
{
    static sRootTransition;
    static sVisible;
    static sError;
    static sWatcher;
    
    function onInitialize(context)
    {
        context.cursor_visible = false;

        sRootTransition = main::menu::MRootTransition(CursorProject::GTLogoTransition);
        sVisible = false;
        sError = 0;
        sWatcher = WatcherUtil::Create(context, onTick, 5);
    }

    function onFinalize(context)
    {
        WatcherUtil::Delete(sWatcher);
        sWatcher = nil;
        sVisible = nil;
        sRootTransition = nil;

        ORG.exitCourse();
        ORG.endMonitorClient();

        LaunchRaceUtil::clearResource();
    }

    function onCancel(context)
    {
        main::sound.play("cancel");
        SequenceUtil::endProject(context);
        return EVENTRESULT_FILTER;
    }

    function show(context, visible)
    {
        if (visible != sVisible)
        {
            sVisible = visible;
            if (visible)
            {
                context.pageInRootTransition();
            }
            else
            {
                context.syncInRootTransition();
                if (context.active_root_transition == nil)
                    context.root_transition = sRootTransition;

                context.pageOutRootTransition();
                context.syncOutRootTransition();
            }
        }
    }

    function onTick(context)
    {
        var error = ORG.getMonitorClientErrorCode();
        if (error != sError)
        {
            sError = error;

            switch (error)
            {
                case 1:
                    show(context, true);
                    DialogUtil::openConfirmDialog(context, DialogUtil::ERROR, context.translate(ROOT, "Network", "CANNOT_CONNECT_SERVER"));
                    SequenceUtil::endProject(context);
                    break;
            }
        }

        var running = ORG.isEnableRenderingRace();
        show(context, running);
    }
}