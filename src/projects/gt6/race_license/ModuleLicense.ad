













static is_exemplar_mode = false;
static first_exemplar = true;
static tmp_result = nil;

static sUpdatedFriendRank = nil;
static sPrevFriendRank = nil;

function onLoad(update_context)
{
    var context = update_context.getRenderContext();

    gSequenceCondition.quick_root = PROJECT::QuickRoot;
    gSequenceCondition.loadProject("ranking");
    
    LoadingUtil::requestAsync(context);

    main::cursor_project.syncBridge();
    gSequenceCondition.quick_root.open(context);
}

function onUnload(update_context)
{
    ORG.setRaceSubMode(nil);
    RaceOperator.checkOut();
    ORG.exitCourse();

    destroyRaceSync();
    clearResource();
    RaceOperator.clear();
}

function onRaceRootInitialize(context)
{
    var slot_id = RaceOperator.getPlayerSlot();
    var window_id = 0;
    var port = 0;

    RaceProject::setTarget(slot_id, window_id);
    ORG.setCameraWindowControllerPort(window_id, port);

    pdistd::MGamePort::SetWheelAssignMode(pdistd::WheelAssignMode::SDK);
}

function onStartRaceRequest(context, starttime)
{
    if (is_exemplar_mode && first_exemplar)
    {
        var lid = GAME_STATUS.user_profile.context.license_id;
        if (lid >= 0)
        {
            var lang = main::pdistd::MLocale::getLanguage();
            var path = "/sound_gt/guide/gt6/license/%s/%s_l%03d".format(lang, lang, lid);
            SoundUtil::PlayStreamWithDelay(context, path, SoundUtil::GetNarrationVolume(), 2.0);
        }

        first_exemplar = false;
    }   

    tmp_result = nil;
}

function onBeforeSession(context) 
{

}

function onQuitRace(context)
{
    first_exemplar = true;
    SoundUtil::StopStream(context);
}

method onFinishRace(context, condition_satisfied, buggy_result)
{
    if (condition_satisfied && !gSequenceCondition.isDemo())
    {
        if (tmp_result == nil)
            return;

        var result = tmp_result;
        tmp_result = nil;

        ORG.pauseHandleAvailable = false;
        ORG.pauseAvailable = false;

        var finish_bgm_table = [
            gtengine::FinishResult::GOLD : "license_gold",
            gtengine::FinishResult::SILVER : "license_silver",
            gtengine::FinishResult::BRONZE : "license_bronze",
        ];

        var group = finish_bgm_table.find(result);
        if (group == nil)
            group = "finish_other";
        else
            group = group[1];

        gRaceBGM.playJingle(group, gSequenceCondition.isDemo());

        var show_result = false;
        if (gSequenceCondition.is_buffer_replay_mode)
            show_result = false;
        else
        {
            var target = main::RaceOperator.representative_slot_id;
            gSequenceCondition.finish_result = result;
            show_result = true;
        }

        if (show_result)
        {
            OnboardMeterRoot.visible = false;
            RaceRoot.visible = false;

            ORG.noDispBackMirror(true);

            var event_id = gSequenceCondition.gp.event.event_id;
            var laptime = ORG.getGoalTime(RaceOperator.representative_slot_id);

            var res = PROJECT::KinGinDouRoot.open(context, event_id, result, laptime, true);
            if (res)
                RaceRoot.restart(context);
            else
                RaceRoot.quit(context);
        }
    }
}

method onSectionTime(context, window, sectime, difftime, difflaps)
{

}

function onComplete(context, slot_id, result, is_forced, is_target)
{
    if (!is_forced && !gSequenceCondition.isDemo() && is_target)
        tmp_result = result;
}

function onDisqualify(context, slot_id, result, is_forced, is_target, goal_time, detail_type, pos_x, pos_z)
{
    if (!is_forced && !gSequenceCondition.isDemo() && is_target)
    {
        tmp_result = nil;
        ORG.pauseHandleAvailable = false;
        ORG.pauseAvailable = false;
        OnboardMeterRoot.visible = false;
        RaceRoot.visible = false;
        ORG.noDispBackMirror(true);

        gRaceBGM.playJingle("license_failed", gSequenceCondition.isDemo());

        var res = PROJECT::DisqualifiedRoot.open(context, detail_type);
        if (res)
            RaceRoot.restart(context);
        else
            RaceRoot.quit(context);
    }
}

function onExit(context)
{
    if (!RaceMenuUtil::activated())
    {
        main::sound.play("disable");
        return;
    }

    main::sound.play("ok");

    OnboardMeterRoot::RaceDisplayFace.toStop();
    RaceMenuUtil::closeAction(context);
    RaceRoot.quit(context);
}