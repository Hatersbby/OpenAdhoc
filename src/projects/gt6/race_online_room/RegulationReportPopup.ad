













module ROOT
{
    hidden.visible = false;

    static sModalPage;
    static sValidated;
    static sOriginal;

    method open(context, validated, original)
    {
        sValidated = validated;
        sOriginal = original;
        sModalPage = SequenceUtil::ModalPage(context, ROOT);
        sModalPage.open();
        sModalPage = nil;
        sOriginal = nil;
        sValidated = nil;
    }

    method close(context)
    {
        if (sModalPage != nil)
            sModalPage.close();
    }

    method abort(context)
    {
        close(context);
    }

    method onInitialize(context)
    {
        var space = DialogFrame::Pane::Body::Message::ScrolledWindow::clip::space;
        space.initialize(context);
    }

    method onFinalize(context)
    {
        var space = DialogFrame::Pane::Body::Message::ScrolledWindow::clip::space;
        space.finalize(context);
    }

    method onCancel(context)
    {
        main::sound.play("cancel");
        close(context);
        return EVENTRESULT_FILTER;
    }

    method onKeyPress(context, event)
    {
        var status = 0;
        if (event.keysym == CELL_PAD_CTRL_L3_UP)
        {
            DialogFrame::Pane::Body::Message::ScrolledWindow::clip.manualTargetIncY(96.0);
            status = 2; 
        }
        else if (event.keysym == CELL_PAD_CTRL_L3_DOWN)
        {
            DialogFrame::Pane::Body::Message::ScrolledWindow::clip.manualTargetIncY(-96.0);
            status = 2; 
        }

        return status;
    }

    module DialogFrame::Pane::Body::Message::ScrolledWindow::clip::space
    {
        method addItem(context, label, validated, original, reportType = Regulation::ReportType::Normal)
        {
            switch (reportType)
            {
                case Regulation::ReportType::Normal:
                case Regulation::ReportType::CarSpec:
                    self.addCarSpecItem(context, label, validated, original);
                    break;

                case Regulation::ReportType::CarModel:
                    self.addCarModelItem(context, label, validated, original);
                    break;

                case Regulation::ReportType::DrivingOption:
                    self.addDrivingOptionItem(context, label, validated, original);
                    break;
            }
        }

        method addCarSpecItem(context, label, validated, original)
        {
            var item = hidden::ItemRegSpec.doCopy();
            item.TextFace.text = label;
            item.TextFace0.text = validated;
            self.RegSpec.appendChild(context, item);
            self.RegSpec::Header.visible = true;
        }

        method addCarModelItem(context, label, validated, original)
        {
            var item = hidden::ItemRegCarType.doCopy();
            item.TextFace.text = label;
            item.TextFace0.text = validated;
            self.RegCarType.appendChild(context, item);
            self.RegCarType::Header.visible = true;
        }

        method addDrivingOptionItem(context, label, validated, original)
        {
            var item = hidden::ItemRegDrivingOption.doCopy();
            item.TextFace0.text = label;
            self.RegDrivingOption.appendChild(context, item);
            self.RegDrivingOption::Header.visible = true;
        }

        function addCarNameList(carCode, list)
        {
            var found = false;
            var carname = gtengine::MSpecDB::getCarName(carCode);
            foreach (var c in list)
            {
                if (c == carname)
                    found = true;
            }

            if (!found)
                list.push(carname);
        }

        method initialize(context)
        {
            var list = [
                self.RegSpec,
                self.RegCarType,
                self.RegDrivingOption
            ];

            foreach (var composite in list)
                composite.Header.visible = false;

            var validated = sValidated;
            var original = sOriginal;
            Regulation::createViolatedMessage(context, validated, original, addItem);
        }

        method finalize(context)
        {
            var list = [
                self.RegSpec,
                self.RegCarType,
                self.RegDrivingOption
            ];

            foreach (var composite in list)
            {
                var childList = composite.getChildList();
                foreach (var child in childList)
                {
                    if (child.name != "Header")
                        composite.removeChild(context, child);
                    else
                        child.visible = false;
                }
            }
        }
    }

    module DialogFrame::Pane::Body::Buttons::OK
    {
        method onActivate(context)
        {
            main::sound.play("ok");
            ROOT.close(context);
            return EVENTRESULT_FILTER;
        }
    }
}