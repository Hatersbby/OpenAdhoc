













module ROOT
{
    hidden.visible = false;

    static toClose = false;

    method open(context, finish_result)
    {

    }

    method close(context)
    {
        ColorFace.ScalarInterpolator.restart();
        ColorFace.visible = true;
        var actor = ColorFace.ScalarInterpolator;

        actor.forward();
        actor.restart();

        pdiext::ProcessUpdateIteration(actor.total_time * 1000 * 1000);

        endSessionSync();
        StageData::endRaceStage();
        StageData::clearRaceStageData();

        doStartRace(context);

        ORG.enableSoundingRace();
    }

    method endRaceStageBeforeRace(context)
    {
        context.pushEvent(menu::MScriptEvent(context, self, "_close"));
    }

    method _close(context)
    {
        close(context);
    }

    function initialize_session(context)
    {
        var rp = gtengine::MRaceParameter();
        rp.deepCopy(ORG.getBackRaceParameter());
        rp.race_type = gtengine::RaceType::DEMO;
        rp.start_type = gSequenceCondition.gp.event.race_parameter.start_type;

        var stage = gSequenceCondition.gp.event.stage_data.before_start[0];
        if (stage.vcoord == gtengine::StageCoordType::GRID || stage.vcoord == gtengine::StageCoordType::GRID_ALL)
            rp.start_type = gtengine::StartType::GRID;

        if (stage.vcoord == gtengine::StageCoordType::PITSTOP || stage.vcoord == gtengine::StageCoordType::PITSTOP_ALL)
            rp.start_type = gtengine::StartType::PIT;

        startSessionSync(rp, false, gtengine::StartSessionCameraType::NORMAL, false);
        SoundUtil::BGMPlayGroup(SoundUtil::SCENE_RACE, "event_0", true, 0.0, 3.0);

        gSequenceCondition.no_bgm_start = true;

        ORG.disableSoundingRace();

        ORG.pauseRace = false;
        ORG.pauseAvailable = false;
    }

    method onInitialize(context)
    {
        toClose = false;
        ColorFace.visible = false;

        ORG.noDispBackMirror(true);

        if (!context.getUpdateContext().zoom_for_SD)
        {
            pdiext::SetFrameModeLetterBox(true);
            context.getUpdateContext().zoom_for_SD = true;
        }

        initialize_session(context);
        StageData::startRaceStage(context, true, true);
        context.pushEvent(main::menu::MScriptEvent(context, self, "waitEndPhase"));
    }

    method waitEndPhase(context)
    {
        context.disableInput();
        Thread::Sleep(3);
        context.enableInput();

        while (!toClose && ORG.getRaceStagePhase(StageData::sStageDataCodeID[0]) != gtengine::StagePhaseType::END)
            yield;

        ROOT.close(context);
    }

    method onFinalize(context) { }

    method onCancel(context) 
    { 
        toClose = true;
        return EVENTRESULT_FILTER;
    }

    method onActivate(context)
    {
        toClose = true;
        return EVENTRESULT_FILTER;
    }

}