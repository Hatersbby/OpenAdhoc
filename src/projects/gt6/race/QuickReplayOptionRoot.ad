













module ROOT
{
    attribute aborted;
    attribute popup;
    attribute course_map_face_list;
    attribute is_bspec;

    method open(context, course_map_face_list, is_bspec)
    {
        self.course_map_face_list = course_map_face_list;
        self.is_bspec = is_bspec;
        self.aborted = false;

        SettingFrame.appear();

        self.popup = SequenceUtil::ModalPage(context, ROOT);
        self.popup.open();
        
        var res = self.aborted;
        self.aborted = nil;
        return !res;
    }

    method close(context)
    {
        if (self.popup != nil)
        {
            self.popup.close();
            self.popup = nil;
        }
    }

    method abort(context)
    {
        close(context);
        self.aborted = true;
    }

    method reflect(context)
    {
        var option = main::GAME_STATUS.user_profile.option;
        SettingFrame::Pane::ScrolledBody::clip::space::RacerList::OptionMenu.setIndex(context, option.racer_list_car ? 1 : 0);
        SettingFrame::Pane::ScrolledBody::clip::space::MapViewMode::OptionMenu.setIndex(context, option.race_map_view_mode);
        SettingFrame::Pane::ScrolledBody::clip::space::ButtonNavigation::OptionMenu.setIndex(context, option.button_navigation_disp_mode);
        SettingFrame::Pane::ScrolledBody::clip::space::ReplayInfo::OptionMenu.setIndex(context, option.replayinfo_disp_mode ? 0 : 1);
        SettingFrame::Pane::ScrolledBody::clip::space::DriverName::OptionMenu.setIndex(context, option.driver_name_disp_mode ? 0 : 1);

        if (!self.is_bspec)
        {
            SettingFrame::Pane::ScrolledBody::clip::space::KeyboardSwitch::OptionMenu.setIndex(context, option.lounge_keyboard_switcher ? 1 : 0);

            var off_text = context.translate(ROOT, "Component", "Off");
            SettingFrame::Pane::ScrolledBody::clip::space::BGMVolume::slider.zero_text = off_text;
            SettingFrame::Pane::ScrolledBody::clip::space::BGMVolume::slider.value = option.replay_bgm_volume;
            SettingFrame::Pane::ScrolledBody::clip::space::BGMVolume::slider.decide_callback = onVolumeDecided;
            SettingFrame::Pane::ScrolledBody::clip::space::BGMVolume::slider.setup(context);
            onVolumeDecided(context, SettingFrame::Pane::ScrolledBody::clip::space::BGMVolume::slider.value, SettingFrame::Pane::ScrolledBody::clip::space::BGMVolume::slider);

            SettingFrame::Pane::ScrolledBody::clip::space::SEVolume::slider.zero_text = off_text;
            SettingFrame::Pane::ScrolledBody::clip::space::SEVolume::slider.value = option.replay_se_volume;
            SettingFrame::Pane::ScrolledBody::clip::space::SEVolume::slider.decide_callback = onVolumeDecided;
            SettingFrame::Pane::ScrolledBody::clip::space::SEVolume::slider.setup(context);
            onVolumeDecided(context, SettingFrame::Pane::ScrolledBody::clip::space::SEVolume::slider.value, SettingFrame::Pane::ScrolledBody::clip::space::SEVolume::slider);
        }

        SettingFrame::Pane::ScrolledBody::clip::space::KeyboardSwitch.visible = !is_bspec;
        SettingFrame::Pane::ScrolledBody::clip::space::BGMVolume.visible = !is_bspec;
        SettingFrame::Pane::ScrolledBody::clip::space::SEVolume.visible = !is_bspec;
    }

    method apply()
    {
        var option = main::GAME_STATUS.user_profile.option;
        option.racer_list_car = 0 != SettingFrame::Pane::ScrolledBody::clip::space::RacerList::OptionMenu.index;
        option.race_map_view_mode = SettingFrame::Pane::ScrolledBody::clip::space::MapViewMode::OptionMenu.index;
        option.button_navigation_disp_mode = SettingFrame::Pane::ScrolledBody::clip::space::ButtonNavigation::OptionMenu.index != 0;
        option.replayinfo_disp_mode = 0 == SettingFrame::Pane::ScrolledBody::clip::space::ReplayInfo::OptionMenu.index;
        option.driver_name_disp_mode = 0 == SettingFrame::Pane::ScrolledBody::clip::space::DriverName::OptionMenu.index;

        if (!self.is_bspec)
        {
            option.lounge_keyboard_switcher = 0 != SettingFrame::Pane::ScrolledBody::clip::space::KeyboardSwitch::OptionMenu.index;
            option.replay_bgm_volume = SettingFrame::Pane::ScrolledBody::clip::space::BGMVolume::slider.value;
            option.replay_se_volume = SettingFrame::Pane::ScrolledBody::clip::space::SEVolume::slider.value;

            SoundUtil::SetReplaySoundVolumeOption(option.replay_bgm_volume, option.replay_se_volume);
            SoundUtil::ApplySoundVolumeOption();
            SoundUtil::SetupSound(SoundUtil::SCENE_REPLAY, true);
            SoundUtil::UpdateBGMVolume();
        }
    }

    method onLoad(context)
    {
        var is4x3 = ORG.getGameResolution()[2];
        SettingFrame::ToolTip.minimum_width = is4x3 ? 1440 : 1920;
        self.slider_red_color = menu::MColorObject(1.0, 0.2, 0.2);
        self.slider_value_color = SettingFrame::Pane::ScrolledBody::clip::space::BGMVolume::slider::label.color;
    }

    method onInitialize(context)
    {
        reflect(context);

        var focus_w = SettingFrame::Pane::ScrolledBody::clip::space::RacerList::OptionMenu;
        ROOT.setFocus(focus_w);
        SettingFrame::Pane::ScrolledBody::clip::space.parent.warp(focus_w);
    }

    method onCancel(context)
    {
        main::sound.play("cancel");
        apply();
        close(context);
        return EVENTRESULT_FILTER;
    }

    attribute slider_value_color;
    attribute slider_red_color;

    function onVolumeDecided(context, value, slider)
    {
        slider.label.color = value > 100 ? ROOT.slider_red_color : ROOT.slider_value_color;
    }

    module SettingFrame::Pane::ScrolledBody::clip::space::MapViewMode::OptionMenu
    {
        method onValueChanged(context)
        {
            var list = ROOT.course_map_face_list;
            foreach (var course_map_face in list)
            {
                course_map_face.mapmode = self.index;
            }

            __prototype__::onValueChanged(context);
        }
    }

    module SettingFrame::Pane::ScrolledBody::clip::space::BGMVolume::slider
    {
        method onValueChanged(context)
        {
            SoundUtil::PreviewBGMVolume(self.value, GAME_STATUS.user_profile.option.user_bgm_volume);
            __prototype__::onValueChanged(context);
        }
    }
}