













module ROOT
{
    hidden.visible = false;

    static sData;

    attribute sModal_page;

    method open(context, data)
    {
        sData = data;

        self.FadeActor.out = true;
        self.FadeActor.warp();

        self.setFocus(ROOT.Pane::Button::OK::OK);

        self.sModal_page = SequenceUtil::ModalPage(context, ROOT);
        self.sModal_page.open();

        return sData;
    }

    method close(context)
    {
        self.setFocus(nil);

        self.FadeActor.out = true;
        context.sync(0.25);

        if (self.sModal_page != nil)
        {
            self.sModal_page.close();
            self.sModal_page = nil;
        }
    } 

    method abort(context)
    {
        ROOT.close(context);
    }

    method onInitialize(context)
    {
        ROOT.navigate_insensitive = true;

        Pane.minimum_height = 0;

        Pane::ScrolledWindow::ScrollClip.initialize(context);
    }

    method onFinalize(context)
    {

    }

    method onCancel(context)
    {
        main::sound.play("cancel");

        sData = nil;
        close(context);

        return EVENTRESULT_FILTER;
    }

    method apply(context)
    {
        Pane::ScrolledWindow::ScrollClip.apply(context);
    }

    module Pane::Button::OK::OK
    {
        method onActivate(context)
        {
            main::sound.play("ok");

            ROOT.apply(context);
            ROOT.close(context);

            return EVENTRESULT_FILTER;
        }
    }

    module Pane::ScrolledWindow::ScrollClip
    {
        method initialize(context)
        {
            space::DisplayOption::DispSpeed::CheckSpeed.active = sData.disp_speed;
            space::DisplayOption::DispShiftPos::CheckShiftPos.active = sData.disp_shift_pos;
            space::DisplayOption::DispEngineRPM::CheckEngineRPM.active = sData.disp_engine_rpm;
            space::DisplayOption::DispSideG::CheckSideG.active = sData.disp_side_g;
            space::DisplayOption::DispFrontG::CheckFrontG.active = sData.disp_front_g;
            space::DisplayOption2::DispThrottle::CheckThrottle.active = sData.disp_throttle;
            space::DisplayOption2::DispBrake::CheckBrake.active = sData.disp_brake;

            if (sData.disp_shift_pos || sData.disp_engine_rpm)
                space::DisplayDataViewMode::OptionMenu.setIndex(context, 0);
            else if (sData.disp_side_g || sData.disp_front_g)
                space::DisplayDataViewMode::OptionMenu.setIndex(context, 1);
            else
            {
                var item = space::DisplayDataViewMode::OptionMenu;
                space::DisplayDataViewMode::OptionMenu.setIndex(context, item.index);
            }

            space.XAxisViewMode::OptionMenu.setIndex(context, sData.xaxis_mode);
            space.ReferenceDataMode::OptionMenu.setIndex(context, sData.disp_reference);
        }

        method finalize(context)
        {

        }

        method apply(context)
        {
            sData.disp_speed = space::DisplayOption::DispSpeed::CheckSpeed.active;
            sData.disp_shift_pos = space::DisplayOption::DispShiftPos::CheckShiftPos.active;
            sData.disp_engine_rpm = space::DisplayOption::DispEngineRPM::CheckEngineRPM.active;
            sData.disp_side_g = space::DisplayOption::DispSideG::CheckSideG.active;
            sData.disp_front_g = space::DisplayOption::DispFrontG::CheckFrontG.active;
            sData.disp_throttle = space::DisplayOption2::DispThrottle::CheckThrottle.active;
            sData.disp_brake = space::DisplayOption2::DispBrake::CheckBrake.active;
            
            var item = space::XAxisViewMode::OptionMenu;
            sData.xaxis_mode = item.index;

            item = space::ReferenceDataMode::OptionMenu;
            sData.disp_reference = item.index;
        }

        module space::DisplayDataViewMode::OptionMenu
        {
            function onValueChanged(context)
            {
                var item = space::DisplayDataViewMode::OptionMenu;
                space::DisplayOption::DispShiftPos.visible = !item.index;
                space::DisplayOption::DispEngineRPM.visible = !item.index;
                space::DisplayOption::DispSideG.visible = item.index;
                space::DisplayOption::DispFrontG.visible = item.index;
                
                space::DisplayOption::DispShiftPos::CheckShiftPos.active = !item.index;
                space::DisplayOption::DispEngineRPM::CheckEngineRPM.active = !item.index;
                space::DisplayOption::DispSideG::CheckSideG.active = item.index;
                space::DisplayOption::DispFrontG::CheckFrontG.active = item.index;

                item.pulldownValueChanged(context);
            }
        }

        module space::DisplayOption::DispSpeed::CheckSpeed
        {
            function onActivate(context)
            {
                var check = CheckSpeed.active;
                CheckSpeed.active = !check;

                main::sound.play("cursor");
                return EVENTRESULT_FILTER;
            }
        }

        module space::DisplayOption::DispShiftPos::CheckShiftPos
        {
            function onActivate(context)
            {
                var check = CheckShiftPos.active;
                CheckShiftPos.active = !check;

                main::sound.play("cursor");
                return EVENTRESULT_FILTER;
            }
        }

        module space::DisplayOption::DispEngineRPM::CheckEngineRPM
        {
            function onActivate(context)
            {
                var check = CheckEngineRPM.active;
                CheckEngineRPM.active = !check;

                main::sound.play("cursor");
                return EVENTRESULT_FILTER;
            }
        }

        module space::DisplayOption::DispSideG::CheckSideG
        {
            function onActivate(context)
            {
                var check = CheckSideG.active;
                CheckSideG.active = !check;

                main::sound.play("cursor");
                return EVENTRESULT_FILTER;
            }
        }

        module space::DisplayOption::DispFrontG::CheckFrontG
        {
            function onActivate(context)
            {
                var check = CheckFrontG.active;
                CheckFrontG.active = !check;

                main::sound.play("cursor");
                return EVENTRESULT_FILTER;
            }
        }

        module space::DisplayOption2::DispThrottle::CheckThrottle
        {
            function onActivate(context)
            {
                var check = CheckThrottle.active;
                CheckThrottle.active = !check;

                main::sound.play("cursor");
                return EVENTRESULT_FILTER;
            }
        }

        module space::DisplayOption2::DispBrake::CheckBrake
        {
            function onActivate(context)
            {
                var check = CheckBrake.active;
                CheckBrake.active = !check;

                main::sound.play("cursor");
                return EVENTRESULT_FILTER;
            }
        }

        module space::XAxisViewMode::OptionMenu
        {
            function onValueChanged(context)
            {
                var item = space::XAxisViewMode::OptionMenu;
                item.pulldownValueChanged(context);
            }
        }

        module space::ReferenceDataMode::OptionMenu
        {
            function onValueChanged(context)
            {
                var item = space::ReferenceDataMode::OptionMenu;
                item.pulldownValueChanged(context);
            }
        }
    }
}