













module ROOT
{
    method open(context)
    {
        SettingFrame.appear();
        SequenceUtil::pushPage(context, self);
    }

    method close(context)
    {
        var delay_time = SettingFrame.hide();
        SequenceUtil::popPage(context, self, delay_time);
    }

    method reflect(context)
    {
        var option = main::GAME_STATUS.user_profile.option;

        SettingFrame::Pane::ScrolledBody::clip::space::DemoControl::vbox::Carshow.active = option.visible_demo_carshow;
        SettingFrame::Pane::ScrolledBody::clip::space::DemoControl::vbox::Race.active = option.visible_demo_race;
        SettingFrame::Pane::ScrolledBody::clip::space::DemoControl::vbox::Museum.active = option.visible_demo_museum;
        SettingFrame::Pane::ScrolledBody::clip::space::DemoControl::vbox::Replay.active = option.visible_demo_replay;
        SettingFrame::Pane::ScrolledBody::clip::space::DemoControl::vbox::Opening.active = option.visible_demo_opening;
        
        SettingFrame::Pane::ScrolledBody::clip::space::TimeLimit::slider.index = option.autodemo_time_limit;
        SettingFrame::Pane::ScrolledBody::clip::space::StartInterval::slider.index = option.autodemo_start_interval;
        SettingFrame::Pane::ScrolledBody::clip::space::RepeatTime::slider.index = option.demo_returning_to_menu_interval;
    }

    method apply(context)
    {
        var option = main::GAME_STATUS.user_profile.option;

        option.visible_demo_carshow = SettingFrame::Pane::ScrolledBody::clip::space::DemoControl::vbox::Carshow.active;
        option.visible_demo_race = SettingFrame::Pane::ScrolledBody::clip::space::DemoControl::vbox::Race.active;
        option.visible_demo_museum = SettingFrame::Pane::ScrolledBody::clip::space::DemoControl::vbox::Museum.active;
        option.visible_demo_replay = SettingFrame::Pane::ScrolledBody::clip::space::DemoControl::vbox::Replay.active;
        option.visible_demo_opening = SettingFrame::Pane::ScrolledBody::clip::space::DemoControl::vbox::Opening.active;

        option.autodemo_time_limit = SettingFrame::Pane::ScrolledBody::clip::space::TimeLimit::slider.index;
        option.autodemo_start_interval = SettingFrame::Pane::ScrolledBody::clip::space::StartInterval::slider.index;
        option.demo_returning_to_menu_interval = SettingFrame::Pane::ScrolledBody::clip::space::RepeatTime::slider.index;
        option.apply();
    }

    method onInitialize(context)
    {
        if (gDirectApplyMode)
            SettingFrame::Pane::Foot.visible = false;

        SettingFrame::Pane::ScrolledBody::clip::space::TimeLimit::slider.zero_text = context.translate(ROOT, "MAX");
        SettingFrame::Pane::ScrolledBody::clip::space::TimeLimit::slider.setup(context);

        SettingFrame::Pane::ScrolledBody::clip::space::StartInterval::slider.zero_text = manager.translate("Component", "Label_OFF");
        SettingFrame::Pane::ScrolledBody::clip::space::StartInterval::slider.setup(context);

        SettingFrame::Pane::ScrolledBody::clip::space::RepeatTime::slider.zero_text = context.translate(ROOT, "Infinite");
        SettingFrame::Pane::ScrolledBody::clip::space::RepeatTime::slider.setup(context);

        reflect(context);
        SettingFrame.adjust_scrolled_body();
        ROOT.setFocus(SettingFrame::Pane::ScrolledBody::clip::space::StartInterval::slider);
    }

    method onCancel(context, event, item)
    {
        main::sound.play("cancel");

        if (gDirectApplyMode)
        {
            ROOT.apply();
            ROOT.close(context);
        }
        else
            ROOT.setFocus(SettingFrame::Pane::Foot::Cancel);

        return EVENTRESULT_FILTER;
    }

    module SettingFrame::Pane::Foot::OK
    {
        method onActivate(context)
        {
            main::sound.play("ok");
            ROOT.apply();
            ROOT.close(context);
            return EVENTRESULT_FILTER;
        }
    }

    module SettingFrame::Pane::Foot::Cancel
    {
        method onActivate(context)
        {
            main::sound.play("ok");
            ROOT.close(context);
            return EVENTRESULT_FILTER;
        }

        method onCancel(context)
        {
            main::sound.play("cancel");
            ROOT.close(context);
            return EVENTRESULT_FILTER;
        }
    }
}