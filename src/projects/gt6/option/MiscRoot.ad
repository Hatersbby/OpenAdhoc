













module MiscRoot
{
    static sOpenMode;

    method open(context, open_mode)
    {
        if (open_mode != nil) 
            sOpenMode = open_mode;

        SettingFrame.appear();
        SequenceUtil::pushPage(context, self);
    }

    method close(context)
    {
        var delay_time = SettingFrame.hide();
        SequenceUtil::popPage(context, self, delay_time);
    }

    method reflect(context)
    {
        var option = main::GAME_STATUS.user_profile.option;
        if (SettingFrame::Pane::ScrolledBody::clip::space::OpeningMovie.is_enable)
        {
            SettingFrame::Pane::ScrolledBody::clip::space::OpeningMovie::OptionMenu.setIndex(context, 1 - option.opening_after_autoload);
        }
    }

    method apply(context)
    {
        var option = main::GAME_STATUS.user_profile.option;
        if (SettingFrame::Pane::ScrolledBody::clip::space::OpeningMovie.is_enable)
        {
            option.opening_after_autoload = 1 - SettingFrame::Pane::ScrolledBody::clip::space::OpeningMovie::OptionMenu.index;
        }

        option.apply();
    }

    method onInitialize(context)
    {
        if (gDirectApplyMode)
            SettingFrame::Pane::Foot.visible = false;
        
        PROJECT.SetWidgetEnable(false, SettingFrame::Pane::ScrolledBody::clip::space.getChildList());

        var focus_w;
        switch (sOpenMode)
        {
            case "Opening":
                SettingFrame::Pane::Head::label.text = context.translate(OptionRoot, "Opening");
                PROJECT.SetWidgetEnable(true, [SettingFrame::Pane::ScrolledBody::clip::space::OpeningMovie]);
                focus_w = SettingFrame::Pane::ScrolledBody::clip::space::OpeningMovie::OptionMenu;
                break;

            case "Data_salvage":
                SettingFrame::Pane::Head::label.text = context.translate(OptionRoot, "Data_salvage");
                PROJECT.SetWidgetEnable(true, [SettingFrame::Pane::ScrolledBody::clip::space::SalvageFiles]);
                focus_w = SettingFrame::Pane::ScrolledBody::clip::space::SalvageFiles::vbox::ExecSalvage;
                break;  
        }

        reflect(context);
        SettingFrame.adjust_scrolled_body();
        MiscRoot.setFocus(focus_w);
        SettingFrame::Pane::ScrolledBody::clip::space.parent.warp(focus_w);
    }

    method onCancel(context, event, item)
    {
        main::sound.play("cancel");
        if (gDirectApplyMode)
        {
            MiscRoot.apply();
            MiscRoot.close(context);
        }
        else
            MiscRoot.setFocus(SettingFrame::Pane::Foot::Cancel);

        return EVENTRESULT_FILTER;
    }

    module SettingFrame::Pane::ScrolledBody::clip::space::SalvageFiles::vbox::ExecSalvage
    {
        module mdl { }

        function salvage(context, arg, dialog)
        {
            mdl.load("/scripts/gt6/util/SalvageUtil");

            var total_num = 0;
            var replay_num = mdl::SalvageUtil::salvage_replay();
            var photo_num = mdl::SalvageUtil::salvage_photo();
            mdl.clearStatic();

            total_num += replay_num + photo_num;

            var message;
            if (total_num > 0)
            {
                message = manager.translate(MiscRoot, "SALVAGE_FILES_DONE") + "\n" +
                              manager.translate(MiscRoot, "SALVAGE_REPLAY_FILES").build(replay_num) + "\n" +
                              manager.translate(MiscRoot, "SALVAGE_PHOTO_FILES").build(photo_num);
            }
            else
            {
                message = manager.translate(MiscRoot, "NO_SALVAGE_FILES");
            }

            dialog.setSuccessMessage(message);
            return true;
        }

        function onActivate(context)
        {
            main::sound.play("ok");
            var message_begin = manager.translate(MiscRoot, "DO_YOU_SALVAGE_FILES");
            var message_waiting = manager.translate(MiscRoot, "SALVAGING_FILES");

            var res = DialogUtil::openConfirmExecDialog(context, message_begin, message_waiting, nil, nil, salvage, nil);
            return EVENTRESULT_FILTER;
        }
    }

    module SettingFrame::Pane::Foot::OK
    {
        method onActivate(context)
        {
            main::sound.play("ok");
            MiscRoot.apply();
            MiscRoot.close(context);
            return EVENTRESULT_FILTER;
        }
    }

    module SettingFrame::Pane::Foot::Cancel
    {
        method onActivate(context)
        {
            main::sound.play("ok");
            MiscRoot.close(context);
            return EVENTRESULT_FILTER;
        }

        method onCancel(context)
        {
            main::sound.play("cancel");
            MiscRoot.close(context);
            return EVENTRESULT_FILTER;
        }
    }

}