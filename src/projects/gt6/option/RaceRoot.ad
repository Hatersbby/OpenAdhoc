













module ROOT
{
    method open(context)
    {
        SettingFrame.appear();
        SequenceUtil::pushPage(context, self);
    }

    method close(context)
    {
        var delay_time = SettingFrame.hide();
        SequenceUtil::popPage(context, self, delay_time);
    }

    method reflect(context)
    {
        var option = main::GAME_STATUS.user_profile.option;

        SettingFrame::Pane::ScrolledBody::clip::space::Laps::slider.index = option.arcade_laps;
        SettingFrame::Pane::ScrolledBody::clip::space::TimeLimit::slider.index = option.arcade_time_limit / 10;
        SettingFrame::Pane::ScrolledBody::clip::space::AIRoughness::slider.index = option.arcade_ai_roughness;
        SettingFrame::Pane::ScrolledBody::clip::space::EnableDamage::OptionMenu.setIndex(context, 1 - option.arcade_enable_damage);
        SettingFrame::Pane::ScrolledBody::clip::space::LeaveDetect::slider.index = option.timeout_count_to_topmenu / 10;
    }

    method apply(context)
    {
        var option = main::GAME_STATUS.user_profile.option;

        option.arcade_laps = SettingFrame::Pane::ScrolledBody::clip::space::Laps::slider.index;
        option.arcade_time_limit = SettingFrame::Pane::ScrolledBody::clip::space::TimeLimit::slider.index * 10;
        option.arcade_ai_roughness = SettingFrame::Pane::ScrolledBody::clip::space::AIRoughness::slider.index;
        option.arcade_enable_damage = 1 - SettingFrame::Pane::ScrolledBody::clip::space::EnableDamage::OptionMenu.index;
        option.timeout_count_to_topmenu = SettingFrame::Pane::ScrolledBody::clip::space::LeaveDetect::slider.index * 10;
    }

    method onInitialize(context)
    {
        if (gDirectApplyMode)
            SettingFrame::Pane::Foot.visible = false;
        
        SettingFrame::Pane::ScrolledBody::clip::space::Laps::slider.zero_text = context.translate(RaceRoot, "Infinite_laps");
        SettingFrame::Pane::ScrolledBody::clip::space::Laps::slider.setup(context);

        SettingFrame::Pane::ScrolledBody::clip::space::TimeLimit::slider.zero_text = manager.translate("Component", "Label_OFF");
        SettingFrame::Pane::ScrolledBody::clip::space::TimeLimit::slider.setup(context);

        SettingFrame::Pane::ScrolledBody::clip::space::AIRoughness::slider.setup(context);

        SettingFrame::Pane::ScrolledBody::clip::space::LeaveDetect::slider.zero_text = manager.translate("Component", "Label_OFF");
        SettingFrame::Pane::ScrolledBody::clip::space::LeaveDetect::slider.setup(context);

        reflect(context);
        SettingFrame.adjust_scrolled_body();
        ROOT.setFocus(SettingFrame::Pane::ScrolledBody::clip::space::AIRoughness::slider);
    }

    method onCancel(context, event, item)
    {
        main::sound.play("cancel");
        if (gDirectApplyMode)
        {
            ROOT.apply();
            ROOT.close(context);
        }
        else
            ROOT.setFocus(SettingFrame::Pane::Foot::Cancel);

        return EVENTRESULT_FILTER;
    }

    module SettingFrame::Pane::Foot::OK
    {
        method onActivate(context)
        {
            main::sound.play("ok");
            ROOT.apply();
            ROOT.close(context);
            return EVENTRESULT_FILTER;
        }
    }

    module SettingFrame::Pane::Foot::Cancel
    {
        method onActivate(context)
        {
            main::sound.play("ok");
            ROOT.close(context);
            return EVENTRESULT_FILTER;
        }

        method onCancel(context)
        {
            main::sound.play("cancel");
            ROOT.close(context);
            return EVENTRESULT_FILTER;
        }
    }
}