













module ROOT
{
    method open(context)
    {
        SettingFrame.appear();
        SequenceUtil::pushPage(context, self);
    }

    method close(context)
    {
        var delay_time = SettingFrame.hide();
        SequenceUtil::popPage(context, self, delay_time);
    }

    method reflect(context)
    {
        var option = main::GAME_STATUS.user_profile.option;

        SettingFrame::Pane::ScrolledBody::clip::space::MapViewMode::OptionMenu.setIndex(context, option.race_map_view_mode);
        SettingFrame::Pane::ScrolledBody::clip::space::RD_ViewMode::OptionMenu.setIndex(context, option.racedisplay_view_mode);
        
        var vc = SettingFrame::Pane::ScrolledBody::clip::space::RD_VisibleControl::vbox;
        vc.CarMeter::Check.active = option.carmeter_disp_mode;
        vc.RacerName::Check.active = option.racername_disp_mode;
    }

    method apply()
    {
        var option = main::GAME_STATUS.user_profile.option;

        option.race_map_view_mode =  SettingFrame::Pane::ScrolledBody::clip::space::MapViewMode::OptionMenu.index;
        option.racedisplay_view_mode =  SettingFrame::Pane::ScrolledBody::clip::space::RD_ViewMode::OptionMenu.index;

        var vc = SettingFrame::Pane::ScrolledBody::clip::space::RD_VisibleControl::vbox;
        option.carmeter_disp_mode = vc.CarMeter::Check.active;
        option.racername_disp_mode = vc.RacerName::Check.active;

        putLog();
    }

    method putLog()
    {
        var option = main::GAME_STATUS.user_profile.option;
    }

    method onInitialize(context)
    {
        if (gDirectApplyMode)
            SettingFrame::Pane::Foot.visible = false;
        
        SettingFrame.adjust_scrolled_body();
        reflect(context);
        ROOT.setFocus(SettingFrame::Pane::ScrolledBody::clip::space::MapViewMode::OptionMenu);
    }

    method onCancel(context)
    {
        main::sound.play("cancel");
        if (gDirectApplyMode)
        {
            ROOT.apply();
            ROOT.close(context);
        }
        else
            ROOT.setFocus(SettingFrame::Pane::Foot::Cancel);

        return EVENTRESULT_FILTER;
    }

    module SettingFrame::Pane::ScrolledBody::clip::space::RD_ViewMode::OptionMenu
    {
        method onValueChanged(context)
        {
            var view_mode = self.index;
            SettingFrame::Pane::ScrolledBody::clip::space::MapViewMode::OptionMenu.insensitive = view_mode;
    
            for (var child = SettingFrame::Pane::ScrolledBody::clip::space::RD_VisibleControl::vbox.first; child != nil; child = child.next)
            {
                child.insensitive = view_mode;
            }
    
            __prototype__::onValueChanged(context);
        }
    }

    module SettingFrame::Pane::Foot::OK
    {
        method onActivate(context)
        {
            main::sound.play("ok");
            ROOT.apply();
            ROOT.close(context);
            return EVENTRESULT_FILTER;
        }
    }

    module SettingFrame::Pane::Foot::Cancel
    {
        method onActivate(context)
        {
            main::sound.play("ok");
            ROOT.close(context);
            return EVENTRESULT_FILTER;
        }

        method onCancel(context)
        {
            main::sound.play("cancel");
            ROOT.close(context);
            return EVENTRESULT_FILTER;
        }
    }
}