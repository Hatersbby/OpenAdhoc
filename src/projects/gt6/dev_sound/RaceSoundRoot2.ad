











module ROOT
{
    hidden.visible = false;

    function amplitude_to_decibel(x)
    {
        return x <= 0.0 ? -120.0 : (Math::round(Math::log10(x) * 20.0 * 10.0) / 10.0);
    }

    function decibel_to_amplitude(db)
    {
        return db <= -40.0 ? 0.0 : (10.0 ** (db / 20.0));
    }

    function format_decibel(value, scale, range, format, zero_text)
    {
        var v = scale.toFloat() * value;
        if (v == 0 && zero_text != nil)
            return zero_text;

        if (value <= range[0])
            return "OFF";

        if (format == nil)
            format = "%+d";

        return format.format(Math::round(v).toInt());
    }

    class MenuItem 
    {
        static NONE = 0;
        static TEXT = 1;
        static SLIDER = 2;

        attribute type = nil;
        attribute name = nil;
        attribute label = nil;
        attribute tip = nil;
        attribute on_init_func = nil;
        attribute on_update_func = nil;
        attribute on_activate_func = nil;
        attribute on_activate_arg = nil;
        attribute on_keypress_func = nil;
        attribute columns = nil;

        method __init__(_type, _name, _label, _tip, _init_func, _update_func, _activate_func)
        {
            self.type = _type;
            self.name = _name;
            self.label = _label;
            self.tip = _tip;
            self.on_init_func = _init_func;
            self.on_update_func = _update_func;
            self.on_activate_func = _activate_func;
            self.on_activate_arg = nil;
            self.on_keypress_func  = nil;
            self.columns = nil;
        }
    }

    class MenuItemColumn 
    {
        attribute type = nil;
        attribute name = nil;
        attribute label = nil;
        attribute tip = nil;
        attribute on_init_func = nil;
        attribute on_update_func = nil;
        attribute on_activate_func = nil;
        attribute on_activate_arg = nil;
        attribute on_keypress_func = nil;

        method __init__(_type, _name, _label, _tip, _init_func, _update_func, _activate_func)
        {
            self.type = _type;
            self.name = _name;
            self.label = _label;
            self.tip = _tip;
            self.on_init_func = _init_func;
            self.on_update_func = _update_func;
            self.on_activate_func = _activate_func;
            self.on_activate_arg = nil;
            self.on_keypress_func  = nil;
        }
    }

    method onInitialize(context)
    {
        self.on_initialize(context);
        context.cursor = "normal";
        context.cursor_visible = true;
    }

    method onFinalize(context)
    {
        Menu::ScrolledWindow::clip::space.clearChildren(context);
    }

    static camsnd_src_entries = [
        ["car_engine", "Engine", "エンジン音"],
        ["car_exhaust", "Exhaust", "エキゾースト"],
        ["car_afterfire", "After Fire", "アフターファイア。位置と方向はエキゾーストに従います"],
        ["car_turbocharger", "T/C", "ターボチャージャー"],
        ["car_supercharger", "S/C", "スーパーチャージャー（未使用）"],
        ["car_blowoff", "Blow Off Valve", "ブローオフバルブ"],
        ["car_wastegate", "Waste Gate", "ウェイストゲートバルブ（未使用）"],
        ["car_transmission", "Transmission", "トランスミッションのギアノイズ"],
        ["car_motor", "E-Motor", "モーターの駆動・回生音"],
        ["car_turbulence", "Wind Noise", "風切り音（360km/h, Cd=1.0, 指向性は無効）"],
        ["car_harshness", "Harshness", "路面からの入力で車体が振動する音"],
        ["car_tire_landing", "タイヤ着地音", "タイヤが着地する時の音"],
        ["car_crash", "Collision", "衝突音（車外）"],
        ["car_horn", "Horn", "ホーン"],
        ["car_nos", "NOS", "NOS"],
        ["car_tire_sound", "Tire EFX", "タイヤ効果音共通パラメータ（ロードノイズ、スキール音など）"],
        ["car_brake", "Brake", "ブレーキディスクなどの摩擦音"],
        ["car_fan", "Fan/Blower", "ファンカーの排気音"],
        ["car_actuator", "Actuator", "アクティブウイングなどの動作音"],
        ["car_airbrake", "Air Brake", "アクティブウイングなどの空力音"],
        ["car_engine_f_cockpit", "Cockpit F Engine Attr", "エンジン音属性（車内視点・フロントエンジン車）"],
        ["car_engine_r_cockpit", "Cockpit R Engine Attr", "エンジン音属性（車内視点・ミッド／リアエンジン車）"],
        ["car_exhaust_cockpit", "Cockpit Exhaust Attr", "エキゾースト音属性（車内視点）"],
    ];

    class NumberParameterControl
    {
        attribute min_value;
        attribute max_value;
        attribute value_step;
        attribute format_string;

        method __init__(_min_value, _max_value, _format_string, _step)
        {
            self.min_value = _min_value;
            self.max_value = _max_value;
            self.format_string = _format_string;
            self.value_step = _step != nil ? _step : 1;
        }

        method convertToDisplayValue(x)
        {
            return x;
        }

        method convertFromDisplayValue(x)
        {
            return x;
        }

        method getFormattedString(x)
        {
            return self.format_string.format(x);
        }
    }

    class DecibelParameterControl
    {
        attribute min_value;
        attribute max_value;
        attribute value_step;
        attribute spl_offset;
        attribute format_string;

        method __init__(_min_value, _max_value, _spl_offset, _format_string)
        {
            self.min_value = _min_value;
            self.max_value = _max_value;
            self.value_step = 1.0;
            self.spl_offset = _spl_offset;
            self.format_string = _format_string;
        }

        method convertToDisplayValue(x)
        {
            return amplitude_to_decibel(x);
        }

        method convertFromDisplayValue(x)
        {
            return decibel_to_amplitude(x);
        }

        method getFormattedString(db)
        {
            var a = format_decibel(db, 1.0, [self.min_value, self.max_value], self.format_string, self.max_value == 0.0 ? "0" : nil);
            if (spl_offset != nil && db + self.spl_offset > 0.0)
            {
                return a + " (%d dB)".format(Math::round(db + self.spl_offset));
            }
            else
            {
                return a;
            }
        }
    }

    method on_initialize(context)
    {
        var items = [];
        var view_volume_cols_def = [
            ["view_dependent_volume[0].%s.gain", "World Gain", on_init_camsnd_col_item, on_activate_camsnd_col_item, nil],
            ["view_dependent_volume[0].%s.gain_hf", "World GainHF", on_init_camsnd_col_item, on_activate_camsnd_col_item, nil],
            ["view_dependent_volume[1].%s.gain", "Cockpit Gain", on_init_camsnd_col_item, on_activate_camsnd_col_item, nil],
            ["view_dependent_volume[1].%s.gain_hf", "Cockpit GainHF", on_init_camsnd_col_item, on_activate_camsnd_col_item, nil],
            ["view_dependent_volume[2].%s.gain", "Chase Gain", on_init_camsnd_col_item, on_activate_camsnd_col_item, nil],
            ["view_dependent_volume[2].%s.gain_hf", "Chase GainHF", on_init_camsnd_col_item, on_activate_camsnd_col_item, nil],
            ["view_dependent_volume[3].%s.gain", "Onboard Gain", on_init_camsnd_col_item, on_activate_camsnd_col_item, nil],
            ["view_dependent_volume[3].%s.gain_hf", "Onboard GainHF", on_init_camsnd_col_item, on_activate_camsnd_col_item, nil],
            ["view_dependent_volume[4].%s.gain", "Cockpit(2) Gain", on_init_camsnd_col_item, on_activate_camsnd_col_item, nil],
            ["view_dependent_volume[4].%s.gain_hf", "Cockpit(2) GainHF", on_init_camsnd_col_item, on_activate_camsnd_col_item, nil],
        ];

        var parameter_cols_def = [
            ["gain", "SPL(dB)", on_init_se_master_item, on_activate_se_master_item, DecibelParameterControl(-40.0, 40.0, 100.0, "%+d")],
            ["cone_inner_angle", "ConeInnerAngle", on_init_se_master_item, on_activate_se_master_item, NumberParameterControl(0.0, 360.0, "%d", 15.0)],
            ["cone_outer_angle", "OuterAngle", on_init_se_master_item, on_activate_se_master_item, NumberParameterControl(0.0, 360.0, "%d", 15.0)],
            ["cone_outer_gain", "OuterGain(dB)", on_init_se_master_item, on_activate_se_master_item, DecibelParameterControl(-40.0, 0.0, nil, "%+d")],
            ["cone_outer_gain_hf", "OuterGainHF(dB)", on_init_se_master_item, on_activate_se_master_item, DecibelParameterControl(-40.0, 0.0, nil, "%+d")],
            ["ref_distance", "RefDistance(m)", on_init_se_master_item, on_activate_se_master_item, NumberParameterControl(1.0, 100.0, "%d")],
            ["filter_ref_distance", "FilterRefDist", on_init_se_master_item, on_activate_se_master_item, NumberParameterControl(1.0, 100.0, "%d")],
            ["position[0]", "Pos X(m)", on_init_se_master_item, on_activate_se_master_item, NumberParameterControl(-5.0, 5.0, "%+.2f", 0.05)],
            ["position[1]", "Pos Y(m)", on_init_se_master_item, on_activate_se_master_item, NumberParameterControl(-5.0, 5.0, "%+.2f", 0.05)],
            ["position[2]", "Pos Z(m)", on_init_se_master_item, on_activate_se_master_item, NumberParameterControl(-5.0, 5.0, "%+.2f", 0.05)],
            ["direction[0]", "Dir X", on_init_se_master_item, on_activate_se_master_item, NumberParameterControl(-1.0, 1.0, "%+.2f", 0.05)],
            ["direction[1]", "Dir Y", on_init_se_master_item, on_activate_se_master_item, NumberParameterControl(-1.0, 1.0, "%+.2f", 0.05)],
            ["direction[2]", "Dir Z", on_init_se_master_item, on_activate_se_master_item, NumberParameterControl(-1.0, 1.0, "%+.2f", 0.05)],
        ];

        // Build Menu
        var menu = MenuItem(MenuItem::TEXT, nil, "Reload Current Settings", nil, nil, nil, on_select_load);
        menu.on_activate_arg = "/sound_gt/etc/se_master.pmf";
        items.push(menu);

        menu = MenuItem(MenuItem::TEXT, nil, "src からロード", nil, nil, nil, on_select_load);
        items.push(menu);

        menu = MenuItem(MenuItem::TEXT, nil, "src にセーブ", nil, nil, nil, on_select_save);
        items.push(menu);

        var header = MenuItem(MenuItem::TEXT, nil, nil, nil, on_init_insensitive, nil, nil);
        var cols = [];
        foreach (var i in view_volume_cols_def)
            cols.push(MenuItemColumn(MenuItem::TEXT, nil, i[1], nil, on_init_insensitive, nil, nil));

        foreach (var i in parameter_cols_def)
            cols.push(MenuItemColumn(MenuItem::TEXT, nil, i[1], nil, on_init_insensitive, nil, nil));

        header.columns = cols;

        var master = main::gtengine::MRaceSound::getGlobalSoundEffectMasterParameter();
        var line = 0;
        var entries = camsnd_src_entries;

        // Build columns
        foreach (var entry in entries)
        {
            if (line % 10 == 0)
                items.push(header);

            var name = entry[0];
            var label = entry[1];
            var gain_tip = entry[2];

            menu = MenuItem(MenuItem::SLIDER, name, label, nil, nil, nil, nil);
            cols = [];

            foreach (var i in view_volume_cols_def)
            {
                var col_name = i[0];
                var path = col_name.format(name);
                var target_member = main::pdistd::MPseudoReflectionObject::parseObjectPath(master, path);
                if (target_member != nil)
                {
                    var tip = "";
                    var item = MenuItemColumn(MenuItem::SLIDER, i[0], nil, tip, i[2], nil, i[3]);
                    item.on_activate_arg = i[4];
                    cols.push(item);
                }
                else
                {
                    cols.push(MenuItemColumn(MenuItem::TEXT, nil, "-", nil, nil, nil, nil));
                }
            }

            foreach (var i in parameter_cols_def)
            {
                if (master.getMember(name) != nil)
                {
                    var tip = i[0] == "gain" ? gain_tip : "";
                    var item = MenuItemColumn(MenuItem::SLIDER, i[0], nil, tip, i[2], nil, i[3]);
                    item.on_activate_arg = i[4];
                    cols.push(item);
                }
                else
                {
                    cols.push(MenuItemColumn(MenuItem::TEXT, nil, "-", nil, nil, nil, nil));
                }
            }

            menu.columns = cols;
            items.push(menu);
            line++;
        }

        var entries = [
            ["normal_car_cockpit", "Road Car/Exterior"],
            ["normal_car_body", "Road Car/Interior"],
            ["race_car_cockpit", "Race Car/Exterior"],
            ["race_car_body", "Race Car/Interior"],
            ["open_car_cockpit", "Open Roof/Exterior"],
            ["car_mirror_sound", "Reflect Sound"],
        ];

        var transfer_cols_def = [
            ["Gain (dB)", "airborne.gain", DecibelParameterControl(-40.0, 0.0, nil, "%+d")],
            ["GainHF (dB)", "airborne.gain_hf", DecibelParameterControl(-40.0, 0.0, nil, "%+d")],
            ["固体伝播 Gain (dB)", "structureborne.gain", DecibelParameterControl(-40.0, 0.0, nil, "%+d")],
            ["固体伝播 GainHF (dB)", "structureborne.gain_hf", DecibelParameterControl(-40.0, 0.0, nil, "%+d")],
        ];

        menu = MenuItem(MenuItem::TEXT, nil, nil, nil, on_init_insensitive, nil, nil);
        cols = [];

        foreach (var i in transfer_cols_def)
        {
            var label = i[0];
            cols.push(MenuItemColumn(MenuItem::TEXT, nil, label, nil, on_init_insensitive, nil, nil));
        }

        menu.columns = cols;
        items.push(menu);

        var on_init_func = on_init_transfer_preset_item;
        var on_activate_func = on_activate_transfer_preset_item;

        foreach (var entry in entries)
        {
            var row_name = entry[0];
            var label = entry[1];
            
            menu = MenuItem(MenuItem::SLIDER, row_name, label, nil, nil, nil, nil);
            cols = [];

            foreach (var i in transfer_cols_def)
            {
                var path = row_name + "." + i[1];
                var param_control = i[2];
                var transfer_parameter_set = master.getMember("transfer_parameter_set");
                var target_member = transfer_parameter_set == nil ? nil : main::pdistd::MPseudoReflectionObject::parseObjectPath(transfer_parameter_set, path);
                if (target_member != nil)
                {
                    var tip = "";
                    var item = MenuItemColumn(MenuItem::SLIDER, path, nil, tip, on_init_func, nil, on_activate_func);
                    item.on_activate_arg = param_control;
                    cols.push(item);
                }
                else
                {
                    cols.push(MenuItemColumn(MenuItem::TEXT, nil, "-", nil, nil, nil, nil));
                }
            }

            menu.columns = cols;
            items.push(menu);
        }

        open_menu(context, "", items, 0, 0);
    }

    function on_init_insensitive(context, menuitem, item)
    {
        item.can_focus = false;
    }

    function find_focusable_window(composite)
    {
        for (; composite != nil; composite = composite.next_window)
        {
            if (composite.can_focus)
                return composite;

            var r = find_focusable_window(composite.first_window);
            if (r != nil)
                return r;
        }

        return nil;
    }

    function on_init_camsnd_col_item(context, menuitem, item)
    {
        reflect_camsnd_col_item(item);
    }

    function reload_request()
    {
        main::pdistd::MDynRes::setInt32("SoundDebugReload", 1);
    }

    function get_item_volume_db(item)
    {
        var col = item;
        var row = col.parent.parent.parent;
        var master = main::gtengine::MRaceSound::getGlobalSoundEffectMasterParameter();
        var path = col.name.format(row.name);
        var target_member = main::pdistd::MPseudoReflectionObject::parseObjectPath(master, path);
        var gain = target_member.getValue();
        return amplitude_to_decibel(gain);
    }

    function reflect_camsnd_col_item(item)
    {
        var db = get_item_volume_db(item);
        item["label"].text = format_decibel(db, 10.0, [-40.0, 0.0], "%+.1t", nil);
    }

    function on_activate_camsnd_col_item(context, menuitem, row, col)
    {
        var db = get_item_volume_db(col);

        SliderPopup.setPositionWidgetRelative(col);
        SliderPopup.setRange(-40.0, 0.0);
        SliderPopup.setValue(db);
        SliderPopup.setStep(1);
        var result = SliderPopup.open(context);

        if (result != nil)
        {
            db = result['value'];
            var amp = db <= -40.0 ? 0.0 : 10.0 ** (db / 20.0);
            var master = main::gtengine::MRaceSound::getGlobalSoundEffectMasterParameter();
            var path = col.name.format(row.name);
            var target_member = main::pdistd::MPseudoReflectionObject::parseObjectPath(master, path);
            target_member.setValue(amp);
            reflect_camsnd_col_item(col);
            reload_request();
        }

        return EVENTRESULT_FILTER;
    }

    function on_init_se_master_item(context, menuitem, item)
    {
        var col = item;
        var row = col.parent.parent.parent;
        reflect_se_master_item(row, col, menuitem);
    }

    function on_activate_se_master_item(context, menuitem, row, col)
    {
        var master = main::gtengine::MRaceSound::getGlobalSoundEffectMasterParameter();
        var path = row.name + "." + col.name;
        var target_member = main::pdistd::MPseudoReflectionObject::parseObjectPath(master, path);
        var converter = menuitem.on_activate_arg;
        var raw_value = target_member.getValue();
        var display_value = converter.convertToDisplayValue(raw_value);
        
        SliderPopup.setPositionWidgetRelative(col);
        SliderPopup.setRange(converter.min_value, converter.max_value);
        SliderPopup.setStep(converter.value_step);
        SliderPopup.setValue(display_value);
        var result = SliderPopup.open(context);
        if (result != nil)
        {
            display_value = result['value'];
            raw_value = converter.convertFromDisplayValue(display_value);
            target_member.setValue(raw_value);
            reflect_se_master_item(row, col, menuitem);
            reload_request();
        }

        return EVENTRESULT_FILTER;
    }

    function reflect_se_master_item(row, col, menuitem)
    {
        var master = main::gtengine::MRaceSound::getGlobalSoundEffectMasterParameter();
        var path = row.name + "." + col.name;
        var target_member = main::pdistd::MPseudoReflectionObject::parseObjectPath(master, path);
        target_member == nil;
        var raw_value = target_member.getValue();
        var converter = menuitem.on_activate_arg;
        var display_value = converter.convertToDisplayValue(raw_value);
        col["label"].text = converter.getFormattedString(display_value);
    }

    function on_init_transfer_preset_item(context, menuitem, item)
    {
        var col = item;
        var row = col.parent.parent.parent;
        reflect_transfer_preset_item(row, col, menuitem);
    }

    function on_activate_transfer_preset_item(context, menuitem, row, col)
    {
        var master = main::gtengine::MRaceSound::getGlobalSoundEffectMasterParameter();
        var transfer_parameter_set = master.getMember("transfer_parameter_set");
        var path = col.name;
        var target_member = main::pdistd::MPseudoReflectionObject::parseObjectPath(transfer_parameter_set, path);
        var converter = menuitem.on_activate_arg;
        var raw_value = target_member.getValue();
        var display_value = converter.convertToDisplayValue(raw_value);
        
        SliderPopup.setPositionWidgetRelative(col);
        SliderPopup.setRange(converter.min_value, converter.max_value);
        SliderPopup.setStep(converter.value_step);
        SliderPopup.setValue(display_value);
        var result = SliderPopup.open(context);
        if (result != nil)
        {
            display_value = result['value'];
            raw_value = converter.convertFromDisplayValue(display_value);
            target_member.setValue(raw_value);
            reflect_transfer_preset_item(row, col, menuitem);
            reload_request();
        }

        return EVENTRESULT_FILTER;
    }

    function reflect_transfer_preset_item(row, col, menuitem)
    {
        var master = main::gtengine::MRaceSound::getGlobalSoundEffectMasterParameter();
        var transfer_parameter_set = master.getMember("transfer_parameter_set");
        var path = col.name;
        var target_member = main::pdistd::MPseudoReflectionObject::parseObjectPath(transfer_parameter_set, path);
        target_member == nil;
        var raw_value = target_member.getValue();
        var converter = menuitem.on_activate_arg;
        var display_value = converter.convertToDisplayValue(raw_value);
        col["label"].text = converter.getFormattedString(display_value);
    }

    function on_select_load(context, index, menuitem, item, arg)
    {
        var path = "/app_home/gt/gt6/src/sound/etc/se_master.pmf";
        if (arg != nil)
            path = arg;

        var res = DialogUtil::openConfirmDialog(context, DialogUtil::YESNO, "ロードしてよろしいですか？" + "\n" + path);
        if (!res)
            return;

        var results = main::pdistd::ReadFile(path);
        var retcode = results["result"];
        if (retcode == 0)
        {
            var master = main::gtengine::MRaceSound::getGlobalSoundEffectMasterParameter();
            var bytedata = results["buffer"];
            retcode = master.setPmfByteData(bytedata) ? 0 : 1;
        }

        DialogUtil::openConfirmDialog(context, DialogUtil::OK, retcode == 0 ? "成功しました" : "失敗しました");
        if (retcode == 0)
            reload_request();

        close_menu(context);
        ROOT.on_initialize(context);
    }

    function on_select_save(context, index, menuitem, item, arg)
    {
        var path = "/app_home/gt/gt6/src/sound/etc/se_master.pmf";
        if (arg != nil)
            path = arg;

        var res = DialogUtil::openConfirmDialog(context, DialogUtil::YESNO, "セーブしてよろしいですか？" + "\n" + path);
        if (!res)
            return;

        
        var master = main::gtengine::MRaceSound::getGlobalSoundEffectMasterParameter();
        var bytedata = master.getPmfByteData(false);
        var retcode = main::pdistd::WriteFile(path, bytedata);
        
        DialogUtil::openConfirmDialog(context, DialogUtil::OK, retcode == 0 ? "成功しました" : "失敗しました");
    }

    function db_to_amp(x)
    {
        return 10.0 ** (x / 20.0);
    }

    class StackUnit
    {
        attribute title;
        attribute menuitem_list;
        attribute prev_focus_index;

        method __init__(title, menuitem_list, prev_focus_index)
        {
            self.title = title;
            self.menuitem_list = menuitem_list;
            self.prev_focus_index = prev_focus_index;
        }
    }

    class Stack
    {
        attribute index = nil;
        attribute stack_array = nil;

        method __init__()
        {
            self.stack_array = [];
            self.index = 0;
        }

        method push(unit)
        {
            self.stack_array.push(unit);
            self.index++;
        }

        method pop() 
        {
            if (self.index >= 1)
            {
                self.index--;
                return self.stack_array.pop();
            }
            else
                return nil;
        }

        method getCurrent()
        {
            if (self.stack_array.size == 0)
                return nil;

            var idx = self.stack_array.size - 1;
            return self.stack_array[idx];
        }
    }

    static sStack = Stack();

    function start_menu(context, stack_unit, focus_index)
    {
        var list = stack_unit.menuitem_list;

        var clip = Menu::ScrolledWindow::clip;
        var space = clip.space;
        
        clip.visible = false;
        space.clearChildren(context);

        var menu_items = sStack.getCurrent().menuitem_list;
        for (var i = 0; i < menu_items.size; i++)
        {
            var menu_item = menu_items[i];
            var rowitem = hidden::Item.doCopy();
            if (menu_item.name != nil)
                rowitem.name = menu_item.name;

            if (menu_item.type == MenuItem::TEXT)
                rowitem.can_focus = true;

            rowitem.HBox.label.text = menu_item.label;
            rowitem.defineStatic("index", i);
            space.appendChild(context, rowitem);

            if (menu_item.on_init_func != nil)
                menu_item.on_init_func(context, menu_item, rowitem);

            if (menu_item.columns != nil)
            {
                for (var j = 0; j < menu_item.columns.size; j++)
                {
                    var col = menu_item.columns[j];
                    var colitem = hidden::VolumeItem2.doCopy();
                    if (col.name != nil)
                        colitem.name = col.name;

                    colitem.label.text = col.label;
                    colitem.defineStatic("column", j);
                    rowitem.HBox.Columns.appendChild(context, colitem);

                    if (col.on_init_func != nil)
                        col.on_init_func(context, col, colitem);
                }
            }

            if (i == focus_index)
                ROOT.setFocus(rowitem);
        }

        clip.updateGeometry();
        clip.visible = true;
    }

    function open_menu(context, title, list, prev_focus_index, focus_index)
    {
        var stack_unit = StackUnit(title, list, prev_focus_index);
        sStack.push(stack_unit);
        start_menu(context, stack_unit, focus_index);
    }

    function close_menu(context)
    {
        var prev_stack_unit = sStack.pop();
        if (prev_stack_unit == nil) 
        {
            return false;
        }
        else 
        {
            var stack_unit = sStack.getCurrent();
            if (stack_unit == nil)
                return false;

            start_menu(context, stack_unit, prev_stack_unit.prev_focus_index);
            return true;
        }
    }

    function push_menu_stack(context, prev_focus_index)
    {
        sStack.push(StackUnit("dummy", nil, prev_focus_index));
    }

    function onCancel(context)
    {
        main::sound.play("cancel");

        var res = close_menu(context);
        if (!res)
        {
            context.closePage(ROOT);
            context.pushPage(SoundRoot);
        }

        return EVENTRESULT_FILTER;
    }
}

module ROOT::hidden::Item
{
    function onActivate(context, event)
    {
        main::sound.play("ok");
        var menu_items = sStack.getCurrent().menuitem_list;
        var item = event.widget;
        var index = item.index;
        var menuitem = menu_items[index];
        var func = menuitem.on_activate_func;

        if (func != nil)
        {
            var arg = menuitem.on_activate_arg;
            func(context, index, menuitem, item, arg);
        }

        return 1;
    }
}

module ROOT::hidden::VolumeItem2
{
    method onActivate(context, event)
    {
        main::sound.play("ok");
        var menu_items = sStack.getCurrent().menuitem_list;
        var col = event.widget;
        var row = col.parent.parent.parent;
        var row_index = row.index;
        var col_index = col.column;
        var menuitem = menu_items[row_index].columns[col_index];
        var func = menuitem.on_activate_func;
        
        if (func != nil)
            return func(context, menuitem, row, col);
            
        return 1;
    }

    method onFocusEnter(context, event)
    {
        var col = event.widget;
        var row = col.parent.parent.parent;
        var menu_items = sStack.getCurrent().menuitem_list;

        ROOT::Tooltip::tip.value = menu_items[row.index].columns[col.column].tip;
        return EVENTRESULT_FILTER;
    }
}
