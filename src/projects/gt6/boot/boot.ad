


//---------------------------------------------------------------------------------------
// boot.ad
//
// (ä¾‹)
// boot.ad
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// function
//---------------------------------------------------------------------------------------

module PROJECT
{
    #include "projects/gt6/boot/boot_functions.ad"
    #include "projects/gt6/boot/init_sound.ad"
    #include "projects/gt6/boot/init_behavior.ad"
    #include "projects/gt6/boot/presents_sequence_common.ad"
    #include "projects/gt6/boot/boot_sequence_common.ad"
    #include "projects/gt6/boot/boot_sequence_gt6.ad"
    #include "projects/gt6/boot/boot_sequence_academy.ad"
    #include "projects/gt6/boot/boot_sequence_demo.ad"
    #include "projects/gt6/boot/boot_sequence_runviewer.ad"
    #include "projects/gt6/boot/boot_sequence_behavior.ad"
    #include "projects/gt6/config/keyconfig.h"

    class ProcessControl
    {
        attribute context = nil;
        attribute finish_flg = nil;

        method __init__(context)
        {
            self.context = context;
            self.finish_flg = false;
        }

        method sync()
        {
            while (!finish_flg)
                { yield; }
            
            finish_flg = false;
        }

        method finished()
        {
            return finish_flg;
        }

        method finish()
        {
            finish_flg = true;
        }
    }

    function boot_sequence(context, pc)
    {
        switch (GetVersionBranch())
        {
            case "gt6":
                boot_sequence_gt6(context); break;
            case "academy":
                boot_sequence_academy(context); break;
            case "demo":
                boot_sequence_demo(context); break;
            case "behavior":
            case "behavior-sa":
                boot_sequence_behavior(context); break;
            case "runviewer":
                boot_sequence_runviewer(context); break;
        }

        pc.finish();
    }

    function display_sequence(context, pc, thread)
    {
        switch (GetVersionBranch())
        {
            case "gt6":
                display_sequence_gt6(context, pc, thread); break;
            case "academy":
                display_sequence_academy(context, pc, thread); break;
            case "demo":
                display_sequence_demo(context, pc, thread); break;
            case "behavior":
            case "behavior-sa":
                display_sequence_behavior(context, pc, thread); break;
            case "runviewer":
                display_sequence_runviewer(context, pc, thread); break;
        }
    }

    function start_project(context)
    {   
        switch (GetVersionBranch())
        {
            case "gt6":
                start_project_gt6(context); break;
            case "academy":
                start_project_academy(context); break;
            case "demo":
                start_project_demo(context); break;
            case "behavior":
            case "behavior-sa":
                start_project_behavior(context); break;
            case "runviewer":
                start_project_runviewer(context); break;
        }

        if (boot_state.is_new_game)
            SaveDataUtilGT6::createSaveDataEveryWhere(context);
    }

    static thread;

    function boot(context)
    {
        var pc = ProcessControl(context);

        var thread = Thread(boot_sequence, context, pc);
        thread.start();

        display_sequence(context, pc, thread);

        thread.join();

        start_project(context);
    }

    function log(message)
    {
        var context = manager.getUpdateContext().getRenderContext(0);
        var root = context.getRootWindow();
        if (root != nil)
        {
            var log = root["log"];
            if (log != nil)
                log.text = log.text + "\n" + message;
        }
    }

    method onLoad(update_context)
    {
        update_context.createRenderContext(1);

        var context = update_context.getRenderContext(0);
        context.pushEvent(main::menu::MFunctionEvent(boot, context));

    }

    function onUnload(update_context)
    {
        Login.setPatchFunction(nil, nil);
    }
}
