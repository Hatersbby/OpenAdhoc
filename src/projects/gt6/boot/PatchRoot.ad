


//---------------------------------------------------------------------------------------
// PatchRoot.ad
//
// (ä¾‹)
// PatchRoot.ad
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// function
//---------------------------------------------------------------------------------------



#include "projects/gt6/boot/PatchLogic.ad"

module ROOT
{
    attribute sPatchSuccess = false;
    attribute sMode = nil;
    attribute sRootDir = nil;

    method open(context, mode, patch_root_dir)
    {
        self.sMode=  mode;
        self.sRootDir = patch_root_dir;
        SequenceUtil::pushPage(context, ROOT);
        return self.sPatchSuccess;
    }

    method close(context)
    {
        SequenceUtil::popPage(context, ROOT);
        self.sMode = nil;
    }

    method onInitialize(context)
    {
        context.pushEvent(main::menu::MScriptEvent(context, ROOT, "on_initialize"));
    }

    method on_initialize(context)
    {
        if ((self.sMode & PatchLogic::IDENT_TAG_TPPS_POSTINSTALL) != 0)
            self.local_update(context);
        
        if ((self.sMode & PatchLogic::IDENT_TAG_NETWORK_PFS) != 0)
            self.network_update(context);

        close(context);
    }

    method local_update(context)
    {
        var patch_tags = PatchLogic::IDENT_TAG_TPPS_POSTINSTALL;

        PatchLogic::initialize(false);


        self.sPatchSuccess = prepare(context, patch_tags, self.sRootDir);
        if (!self.sPatchSuccess)
        {
            PatchLogic::terminate(PatchLogic::ERROR_PREPARE);
            return;
        }

        self.sPatchSuccess = checkCapacity(context, patch_tags);
        if (!self.sPatchSuccess)
        {
            PatchLogic::terminate(PatchLogic::ERROR_CAPACITY);
            return;
        }

        self.sPatchSuccess = install(context, false, patch_tags, self.sRootDir);
        PatchLogic::terminate(self.sPatchSuccess ? PatchLogic::ERROR_SUCCESS : PatchLogic::ERROR_INSTALL);
    }

    method network_update(context)
    {
        var patch_tags = PatchLogic::IDENT_TAG_NETWORK_PFS;

        PatchLogic::initialize(true);

        self.sPatchSuccess = prepare(context, patch_tags, self.sRootDir);
        if (!self.sPatchSuccess)
        {
            PatchLogic::terminate(PatchLogic::ERROR_PREPARE);
            return;
        }

        self.sPatchSuccess = checkCapacity(context, patch_tags);
        if (!self.sPatchSuccess)
        {
            PatchLogic::terminate(PatchLogic::ERROR_CAPACITY);
            return;
        }

        self.sPatchSuccess = download(context, patch_tags, self.sRootDir);
        if (!self.sPatchSuccess)
        {
            PatchLogic::terminate(PatchLogic::ERROR_DOWNLOAD);
            return;
        }

        self.sPatchSuccess = install(context, false, patch_tags, self.sRootDir);

        PatchLogic::terminate(self.sPatchSuccess ? PatchLogic::ERROR_SUCCESS : PatchLogic::ERROR_INSTALL);
    }

    method prepareSync(patch_tags)
    {
        main::pdiext::MSystemPatch::startPrepare(patch_tags);
        main::pdiext::MSystemPatch::syncPrepare();
        return true;
    }

    method prepare(context, patch_tags, patch_root_dir)
    {
        var prepare = PatchLogic::Prepare(ROOT, patch_tags, patch_root_dir);
        return prepare.execute(context, true);
    }

    method download(context, patch_tags, patch_root_dir)
    {
        var download = PatchLogic::Download(ROOT, patch_tags, patch_root_dir);
        return download.execute(context, true);
    }

    method install(context, cancelable, patch_tags, patch_root_dir)
    {
        var install = PatchLogic::Install(ROOT, patch_tags, patch_root_dir);
        return install.execute(context, cancelable);
    }

    method checkCapacity(context, patch_tags)
    {
        var sz_free = main::pdiext::MSystemPatch::freeKBSize(patch_tags);

        var sz_need = main::pdiext::MSystemPatch::needKBSize(patch_tags);
        if (sz_need > sz_free) {
            var sz_need_size = sz_need - sz_free;
            sz_need_size = (sz_need_size + 1023) / 1024;

            DialogUtil::openConfirmDialog(context, DialogUtil::OK, 
                main::manager.translate("Network", "NOT_ENOUGH_DISK_SPACE").build(sz_need_size));
            return false;
        }
        return true;
    }

    method onFinalize(context)
    {

    }

    method onCancel(context)
    {
        return 2;
    }
}