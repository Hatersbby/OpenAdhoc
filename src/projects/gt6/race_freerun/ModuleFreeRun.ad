













function getEventId()
{
    var e = gSequenceCondition.gp.event.track.generated_course_id;
    return e > 0 ? e : nil;
}

function onLoad(update_context)
{
    var context = update_context.getRenderContext();

    gSequenceCondition.quick_root = PROJECT::QuickRoot;

    LoadingUtil::requestAsync(context, 10);

    main::cursor_project.syncBridge();
    gSequenceCondition.quick_root.open(context);
}

function onUnload(update_context)
{
    main::RaceOperator.checkOut();
    main::ORG.exitCourse();

    destroyRaceSync();
    clearResource();
    RaceOperator.clear();
}

function onRaceRootInitialize(context)
{
    var slot_id = RaceOperator.getPlayerSlot();
    var window_id = 0;
    var port = 0;

    RaceProject::setTarget(slot_id, window_id);
    ORG.setCameraWindowControllerPort(window_id, port);

    pdistd::MGamePort::SetWheelAssignMode(pdistd::WheelAssignMode::SDK);
}

function onComplete(context, slot_id, result, is_forced, is_target)
{
    if (!is_forced && !gSequenceCondition.isDemo() && is_target)
    {
        ORG.pauseAvailable = false;
        if (is_target && main::ORG.getEntryControlType(slot_id) == main::gtengine::ControlType::LOCAL)
            RaceRoot.playMusicWhenComplete(context, result);

        var laptime = slot_id >= 0 ? ORG.getGoalTime(slot_id) : pdiext::MAX_LAPTIME1000;
        ORG.pauseHandleAvailable = false;
        ORG.pauseAvailable = false;
        OnboardMeterRoot.visible = false;
        RaceRoot.visible = false;
        ORG.noDispBackMirror(true);

        var res = PROJECT::KinGinDouRoot.open(context, laptime);
        if (res)
            RaceRoot.restart(context);
        else
            RaceRoot.quit(context);
    }
}

function onPlayMusicWhenComplete(context, result)
{
    gRaceBGM.onCompleteRaceDefault(result, gSequenceCondition.isDemo());
}

function onExit(context)
{
    if (!RaceMenuUtil::activated())
    {
        main::sound.play("disable");
        return;
    }

    main::sound.play("ok");
    OnboardMeterRoot::RaceDisplayFace.toStop();
    RaceMenuUtil::closeAction(context);
    RaceRoot.quit(context);
}