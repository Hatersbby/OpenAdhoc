













module ROOT
{
    class Data
    {
        method __init__(_label, _enable, _callback, _args, _cascade_data)
        {
            self.label = _label;
            self.enable = _enable;
            self.callback = _callback;
            self.args = _args;
            self.cascade_data = _cascade_data;
            self.on = false;
        }

        attribute label;
        attribute enable;
        attribute callback;
        attribute args;
        attribute cascade_data;
        attribute on;
    }

    attribute popup;
    attribute base_x;
    attribute base_y;
    attribute title;
    attribute data_list;
    attribute result;
    attribute selected_data;

    method open(context, x, y, title, data_list)
    {
        self.result = true;
        self.base_x = x;
        self.base_y = y;
        self.title = title;
        self.data_list = data_list;
        self.popup = main::SequenceUtil::ModalPage(context, ROOT);
        self.popup.open();
        return result;
    }

    method close(context, abort)
    {
        if (abort != nil && abort)
            self.selected_data = nil;
        
        if (self.popup != nil)
        {
            self.popup.close();
            self.popup = nil;
        }

        if (self.selected_data != nil)
        {
            if (self.selected_data.callback != nil)
            {
                context.sync(0.1);
                
                var event = main::menu::MFunctionEvent(self.selected_data.callback, context, self.selected_data.args);
                context.rushEvent(event);
            }
        }

        self.selected_data = nil;
        self.data_list = nil;
        self.title = nil;
        self.base_x = nil;
        self.base_y = nil;
    }

    method abort(context)
    {
        if (self.popup != nil)
        {
            self.result = false;
            self.close(context, true);
        }
    }

    method onCancel(context)
    {
        main::sound.play("cancel");
        self.result = false;
        close(context);
        return EVENTRESULT_FILTER;
    }

    method onInitialize(context)
    {
        hidden.visible = false;

        self.selected_data = nil;

        var root_menu = hidden::Menu.doCopy();
        if (self.title != nil)
            root_menu.TitleRow.label.text = self.title;
        else
            root_menu.TitleRow.visible = false;

        PlaceHolder.appendChild(context, root_menu);
        root_menu.initialize(context, self.data_list);
        root_menu.sx = self.base_x;
        root_menu.sy = self.base_y;
    }

    method onFinalize(context)
    {
        PlaceHolder.clearChildren(context);
    }

    module hidden
    {
        module Menu
        {
            attribute last_focus_widget;

            method initialize(context, data_list)
            {
                foreach (var data in data_list)
                {
                    if (data == nil)
                    {
                        var separator = hidden::Separator.doCopy();
                        Body::VBox.appendChild(context, separator);
                        separator.insensitive = true;
                    }
                    else
                    {
                        var item = hidden::Item.doCopy();
                        Body::VBox.appendChild(context, item);
                        item.initialize(context, self, data);
                    }
                }
            }

            method onFinalize(context)
            {
                self.last_focus_widget = nil;
            }

            method onCancel(context)
            {
                if (self.last_focus_widget == nil)
                    return EVENTRESULT_CONTINUE;

                main::sound.play("cancel");

                var parent_menu = self.last_focus_widget.menu;
                parent_menu.insensitive = false;

                ROOT.setFocus(self.last_focus_widget);
                PlaceHolder.removeChild(context, self);
                return EVENTRESULT_FILTER;
            }
        }

        module Item
        {
            attribute data;
            attribute menu;

            method initialize(context, _menu, _data)
            {
                self.menu = _menu;
                self.data = _data;
                self.label.text = self.data.label;
                self.labelI.text = self.data.label;
                self.ImageFace.visible = self.data.cascade_data != nil;
                self.ImageFace.doInitialize(context);
                self.ImageFaceI.visible = self.data.cascade_data != nil;
                self.ImageFaceI.doInitialize(context);
                self.insensitive = !self.data.enable;
                self.ImageFaceOn.visible = self.data.on;
                self.ImageFaceOn.doInitialize(context);
            }

            method onFinalize(context)
            {
                self.menu = nil;
                self.data = nil;
            }

            method onActivate(context)
            {
                main::sound.play("ok");

                if (self.data.cascade_data != nil)
                {
                    var sub_menu = hidden::Menu.doCopy();
                    sub_menu.last_focus_widget = self;
                    sub_menu.TitleRow.visible = false;
                    sub_menu.initialize(context, self.data.cascade_data);
                    sub_menu.sx = (self.sx + self.w) - 16;
                    sub_menu.sy = self.sy - 32;
                    self.menu.insensitive = true;

                    PlaceHolder.appendChild(context, sub_menu);

                    for (var widget = sub_menu.Body::VBox.first; widget != nil; widget = widget.next_widget)
                    {
                        if (!widget.insensitive)
                        {
                            ROOT.setFocus(widget);
                            break;
                        }
                    }
                }
                else
                {
                    if (self.data.callback != nil)
                    {
                        ROOT.selected_data = self.data;
                        ROOT.close(context);
                    }
                }

                return EVENTRESULT_FILTER;
            }
        }
    }
}