













module ROOT
{
    module OpenMode
    {
        static CAREER_SHORT_END = 0;
        static CAREER_GRAND_END = 1;
        static X_CHALLENGE_SHORT_END = 2;
        static X_CHALLENGE_GRAND_END = 3;
    }

    attribute modal;
    attribute open_mode;
    attribute to_close = false;
    attribute watcher;
    attribute start_time;
    attribute next_time;
    attribute can_skip = false;
    attribute caption_index;

    method open(context, open_mode)
    {
        SequenceUtil::startPageSimple(context, ROOT);
        self.open_mode = open_mode;
        self.to_close = false;
        self.can_skip = false;
    }

    method close(context)
    {
        if (self.to_close)
            return;

        self.to_close = true;
        self.can_skip = false;

        if (self.modal != nil)
        {
            var actor = self.ColorFace.ScalarInterpolator;
            actor.reverse = false;
            actor.restart();

            self.modal.close(actor.total_time);
            self.modal = nil;
        }
        else
            GTModeRoot.open(context);
    }

    method openModal(context, open_mode)
    {
        self.start_time = main::pdistd::GetSystemTimeMicroSecond();
        self.open_mode = open_mode;
        self.can_skip = false;
        
        var cursor_visible = context.cursor_visible;
        context.cursor_visible = false;

        self.modal = SequenceUtil::ModalPage(context, self);
        self.modal.open();
        context.cursor_visible = cursor_visible;
    }

    method onLoad(context)
    {
        
    }

    method onSceneEnd(context, args)
    {
        if (self.open_mode == OpenMode::X_CHALLENGE_GRAND_END)
            close();
    }

    method onInitialize(context)
    {
        SoundUtil::BGMStop();

        Message_CareerShortEnd.visible = false;
        Message_XChallengeShortEnd.visible = false;
        self.to_close = false;

        var actor = self.ColorFace.ScalarInterpolator;
        actor.reverse = true;
        actor.restart();

        switch (self.open_mode)
        {
            case OpenMode::CAREER_GRAND_END:
                MovieFace.play_movie(context);
                SceneFace.visible = false;
                MovieFace.visible = true;
                break;

            case OpenMode::CAREER_SHORT_END:
                var riding_cp = GAME_STATUS.user_profile.garage.getRidingCar();
                var alias = "ending_career_Bronze";
                var result = GAME_STATUS.user_profile.record.event_record.getEventResult(60);
                
                switch (result)
                {
                    case 0:
                        alias = "ending_career_Gold"; break;
                    case 1:
                        alias = "ending_career_Silver"; break;
                    case 2:
                        alias = "ending_career_Bronze"; break;
                }

                self.SceneFace.startSceneScript(alias, riding_cp, onSceneCommandEnd);
                ORG.setEnableStereoRendering(true);
                SceneFace.visible = true;
                MovieFace.visible = false;
                break;

            case OpenMode::X_CHALLENGE_GRAND_END:
                alias = "x1challenge_spa_all";
                self.SceneFace.startSceneScript(alias, nil, onSceneCommandEnd, nil, onSceneEnd, nil);
                ORG.setEnableStereoRendering(true);
                SceneFace.visible = true;
                MovieFace.visible = false;
                break;

            case OpenMode::X_CHALLENGE_SHORT_END:
                var alias = "ending_X_Bronze";
                var result = GAME_STATUS.user_profile.record.event_record.getEventResult(135);
                
                switch (result)
                {
                    case 0:
                        alias = "ending_X_Gold"; break;
                    case 1:
                        alias = "ending_X_Silver"; break;
                    case 2:
                        alias = "ending_X_Bronze"; break;
                }

                var cp = gtengine::MCarParameter("x2014_std_14");

                self.SceneFace.startSceneScript(alias, cp, onSceneCommandEnd);
                ORG.setEnableStereoRendering(true);
                SceneFace.visible = true;
                MovieFace.visible = false;
                break;
        }
        
        context.pageInRootTransition();
    }

    method onFinalize(context)
    {
        if (self.open_mode == OpenMode::CAREER_GRAND_END)
            PDINetwork.unlockTrophyAsync(gtengine::TrophyType::ENDING2);
        else if (self.open_mode == OpenMode::CAREER_SHORT_END)
            PDINetwork.unlockTrophyAsync(gtengine::TrophyType::ENDING);

        if (self.watcher != nil)
        {
            WatcherUtil::Delete(self.watcher);
            self.watcher = nil;
        }

        self.to_close = false;
        self.start_time = nil;
        self.next_time = nil;
        self.caption_index = nil;
        context.cursor_visible = true;
        SceneFace.visible = false;
        ORG.setEnableStereoRendering(false);
        MovieFace.visible = false;

        SoundUtil::MenuBGMCrossfadeGroup("menu", 0.0, 1.0);

        SaveDataUtilGT6::saveEveryWhere(context);
    }

    static caption_data = [
        ["begin_time_ms": 1200,"text": "GT_VET10_END_9"],
        ["begin_time_ms": 4200, "text": "GT_VET10_END_10"],
        ["begin_time_ms": 8500, "text": "GT_VET10_END_11"],
        ["begin_time_ms": 12000, "text": "GT_VET10_END_12"],
        ["begin_time_ms": 14300, "text": ""],
    ];

    method startCaption(context)
    {
        context.wait(1.0);

        self.start_time = main::pdistd::GetSystemTimeMicroSecond();
        self.caption_index = 0;
        self.next_time = caption_data[0]["begin_time_ms"];

        if (self.watcher == nil)
        {
            self.watcher = WatcherUtil::Create(context, onTick, 1);
        }

        if (main::pdistd::MLocale::getLanguage() == "DE")
        {
            SoundUtil::PlaySGXStreamDirectSGD("/sound_gt/guide/gt6/vettel/DE/ed_x_challenge.sgd", SoundUtil::GetNarrationVolume())
        }
        else
        {
            SoundUtil::PlaySGXStreamDirectSGD("/sound_gt/guide/gt6/vettel/EN/ed_x_challenge.sgd", SoundUtil::GetNarrationVolume())
        }
    }

    method onTick(context)
    {
        if (self.watcher == nil)
            return;

        var elapsed_time_ms = (main::pdistd::GetSystemTimeMicroSecond() - self.start_time) / 1000;
        if (self.next_time <= elapsed_time_ms && self.caption_index < caption_data.size)
        {
            var text = caption_data[self.caption_index]["text"];
            if (text != nil)
            {
                XChallenge_GrandEndScript.Message.text = context.translate(ROOT, "Tutorial", text);
                self.caption_index++;

                if (self.caption_index < caption_data.size)
                    self.next_time = caption_data[self.caption_index]["begin_time_ms"];
            }
            else
            {
                XChallenge_GrandEndScript.Message.text = "";
            }
        }

        if (self.open_mode == OpenMode::X_CHALLENGE_GRAND_END &&
            elapsed_time_ms > 26000 && !self.to_close)
            close();
    }

    method onSceneCommandEnd(context, args)
    {
        if (self.open_mode == OpenMode::X_CHALLENGE_GRAND_END)
        {
            XChallenge_GrandEndScript.visible = true;
            startCaption(context);
        }
        else
        {
            SoundUtil::MenuBGMCrossfadeGroup("ed_short", 0.0, 1.0, SoundUtil::REPEAT_OFF);
        }

        self.can_skip = true;
        if (self.open_mode == OpenMode::CAREER_SHORT_END)
            Message_CareerShortEnd.visible = true;

        if (self.open_mode == OpenMode::X_CHALLENGE_SHORT_END)
            Message_XChallengeShortEnd.visible = true;
    }

    method onActivate(context)
    {
        if (!self.can_skip)
            return EVENTRESULT_FILTER;

        if (self.open_mode != OpenMode::CAREER_GRAND_END && self.open_mode != OpenMode::X_CHALLENGE_GRAND_END)
            close();

        return EVENTRESULT_FILTER;
    }

    method onCancel(context)
    {
        if (!self.can_skip)
            return EVENTRESULT_FILTER;

        if (self.open_mode != OpenMode::CAREER_GRAND_END && self.open_mode != OpenMode::X_CHALLENGE_GRAND_END)
            close();

        return EVENTRESULT_FILTER;
    }

    method onKeyPress(context, event)
    {
        switch (event.keysym)
        {
            case CELL_PAD_CTRL_START:
                if (PROJECT::IsDevelop(context))
                {
                    sound.play("ok");
                    if (self.open_mode == OpenMode::CAREER_GRAND_END)
                        MovieFace.end_movie(context);
                    else
                        close();
                }
                break;
        }

        return EVENTRESULT_CONTINUE;
    }

    module MovieFace
    {
        attribute is_finish;

        method play_movie(context)
        {
            self.audio_level = SoundUtil::GetMovieVolume();
            self.audio_track = -1;
            self.is_finish = false;

            var movie = MENUDB.query1("SELECT * FROM t_movie WHERE Name = 'ENDING'");
            if (movie == nil)
            {
                self.end_movie(context);
                return;
            }

            var movie_file = "/movies/%{movie.FileName}";
            if (!pdistd::Exist("%{movie_file}.pam"))
            {
                self.end_movie(context);
                return;
            }

            var key = Tv2.decodeContentsKey(movie.Key);
            self.setKey(key);
            self.load(context, movie_file);
        }

        method stop_movie(context)
        {
            self.unload();
            self.is_finish = false;
        }

        method end_movie(context)
        {
            self.pause(true);
            context.wait();
            context.wait();
            self.is_finish = nil;

            ROOT.close(context);
        }

        method onMovieFinish(context)
        {
            if (ROOT.isClosed())
                return;

            if (self.is_finish != nil && !self.is_finish)
            {
                self.is_finish = true;
                self.end_movie(context);
            }
        }
    }

    module SceneFace
    {
        attribute command_end_func;
        attribute scene_end_func;
        attribute command_end_func_args;
        attribute scene_end_func_args;

        method startSceneScript(scene_script, cp, command_end_func, command_end_func_args, scene_end_func, scene_end_func_args)
        {
            self.command_end_func = command_end_func;
            self.command_end_func_args = command_end_func_args;
            self.scene_end_func = scene_end_func;
            self.scene_end_func_args = scene_end_func_args;

            var dp = GAME_STATUS.user_profile.residence.getPlayer(0);
            SceneFaceUtil::loadScene(self, scene_script, cp, dp);
            SceneFaceUtil::SetSignalHandler(self, SceneFaceUtil::HandleType::SCENE_START, self.on_signal);
        }

        method on_signal(context, enum, param)
        {
            if (enum == SceneFaceUtil::HandleType::SCENE_START)
            {
                if (self.command_end_func != nil)
                {
                    self.command_end_func(context, self.command_end_func_args);
                    self.command_end_func = nil;
                }

                self.command_end_func_args = nil;
            }
        }

        method onFinalize(context)
        {
            self.command_end_func = nil;
            self.command_end_func_args = nil;
            self.scene_end_func = nil;
            self.scene_end_func_args = nil;
        }
    }
}