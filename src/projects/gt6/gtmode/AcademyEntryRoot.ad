













module ROOT
{
    hidden.visible = false;

    attribute data;
    attribute modal_page;
    attribute closed;
    attribute result;

    class Data
    {
        attribute full_name;
        attribute year;
        attribute month;
        attribute day;
        attribute driver_license;
        attribute phone_number;
        attribute mail_address;
    }

    function trim(s)
    {
        var ws = " \n\t\v\r\f";
        ws += "ã€€"; // IDEOGRAPHIC SPACE U+3000
        s = s.trim(ws);
        return s;
    }

    function verifyImpl(context)
    {
        var full_name = trim(DialogFrame::Pane::ScrolledBody::clip::space::FullName::Text::input.value);
        if (full_name == "")
            return false;

        var phone = trim(DialogFrame::Pane::ScrolledBody::clip::space::Phone::Text::input.value);
        if (phone == "")
            return false;

        var mail = trim(DialogFrame::Pane::ScrolledBody::clip::space::Mail::Text::input.value);
        if (mail == "")
            return false;
    
        return true;
    }

    function verify(context)
    {
        var res = verifyImpl(context);
        DialogFrame::Pane::Foot::Buttons::OK.insensitive = !res;
    }

    method open(context, data)
    {
        self.data = data;
        self.result = nil;
        self.closed = false;

        DialogFrame.appear();
        self.modal_page = SequenceUtil::ModalPage(context, ROOT);
        self.modal_page.open();

        var res = self.result;
        self.result = nil;
        return res;
    }

    method close(context)
    {
        if (self.closed)
            return;

        self.closed = true;

        if (self.modal_page != nil)
        {
            var delay_time = DialogFrame.hide();
            self.modal_page.close(delay_time);
            self.modal_page = nil;
        }
    }

    method onInitialize(context)
    {
        DialogFrame::Pane::ScrolledBody::clip::space::DateOfBirth.initialize(context);

        OptionMenuUtil::initialize(context, 
            self, 
            DialogFrame::Pane::ScrolledBody::clip::space::DriverLicense::OptionMenu,
            hidden::PulldownItem,
            ["NOT_HAVING", "HAVING"],
            "Eula");

        DialogFrame::Pane::ScrolledBody::clip::space::DriverLicense::OptionMenu.setIndex(context, 0);

        var year_index = 0;
        var month_index = 0;
        var day_index = 0;
        
        if (self.data != nil)
        {
            DialogFrame::Pane::ScrolledBody::clip::space::FullName::Text::input.value = self.data.full_name;
            DialogFrame::Pane::ScrolledBody::clip::space::DriverLicense::OptionMenu.setIndex(context, self.data.driver_license);
            DialogFrame::Pane::ScrolledBody::clip::space::Phone::Text::input.value = self.data.phone_number;
            DialogFrame::Pane::ScrolledBody::clip::space::Mail::Text::input.value = self.data.mail_address;

            year_index = DialogFrame::Pane::ScrolledBody::clip::space::DateOfBirth.yyyy_list.indexOf(self.data.year);
            month_index = DialogFrame::Pane::ScrolledBody::clip::space::DateOfBirth.mm_list.indexOf(self.data.month);
            day_index = self.data.day - 1;

            self.data = nil;
        }
        else
        {
            var birthday = NP.getBirthday();
            if (birthday != nil)
            {
                year_index = DialogFrame::Pane::ScrolledBody::clip::space::DateOfBirth.yyyy_list.indexOf(birthday.year);
                month_index = DialogFrame::Pane::ScrolledBody::clip::space::DateOfBirth.mm_list.indexOf(birthday.month);
                day_index = birthday.day - 1;
            }
        }

        DialogFrame::Pane::ScrolledBody::clip::space::DateOfBirth::OptionMenuYear.setIndex(context, year_index);
        DialogFrame::Pane::ScrolledBody::clip::space::DateOfBirth::OptionMenuMonth.setIndex(context, month_index);
        DialogFrame::Pane::ScrolledBody::clip::space::DateOfBirth::OptionMenuDay.setIndex(context, day_index);

        verify(context);
    }

    method onFinalize(context)
    {
        DialogFrame::Pane::ScrolledBody::clip::space::DateOfBirth.finalize(context);
        OptionMenuUtil::finalize(context, DialogFrame::Pane::ScrolledBody::clip::space::DriverLicense::OptionMenu);
    }

    method onCancel(context)
    {
        sound.play("cancel");
        ROOT.setFocus(DialogFrame::Pane::Foot::Buttons::Cancel);
        return EVENTRESULT_FILTER;
    }

    module DialogFrame::Pane::ScrolledBody::clip::space::FullName::Text::input
    {
        method onFocusLeave(context, event)
        {
            verify(context);
            return EVENTRESULT_CONTINUE;
        }
    }

    module DialogFrame::Pane::ScrolledBody::clip::space::DateOfBirth
    {
        attribute yyyy_list;
        attribute mm_list;

        method initialize(context)
        {
            OptionMenuDay.setIndex(context, 0);
            self.yyyy_list = [];

            for (var i = 1900; i <= 2015; ++i)
                self.yyyy_list.push(i);

            OptionMenuUtil::initialize(context, self, OptionMenuYear, hidden::PulldownItem, self.yyyy_list);
            OptionMenuYear.setIndex(context, 0);


            self.mm_list = [];
            var month_list = [];
            for (var i = 1; i <= 12; ++i)
            {
                self.mm_list.push(i);
                month_list.push("MONTH_SHORT_%02d".format(i));
            }

            OptionMenuUtil::initialize(context, self, OptionMenuMonth, hidden::PulldownItem, month_list, "DateTime");
            OptionMenuMonth.setIndex(context, 0);
        }

        method finalize(context)
        {
            OptionMenuUtil::finalize(context, OptionMenuYear);
            OptionMenuUtil::finalize(context, OptionMenuMonth);
            OptionMenuUtil::finalize(context, OptionMenuDay);
        }

        method isLeapYear(year)
        {
            return (year % 4 == 0) && (year % 100 != 0) || (year % 400 == 0);
        }

        method setupDay(context)
        {
            if (self.yyyy_list == nil || self.mm_list == nil)
                return;

            var day_index = OptionMenuDay.index;
            var dd_list = [];
            var day_list = [];

            var year = self.yyyy_list[OptionMenuYear.index];
            var month = self.mm_list[OptionMenuMonth.index];

            var max_day_def = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
            var max_day = max_day_def[month];
            if (month == 2 && isLeapYear(year))
                ++max_day;

            for (var i = 1; i <= max_day; ++i)
            {
                dd_list.push(i);
                day_list.push("DAY_%02d".format(i));
            }

            OptionMenuUtil::finalize(context, OptionMenuDay);
            OptionMenuUtil::initialize(context, self, OptionMenuDay, hidden::PulldownItem, day_list, "DateTime");
            OptionMenuDay.setIndex(context, day_index);
        }

        module OptionMenuYear
        {
            attribute previous_index = -1;

            method onValueChanged(context)
            {
                __prototype__::onValueChanged(context);
                if (self.previous_index != self.index)
               {
                   self.previous_index = self.index;
                   DateOfBirth.setupDay(context);
               } 
            }
        }

        module OptionMenuMonth
        {
            attribute previous_index = -1;

            method onValueChanged(context)
            {
                __prototype__::onValueChanged(context);
                if (self.previous_index != self.index)
                {
                   self.previous_index = self.index;
                   DateOfBirth.setupDay(context);
                } 
            }
        }
    }

    module DialogFrame::Pane::ScrolledBody::clip::space::Phone::Text::input
    {
        method onFocusLeave(context, event)
        {
            verify(context);
            return EVENTRESULT_CONTINUE;
        }
    }

    module DialogFrame::Pane::ScrolledBody::clip::space::Mail::Text::input
    {
        method onFocusLeave(context, event)
        {
            verify(context);
            return EVENTRESULT_CONTINUE;
        }
    }

    module DialogFrame::Pane::Foot::Buttons::OK
    {
        method makeResult(context)
        {
            var data = Data();
            data.full_name = DialogFrame::Pane::ScrolledBody::clip::space::FullName::Text::input.value;
            data.year = DialogFrame::Pane::ScrolledBody::clip::space::DateOfBirth.yyyy_list[DialogFrame::Pane::ScrolledBody::clip::space::DateOfBirth::OptionMenuYear.index];
            data.month = DialogFrame::Pane::ScrolledBody::clip::space::DateOfBirth.mm_list[DialogFrame::Pane::ScrolledBody::clip::space::DateOfBirth::OptionMenuMonth.index];
            data.day = DialogFrame::Pane::ScrolledBody::clip::space::DateOfBirth::OptionMenuDay.index + 1;
            data.driver_license = DialogFrame::Pane::ScrolledBody::clip::space::DriverLicense::OptionMenu.index;
            data.phone_number = DialogFrame::Pane::ScrolledBody::clip::space::Phone::Text::input.value;
            data.mail_address = DialogFrame::Pane::ScrolledBody::clip::space::Mail::Text::input.value;
            return data;
        }

        method onActivate(context)
        {
            sound.play("ok");
            var result = makeResult(context);
            var text = manager.translate("Eula", "QUERY_ENTRY_FORM").build(result.full_name,
                manager.translate("DateTime", "FORMAT_DATE").build(result.year, result.month, result.day),
                manager.translate("Eula", result.driver_license ? "HAVING" : "NOT_HAVING"),
                result.phone_number,
                result.mail_address);

            if (!DialogUtil::openConfirmDialog(context, DialogUtil::YESNO, text))
                return EVENTRESULT_FILTER;

            ROOT.result = result;
            ROOT.close(context);

            return EVENTRESULT_FILTER;
        }
    }

    module DialogFrame::Pane::Foot::Buttons::Cancel
    {
        method onActivate(context)
        {
            sound.play("cancel");
            ROOT.close(context);
            return EVENTRESULT_FILTER;
    
        }
    }
}