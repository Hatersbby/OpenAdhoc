






module ROOT
{
    attribute popup;
    attribute closed = false;
    attribute sRoom;
    attribute result;
    attribute sEventHandler;

    method open(context, room, handler)
    {
        self.result = false;
        self.closed = false;
        self.sRoom = room;
        self.sEventHandler = handler;

        self.popup = main::SequenceUtil::ModalPage(context, ROOT);

        self.popup.open();
        return self.result;
    }

    method close(context)
    {
        if (self.closed)
            return;

        self.closed = true;

        if (ROOT.popup != nil)
        {
            ROOT.popup.close();
            ROOT.popup = nil;
        }
    }

    method abort(context)
    {
        close(context);
        ContextMain.enableInput();
    }

    method onGetExternalRoomMemberList(context, type, error, requestId, arg, args)
    {
        if (error != pdistd::LobbyError::None)
            return;

        var memberList = Lobby.getExternalRoomMemberList(self.sRoom["roomId"]);
        if (memberList == nil || memberList.size == 0)
            return;

        var room = self.sRoom;
        var text = room["ownerName"];

        foreach (var member in memberList)
        {
            if (!member["isRoomOwner"])
                text += "\n%s".format(member["name"]);
        }

        ROOT::Popup::Pane::RoomMember.setMemberListText(text);
    }

    method reflectRoomInfo(context)
    {
        var room = self.sRoom;
        var pane = Popup::Pane;
        pane.RoomMember.setMemberNum(context, room["memberNum"], room["maxSlot"]);

        self.sEventHandler.setCallback(context, pdistd::LobbyEventType::GetExternalRoomMemberListResult,
            onGetExternalRoomMemberList, self);

        context.pushEvent(menu::MScriptEvent(context, ROOT, "requestMemberList"));
    }

    method onInitialize(context)
    {
        var room = self.sRoom;
        Popup::Pane.initialize(context);

        if (room != nil)
            reflectRoomInfo(context);

        return EVENTRESULT_FILTER;
    }

    method requestMemberList(context)
    {
        var room = self.sRoom;
        var ret = Lobby.getExternalRoomMemberListRequest(room["roomId"]);
        if (ret < 0)
            ;

    }

    method onFinalize(context)
    {
        self.sEventHandler.unsetCallback(context, pdistd::LobbyEventType::GetExternalRoomMemberListResult,
            onGetExternalRoomMemberList);

        self.sRoom = nil;
        self.sEventHandler = nil;
    }

    method onCancel(context)
    {
        main::sound.play("cancel");
        self.close(context);
        return EVENTRESULT_FILTER;
    }

    module Popup::Pane
    {
        method initialize(context)
        {
            var title = manager.translate(ROOT, "OPEN_LOBBY");
            Head::label.text = title;
            RoomMember.initialize(context);
        }

        module RoomMember
        {
            method initialize(context)
            {
                GroupHeader::HBox::Num::TextFace.text = "--/--";
                GroupHeader::HBox::Num::TextFace.visible = true;
                GroupHeader::HBox::Num::MemberMax.text = "";
                GroupHeader::HBox::Num::MemberMax.visible = false;
                self.setMemberListText("");
            }

            method setMemberListText(text)
            {
                TextBox::Text::label.text = text;
            }

            method setMemberNum(context, num, max)
            {
                var label = "%2d/%2d".format(num, max);
                GroupHeader::HBox::Num::TextFace.text = label;
                GroupHeader::HBox::Num::MemberMax.text = label;
                GroupHeader::HBox::Num::TextFace.visible = num != max;
                GroupHeader::HBox::Num::MemberMax.visible = num == max;
            }

            module Buttons::OK
            {
                method onActivate(context)
                {
                    main::sound.play("ok");
                    ROOT.result = true;
                    ROOT.close(context);
                    return EVENTRESULT_FILTER;
                }
            }
        }
    }
}