













module ROOT
{
    hidden.visible = false;

    attribute sModalPage;
    attribute sData;
    attribute sResults;
    attribute sActivatedNum;
    attribute sConditionList;
    
    static sOrgPaneX;
    static sOrgPaneW;

    class Data
    {
        attribute title_;
        attribute translate_page_;
        attribute extra_translate_page_;
        attribute file_name_;
        attribute course_code_;
        attribute course_name_;
        attribute date_time_;
        attribute enable_multi_;
        attribute select_max_;
        attribute initial_selected_indices_;
        attribute cb_init_item_;
        attribute cb_focus_item_;
        attribute disable_cancel_;
        attribute window_x_;
        attribute window_w_;
        attribute window_y_;
        attribute frame_red_bring_;

        method __init__()
        {
            enable_multi_ = false;
            select_max_ = 1;
            disable_cancel_ = false;
            window_x_ = -1;
            window_w_ = ROOT::sOrgPaneW;
            window_y_ = -1;
            frame_red_bring_ = true;
        }
    }

    method onRealize(context)
    {
        ROOT::sOrgPaneW = DialogFrame::Pane.w;
    }

    method open(context, data)
    {
        self.sData = data;

        DialogFrame::Pane.minimum_width = data.window_w_;
        DialogFrame::Pane.x = (ROOT.w - data.window_w_) / 2;

        if (data.window_x_ >= 0)
            DialogFrame::Pane.x = data.window_x_;

        if (data.window_y_ >= 0)
        {
            DialogFrame::Pane.pack_expand_y = false;
            DialogFrame::Pane.y = data.window_y_;
        }

        self.sConditionList = Array(data.file_name_.size);
        for (var i = 0; i < self.sConditionList.size; i++)
        {
            self.sConditionList[i] = false;
        }

        if (data.enable_multi_)
        {
            if (data.initial_selected_indices_ != nil)
            {
                for (var i = 0; i < data.initial_selected_indices_.size; i++)
                {
                    self.sConditionList[data.initial_selected_indices_[i]] = true;
                }

                self.sActivatedNum = data.initial_selected_indices_.size;
            }
            else
                self.sActivatedNum = 0;
        }

        self.sModalPage = SequenceUtil::ModalPage(context, ROOT);
        self.sModalPage.open();

        var results = self.sResults;
        self.sData = nil;
        self.sResults = nil;
        self.sActivatedNum = nil;
        self.sConditionList = nil;

        return results;
    }

    method close(context, selected_list)
    {
        if (self.sModalPage != nil)
        {
            self.sModalPage.close();
            self.sModalPage = nil;
            self.sResults = selected_list;
        }
    }

    method abort(context)
    {
        if (self.sModalPage != nil)
        {
            self.close(context, nil);
        }
    }

    method initialize_listbox(context)
    {
        var file_name = ROOT.sData.file_name_;
        var enable_multi = ROOT.sData.enable_multi_;

        hidden::Item::Slit.visible = enable_multi;

        var listbox = DialogFrame::Pane::Body::SBox::ListBox;
        listbox.setItemCount(file_name.size);
        listbox.setItemTemplate(context, hidden::Item);

        if (!enable_multi)
        {
            var indices = ROOT.sData.initial_selected_indices_;
            if (indices != nil && indices.size > 0)
                listbox.focus_index = indices[0];
        }

        for (var i = 0; i < file_name.size; ++i)
        {
            var item = listbox.getItemWidget(i, context);
            item.initialize(context, 
                ROOT.sData.file_name_[i],
                ROOT.sData.course_code_[i],
                ROOT.sData.course_name_[i],
                ROOT.sData.date_time_[i],
                ROOT.sConditionList[i])
        }

        DialogFrame::Pane::Foot.visible = enable_multi;
    }

    method resolve_window_y(context)
    {
        var file_name = ROOT.sData.file_name_;
        var item_num = file_name.size;
        var item_h = hidden::Item.h;
        if (item_num > 6)
        {
            item_num = 6;
            DialogFrame::Pane::Body::SBox::scrollbar.display_policy = "automatic";
        }
        else
        {
            DialogFrame::Pane::Body::SBox::scrollbar.display_policy = "never";
        }

        var item_total_h = item_num * item_h;
        DialogFrame::Pane::Body::SBox::ListBox.h = item_total_h;

        var adj = main::menu::MAdjustment();
        DialogFrame::Pane::Body::SBox::scrollbar.adjustment = adj;
        DialogFrame::Pane::Body::SBox::ListBox.v_adjustment = adj;
    }

    method onInitialize(context)
    {
        var data = self.sData;
        if (data.title_ != nil)
        {
            if (data.extra_translate_page_ != nil)
            {
                DialogFrame::Pane::Head::label.text = context.translate(ROOT, data.extra_translate_page_, data.title_);
            }
            else
            {
                DialogFrame::Pane::Head::label.text = data.title_;
            }
        }

        initialize_listbox(context);
        resolve_window_y(context);

        ROOT.setFocus(DialogFrame::Pane::Body::SBox::ListBox);
    }

    method onFinalize(context)
    {
        var listbox = DialogFrame::Pane::Body::SBox::ListBox;
        listbox.setItemCount(0);
    }

    method onCancel(context)
    {
        if (self.sData.disable_cancel_)
            return EVENTRESULT_FILTER;

        main::sound.play("cancel");
        self.close(context, nil);
        return EVENTRESULT_FILTER;
    }

    method isActivate(index)
    {
        return self.sConditionList[index];
    }

    method activate(index)
    {
        var item = DialogFrame::Pane::Body::SBox::ListBox.getItemWidget(index);
        if (item != nil)
        {
            item.Slit.active = true;
        }

        self.sConditionList[index] = true;
    }

    method deactivate(index)
    {
        var item = DialogFrame::Pane::Body::SBox::ListBox.getItemWidget(index);
        if (item != nil)
        {
            item.Slit.active = false;
        }

        self.sConditionList[index] = false;
    }

    module DialogFrame::Pane::Body::SBox::ListBox
    {
        method onActivate(context)
        {
            var fidx = self.focus_index;
            var focus_item = self.getItemWidget(fidx, context);

            var enable_multi = ROOT.sData.enable_multi_;

            if (enable_multi)
            {
                if (ROOT.isActivate(fidx))
                {
                    main::sound.play("cancel");
                    ROOT.deactivate(fidx);
                    ROOT.sActivatedNum--;
                }
                else if (ROOT.sActivatedNum >= ROOT.sData.select_max_)
                {
                    main::sound.play("disable");
                }
                else
                {
                    main::sound.play("ok");
                    ROOT.activate(fidx);
                    ROOT.sActivatedNum++;
                }
            }
            else
            {
                main::sound.play("ok");
                var file_name = ROOT.sData.file_name_;
                ROOT.close(context, [fidx]);
            }

            return EVENTRESULT_FILTER;
        }

        method onKeyPress(context, event)
        {
            switch (event.keysym)
            {
                case CELL_PAD_CTRL_L3_LEFT:
                    if (self.focus_index != 0)
                        main::sound.play("cursor");
                    self.decIndex(5);
                    return EVENTRESULT_FILTER;

                case CELL_PAD_CTRL_L3_RIGHT:
                    if (self.focus_index != DialogFrame::Pane::Body::SBox::ListBox.getItemCount() - 1)
                        main::sound.play("cursor");
                    self.incIndex(5);
                    return EVENTRESULT_FILTER;
            }

            return EVENTRESULT_CONTINUE;
        }

        method onFocusNotify(context, index)
        {
            if (ROOT.sData.cb_focus_item_ != nil)
            {
                var file_name = ROOT.sData.file_name_;
                ROOT.sData.cb_focus_item_(context, index, file_name[index]);
            }
        }
    }

    module hidden::Item
    {
        method initialize(context, file_name, course_code, course_name, date_time, active)
        {
            if (ROOT.sData.cb_init_item_ != nil)
            {
                ROOT.sData.cb_init_item_(context, self, file_name);
            }
            else
            {
                if (course_code == nil)
                    self.logo.visible = false;
                else
                {
                    var course_info = SPECDB.query1("SELECT Map, Logo FROM COURSE WHERE ID=?", [course_code]);
                    self.logo.image_path = "piece/gt6/course_logo_M/%s.img".format(course_info.Logo);
                }

                self.filename.text = file_name.toString();
                self.course.text = course_name.toString();

                if (date_time == nil)
                {
                    self.date.visible = false;
                }
                else
                {
                    self.date.text = date_time.toString();
                }
            }

            Slit.active = active;
            self.visible = true;
        }
    }

    module DialogFrame::Pane::Foot::OK
    {
        function onFocusEnter(context)
        {
            ToolTip::tip.value = "";
            return 1;
        }

        function onActivate(context)
        {
            main::sound.play("ok");

            var file_name = ROOT.sData.file_name_;
            var results = [];
            for (var i = 0; i < file_name.size; i++)
            {
                var item = DialogFrame::Pane::Body::SBox::ListBox.getItemWidget(i);
                if (item != nil && ROOT.isActivate(i))
                    results.push(i);
            }

            ROOT.close(context, results);
            return EVENTRESULT_FILTER;
        }
    }

    module DialogFrame::Pane::Foot::Cancel
    {
        function onFocusEnter(context)
        {
            ToolTip::tip.value = "";
            return 1;
        }

        function onActivate(context)
        {
            main::sound.play("ok");

            ROOT.close(context, nil);
            return EVENTRESULT_FILTER;
        }
    }
}