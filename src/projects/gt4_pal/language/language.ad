module LanguageProject
{
    function openConfirmDialog(context, type, message)
    {
        var page = context.getCommonPage("ConfirmDialog");

        if (page == nil)
			;

        page["open"](context, type, message);
		return;
    }

	function openProcessDialog(context, message, func, args)
	{
		var page = context.getCommonPage("ProcessDialog");
	
		if (page == nil)
			;
	
		page["open"](context, message, func, args);
		return;
	}
	
	
	function lastProcessError(context)
	{
		var page = context.getCommonPage("ProcessDialog");
	
		if (page == nil)
			;
	
		page["last_error_code"];
		return;
	}
	
	
	function openProgressDialog(context, message, func)
	{
		var page = context.getCommonPage("ProgressDialog");
	
		if (page == nil)
			;
	
		page["open"](context, message, func);
		return;
	}
	
	
	function closeProgressDialog(context)
	{
		var page = context.getCommonPage("ProgressDialog");
	
		if (page == nil)
			;
	
		page["close"](context);
		return;
	}
	
	
	function setProgress(context, p)
	{
		var page = context.getCommonPage("ProgressDialog");
	
		if (page == nil)
			;
	
		page["setProgress"](p);
		return;
	}
	
	
	function start_page(context, next_page)
	{
		if (next_page != nil)
		{
			if (context != nil)
			{
				if (context.transition != nil)
					context.transition.panOutIn(context);

				context.startPage(next_page);
			}
		}
		else 
		{
			if (context != nil)
			{
				if (context.transition != nil)
				{
					context.transition.panOut(context);
					context.transition.syncOut(context);
				}

				context.finish();
			}
		}
	}
	
	
	function onLoad(context)
	{
		main::sound.load();
		context.createRenderContext(1);
		var render_context = context.getRenderContext(0);
		render_context.transition = main::menu::MColorTransition();
		render_context.transition.panIn(render_context);
		LanguageRoot::onLoad(render_context);
		render_context.startPage(LanguageRoot);
	}

	function onUnload(context)
	{
		main::sound.unload();
	}
}
