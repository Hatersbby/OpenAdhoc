













module PROJECT::ROOT
{
    module SoundType
    {
        static MONOPHONIC = 0;
        static STEREO = 1;
        static PROLOGIC2 = 2;
    }

    static SoundTypeString = ["MONOPHONIC", "STEREO", "PROLOGIC2"];

    function open(context)
    {
        start_page(context, ROOT);
    }

    function close(context)
    {
        start_page(context, OptionRoot);
    }

    function reflect(context)
    {
        var option = main::game.option;
        Pane::MenuBGM::slider.index = option.menu_bgm_volume_raw / 8;
        Pane::MenuSE::slider.index = option.menu_se_volume_raw / 8;
        Pane::RaceBGM::slider.index = option.race_bgm_volume_raw / 8;
        Pane::RaceSE::slider.index = option.race_se_volume_raw / 8;
        Pane::ReplayBGM::slider.index = option.replay_bgm_volume_raw / 8;
        Pane::ReplaySE::slider.index = option.replay_se_volume_raw / 8;
        Pane::SlideShowBGM::slider.index = option.slide_bgm_volume_raw / 8;
        Pane::Type::OptionMenu.setIndex(context, SoundType[option.sound_type]);
        Pane::AC3::OptionMenu.setIndex(context, 1 - option.enableAC3);
        Pane::Narration::OptionMenu.setIndex(context, 1 - option.narration);
    }

    function apply(context)
    {
        main::game.setNeedSave();
        var option = main::game.option;

        option.menu_bgm_volume_raw = Pane::MenuBGM::slider.index * 8;
        option.menu_se_volume_raw = Pane::MenuSE::slider.index * 8;
        option.race_bgm_volume_raw = Pane::RaceBGM::slider.index * 8;
        option.race_se_volume_raw = Pane::RaceSE::slider.index * 8;
        option.replay_bgm_volume_raw = Pane::ReplayBGM::slider.index * 8;
        option.replay_se_volume_raw = Pane::ReplaySE::slider.index * 8;
        option.slide_bgm_volume_raw = Pane::SlideShowBGM::slider.index * 8;
        option.sound_type = SoundTypeString[Pane::Type::OptionMenu.index];
        option.enableAC3 = 1 - Pane::AC3::OptionMenu.index;
        option.narration = 1 - Pane::Narration::OptionMenu.index;
        option.apply();
    }

    function onLoad(context)
    {
        var code = main::menu::MSystem::GetRegionCode();
        if (code == "jp" && main::menu::MSystem::GetVersionBranch() != "beta")
            Pane::Narration.visible = true;

        if (code == "us")
            Pane.y += 32;
        else
            Pane::AC3.visible = true;
    }

    function onInitialize(context)
    {
        Pane::AC3::label.adjustScale();
        Pane::Type::OptionMenu::popup::vbox::Dolby::label.adjustScale();

        ROOT.setFocus(Pane::MenuBGM::slider);
        reflect(context);

        setupSlider(Pane::MenuBGM::slider, 1, context.translate(ROOT, "Off"));
        setupSlider(Pane::RaceBGM::slider, 1, context.translate(ROOT, "Off"));
        setupSlider(Pane::ReplayBGM::slider, 1, context.translate(ROOT, "Off"));
        setupSlider(Pane::SlideShowBGM::slider, 1, context.translate(ROOT, "Off"));
        setupSlider(Pane::MenuSE::slider, 1, context.translate(ROOT, "Off"));
        setupSlider(Pane::RaceSE::slider, 1, context.translate(ROOT, "Off"));
        setupSlider(Pane::ReplaySE::slider, 1, context.translate(ROOT, "Off"));
    }

    function onFinalize(context)
    {

    }

    function onCancel(context)
    {
        main::sound.play("cancel");
        close(context);
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::Pane::MenuBGM::slider
{
    function onValueChanged(context)
    {
        setupSlider(slider, 1, context.translate(ROOT, "Off"));
    }
}

module PROJECT::ROOT::Pane::MenuSE::slider
{
    function onValueChanged(context)
    {
        setupSlider(slider, 1, context.translate(ROOT, "Off"));
    }
}

module PROJECT::ROOT::Pane::RaceBGM::slider
{
    function onValueChanged(context)
    {
        setupSlider(slider, 1, context.translate(ROOT, "Off"));
    }
}

module PROJECT::ROOT::Pane::RaceSE::slider
{
    function onValueChanged(context)
    {
        setupSlider(slider, 1, context.translate(ROOT, "Off"));
    }
}

module PROJECT::ROOT::Pane::ReplayBGM::slider
{
    function onValueChanged(context)
    {
        setupSlider(slider, 1, context.translate(ROOT, "Off"));
    }
}

module PROJECT::ROOT::Pane::ReplaySE::slider
{
    function onValueChanged(context)
    {
        setupSlider(slider, 1, context.translate(ROOT, "Off"));
    }
}

module PROJECT::ROOT::Pane::SlideShowBGM::slider
{
    function onValueChanged(context)
    {
        setupSlider(slider, 1, context.translate(ROOT, "Off"));
    }
}

module PROJECT::ROOT::Pane::Buttons::Cancel
{
    function onActivate(context)
    {
        main::sound.play("ok");
        close(context);
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::Pane::Buttons::OK
{
    function onActivate(context)
    {
        main::sound.play("ok");
        apply(context);
        close(context);
        return EVENTRESULT_FILTER;
    }
}