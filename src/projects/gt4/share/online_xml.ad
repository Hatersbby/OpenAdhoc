static sEventName = ["ArcadeEvent", "MyCarEvent", "TimeTrialEvent"];
static sConfigName = ["GameConfig", "LobbyConfig", "ChatConfig", "FixedPhraseConfig", "TAInfo"];
static sDownloadEnable = nil;
if (main["DownloadSourceMFS"] == nil)
    sDownloadEnable = 1;
else
    sDownloadEnable = main::DownloadSourceMFS;

function switchDownloadSource()
{
    sDownloadEnable.value = 1 - sDownloadEnable;

    var mes = "download switch to " + (sDownloadEnable ? "MFS" : "HOST");

    if (main["DownloadSourceMFS"] != nil)
    {
        main::DownloadSourceMFS.value = sDownloadEnable;
    }

    return sDownloadEnable;
}

function _get_path(type, lang, fs, is_event_list)
{
    var result = "";

    if (is_event_list)
    {
        result = lang + sEventName[type] + ".xmlz";
    }
    else
    {
        var region = main::menu::MSystem::GetRegionCode();
        var name = sConfigName[type];

        if (name == "GameConfig")
        {
            if (region != "jp")
            {
                name = region + "_" + name;
            }
            result = name + ".xmlz";
        }
        else
        {
            result = lang + name + ".xmlz";
        }
    }

    switch(fs)
	{
		case 0:
			break;
		case 1:
			result = "/projects/online/xml/" + result;
			break;
		case 2:
		{
			result = "" + result;
			break;
		}
	}
    return result;
}

function get_event_file(context, filename)
{
    var lang = main::game.option.language + "_";
    var buf;

    if (sDownloadEnable)
        buf = main::network.fileGet(_get_path(filename, lang, 0, 1));

    if (buf == nil)
        buf = context.getUpdateContext().loadHostFile(_get_path(filename, lang, 2, 1));

    if (buf == nil)
        buf = context.getUpdateContext().loadFile(_get_path(filename, lang, 1, 1));

    return buf;
}

function DownloadEventList(context)
{
    var buf = nil;

    if (isTimeTrialNow())
        buf = get_event_file(context, 2);
    else if (isMyCarEventNow())
        buf = get_event_file(context, 1);
    else
        buf = get_event_file(context, 0);

    return buf;
}

function DownloadConfigList(context, type)
{
    var lang = main::game.option.language + "_";
    var buf = nil;

    if (sDownloadEnable)
        buf = main::network.fileGet(_get_path(type, lang, 0, 0));

    if (buf == nil)
        buf = context.getUpdateContext().loadHostFile(_get_path(type, lang, 2, 0));

    if (buf == nil)
        buf = context.getUpdateContext().loadFile(_get_path(type, lang, 1, 0));

    return buf;
}

function DownloadGameConfig(context)
{
    var type = 0;
    var lang = "";
    var buf;

    if (sDownloadEnable)
        buf = main::network.fileGet(_get_path(type, lang, 0, 0));

    if (buf == nil)
        buf = context.getUpdateContext().loadHostFile(_get_path(type, lang, 2, 0));

    if (buf == nil)
        buf = context.getUpdateContext().loadFile(_get_path(type, lang, 1, 0));

    return buf;
}

function getEventList(context)
{
    var buf = DownloadEventList(context);

    if (buf != nil)
    {
        var xml = main::menu::MXml();
        xml.parse(buf);

        var node = xml.result;
        node = node["Xml"][0];

        return [node["Event"], node["EventOld"]];
    }
    else
        return nil;
}

function getConfigList(context, type)
{
    var buf = DownloadConfigList(context, type);

    if (buf != nil && buf.size > 0)
    {
        var xml = main::menu::MXml();
        xml.parse(buf);

        var node = xml.result;
        var xml_node = node["Xml"][0];

        var config_node = nil;
        if (xml_node != nil)
        {
            config_node = xml_node["Configuration"][0];
        }

        return config_node;
    }
    
    return nil;
}

function getGameConfig(context)
{
    var buf = DownloadGameConfig(context);

    if (buf != nil)
    {
        var xml = main::menu::MXml();
        xml.parse(buf);

        var node = xml.result;
        node = node["Xml"][0];

        return node["Config"][0];
    }
    else
        return nil;
}

function getTAInfo(context)
{
    var buf = DownloadConfigList(context, 4);

    if (buf != nil)
    {
        var xml = main::menu::MXml();
        xml.parse(buf);

        var node = xml.result;
        node = node["Xml"][0];

        return node["Doc"][0].value;
    }
    else
        return nil;
}

function loadXmlNode(context, path)
{
    var buf = context.getUpdateContext().loadFile(path);

    var xml = main::menu::MXml();
    if (xml == nil)
        return nil;

    xml.parse(buf);

    var node = xml.result;
    node = node["Xml"][0];

    return node;
}

function setupEventImage(context, image, w)
{
    switch(image.getAttribute("from"))
	{
		case "embedded":
		{
			w.from_disk = 0;
			w.image_path = image.value;
			w.doInitialize(context);
			break;
		}
		case "disk":
		{
			w.from_disk = 1;
			w.image_path = image.value;
			w.doInitialize(context);
			break;
		}
		case "mfs":
		{
			var buf = main::network.fileGet(image.value);
			if (buf != nil)
			{
				w.image_chunk = buf;
				w.doInitialize(context);
			}
            break;
		}
	}
}

function makeRegulationFromEvent(event)
{
    var limited_regulation = Regulation();

    var regulation = event["Regulation"];
    if (regulation != nil)
    {
        regulation = regulation[0];

        var drivetrain = regulation["DriveTrain"];
        if (drivetrain != nil)
            limited_regulation.drivetrain = drivetrain[0].value;

        var aspiration = regulation["Aspiration"];
        if (aspiration != nil)
            limited_regulation.aspiration = aspiration[0].value;

        var cartype = regulation["CarType"];
        if (cartype != nil)
            limited_regulation.cartype = cartype[0].value;

        var tire = regulation["Tire"];
        if (tire != nil)
            limited_regulation.tiretype = tire[0].value;

        var need_ps = regulation["NeedPS"];
        if (need_ps != nil)
            limited_regulation.need_ps = need_ps[0].value.toInt();

        var limit_ps = regulation["LimitPS"];
		if (limit_ps != nil)
		{
			limited_regulation.limit_ps = limit_ps[0].value.toInt();
		}
	
		var need_price = regulation["NeedPrice"];
		if (need_price != nil)
		{
			limited_regulation.need_price = need_price[0].value.toInt();
		}
	
		var limit_weight = regulation["LimitWeight"];
		if (limit_weight != nil)
		{
			limited_regulation.limit_weight = limit_weight[0].value.toInt();
		}
	
		var need_weight = regulation["NeedWeight"];
		if (need_weight != nil)
		{
			limited_regulation.need_weight = need_weight[0].value.toInt();
		}
	
		var length = regulation["LimitLength"];
		if (length != nil)
		{
			limited_regulation.length = length[0].value.toInt();
		}

		var countries = regulation["Country"];
		if (countries != nil)
		{
			var country_list = [];
			for (var i = 0; i < countries.size; i++)
			{
				country_list.push(countries[i].value);
			}

			limited_regulation.country = country_list;
		}
		var years = regulation["Year"];
		if (years != nil)
		{
			var min = years[0].value.toInt();
			var max = years[1].value.toInt();
			limited_regulation.year = [min, max];
		}
	
		var carlist = regulation["Car"];
		if (carlist != nil)
		{
			var cl = Array(carlist.size);
			for (var i = 0; i < carlist.size; i++)
			{
				var val = carlist[i].value;
				if (val.beginWith("#"))
				{
					val = main::menu::MCarData::GetCarLabelByArray([0, val.substr(1).toInt()]);
				}
				cl[i] = val;
			}
			limited_regulation.carlist = cl;
		}
		
		var need_point = regulation["NeedOnlinePoint"];
		if (need_point != nil)
		{
			limited_regulation.need_point = need_point[0].value.toInt();
		}
	}
    
	return limited_regulation;
}