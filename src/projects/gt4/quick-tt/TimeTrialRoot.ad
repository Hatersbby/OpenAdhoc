module PROJECT::ROOT
{
	#include "../quick-share/icon.ad"
	#include "../quick-share/quick_tune.ad"

    var entryNum = 1;
    for (var i = 1; i <= entryNum; i++)
    {
        var widget = TimeTrialRoot["Grid" + i];
        setMoveActor(widget, 640 + (392 * 2 * i), 0, 0.15);
        widget.actor.out = false;
    }

	function onInitialize(context)
	{
#ifndef GT4O_US_BETA
		context.transition = main::menu::MColorTransition();
#endif

		var quick_work = main::menu::MQuickWork();
		if (quick_work.canReplay == false)
		{
			Buttons::Replay.visible = false;
			Buttons::SaveReplay.visible = false;
		}
		else
		{
			Buttons::Replay.visible = true;
			Buttons::SaveReplay.visible = true;
		}
		
		if (quick_work.canSaveGhost == false)
		{
			Buttons::SaveGhost.visible = false;
		}
		else
		{
			Buttons::SaveGhost.visible = true;
		}

		if (quick_work.IsBSpec == false)
		{
			Buttons::Spectator.visible = false;
		}
		else
		{
			Buttons::Spectator.visible = true;
		}

#ifdef GT4O_US_BETA
		if (main::menu::MSystem::CanSave() == false)
		{
			Buttons::SaveReplay.visible = false;
			Buttons::LoadGhost.visible = false;
			Buttons::SaveGhost.visible = false;
			Buttons::Logger.visible    = false;
		}
#endif

		TimeTrialRoot::PS.text = main::menu::MUnit::GetUnitOfPower();
		var entryNum = 1;
		for (var i = 0; i < entryNum; i++)
		{
			TimeTrialRoot["Grid" + (i + 1)]["CarName"].text = quick_work.getGridCarName(i);
			TimeTrialRoot["Grid" + (i + 1)]["CarName"].abbreviate();
			TimeTrialRoot["Grid" + (i + 1)]["ColorChip"].setColor(quick_work.getColorChipInfo(i));

			if (quick_work.getPower(i) == 0)
			{
				TimeTrialRoot["Grid" + (i + 1)]["PS"].text = "--";
			}
			else
			{
				TimeTrialRoot["Grid" + (i + 1)]["PS"].text = quick_work.getPower(i);
			}
	
			TimeTrialRoot["Grid" + (i + 1)]["KG"].text = quick_work.getWeight(i);
			setTireText(context, i, quick_work.getTireType(i));
		}
		entryNum = 1;
		for (var i = 1; i <= entryNum; i++)
		{
			var widget = TimeTrialRoot["Grid" + i];
			widget.actor.out = true;
			widget.actor.warp();
			widget.actor.out = false;
			i++;
		}

		if (quick_work.playerGridNumber >= 0)
		{
			var gnum = (quick_work.playerGridNumber + 1);
	
			TimeTrialRoot["Grid" + gnum]["CarName"].color   = TimeTrialRoot::Hidden::MyGridColor.color;
			TimeTrialRoot["Grid" + gnum]["GridNumber"].color= TimeTrialRoot::Hidden::MyGridColor.color;
			TimeTrialRoot["Grid" + gnum]["PS"].color        = TimeTrialRoot::Hidden::MyGridColor.color;
			TimeTrialRoot["Grid" + gnum]["KG"].color        = TimeTrialRoot::Hidden::MyGridColor.color;
		}
		
		var course_label = quick_work.courseLabel;
		Title.text = context.translate(TimeTrialRoot, "CourseName", course_label);
		Sessionbest_Time.text = main::menu::MUtility::GetTimeString(quick_work.BestTime);
		ToolTip_Upper::Year.text = getCarYearStrings(context, quick_work, TimeTrialRoot);
		ToolTip_Upper::Year.adjustScale();
		ToolTip_Upper::DriveTrain.text = getDrivetrainStrings(context, quick_work, TimeTrialRoot);
		ToolTip_Upper::DriveTrain.adjustScale();
		ToolTip_Upper::Power.text = getPowerStrings(context, quick_work, TimeTrialRoot);
		ToolTip_Upper::Power.adjustScale();
		ToolTip_Upper::Torque.text = getTorqueStrings(context, quick_work, TimeTrialRoot);
		ToolTip_Upper::Torque.adjustScale();
		CarCategory.text = getCarCategoryStrings(context, quick_work, TimeTrialRoot);
		main::sound.startStreamEx("pcm", "default_quick", -1, 1, main::game.option.menu_bgm_volume);
		setDefaultIconFocus(context);
		updateMyCarInfo(context);
		setIconPosition(context);
	}

	static icon_name_tbl = [
		"Start",
		"Spectator",
		"Replay",
		"SaveReplay",
		"Ranking",
		"QuickTune",
		"SaveGhost",
		"LoadGhost",
		"Logger",
		"Option",
		"Exit"
	]

	function onKeyPress(context, event)
	{
		if (event.keysym == PS2_PAD_CTRL_L3_UP || event.keysym == PS2_PAD_CTRL_L3_DOWN)
			return true;

		return false;
	}

	function setIconPosition(context)
	{
		var max = icon_name_tbl.size;
		var num = 0;
	
		for (var i = 0; i < max; i++)
		{
			if (TimeTrialRoot::Buttons[icon_name_tbl[i]].visible == true)
			{
				num++;
			}
		}
	
		var screen_w = 640;
		var icon_w   = 60;
		var space    = 0;
		if (num >= 10)
		{
			space = -4;
		}
	
		var st = (screen_w - (num * icon_w) - (space * (num - 1))) / 2;
	
		var c = 0;
		for (var i = 0; i < max; i++)
		{
			if (TimeTrialRoot::Buttons[icon_name_tbl[i]].visible == true)
			{
				TimeTrialRoot::Buttons[icon_name_tbl[i]].x = (st + ((icon_w + space) * c));
				c++;
			}
		}
	}
	
	function set_next_start_project()
	{
		main::game.next_menu_project = main::game.major_menu_project;
	}
	
	function onCancel(context, event, item)
	{
		main::sound.play("cancel");
		main::sound.stopStream();
	
		var quick_work = main::menu::MQuickWork();
		quick_work.selectedCommand = "COMMAND_EXIT";
	
		context.transition.panOut(context);
		context.transition.syncOut(context);
	
		set_next_start_project();
		context.finish();
	
		return EVENTRESULT_FILTER;
	}
}

module PROJECT::ROOT::Buttons::Start
{
    function onActivate(context)
    {
        main::sound.play("ok");
        main::sound.stopStream();

        var quick_work = main::menu::MQuickWork();
        quick_work.selectedCommand = "COMMAND_START";
        quick_work.cursorPosition = getIconIndex(context, "Start");

        context.transition.panOut(context);
        context.transition.syncOut(context);
        context.finish();
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::Buttons::Replay
{
    function onActivate(context)
    {
        main::sound.play("ok");
        main::sound.stopStream();

        var quick_work = main::menu::MQuickWork();
        quick_work.selectedCommand = "COMMAND_REPLAY";
        quick_work.cursorPosition = getIconIndex(context, "Replay");

        context.transition.panOut(context);
        context.transition.syncOut(context);
        context.finish();
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::Buttons::SaveReplay
{
    function onActivate(context)
    {
        main::sound.play("ok");
        main::sound.stopStream();

        var quick_work = main::menu::MQuickWork();
        quick_work.selectedCommand = "COMMAND_SAVE_REPLAY";
        quick_work.cursorPosition = getIconIndex(context, "SaveReplay");

        context.transition.panOut(context);
        context.transition.syncOut(context);
        context.finish();
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::Buttons::Spectator
{
    function onActivate(context)
    {
        main::sound.play("ok");
        main::sound.stopStream();

        var quick_work = main::menu::MQuickWork();
        quick_work.selectedCommand = "COMMAND_SPECTATOR";
        quick_work.cursorPosition = getIconIndex(context, "Spectator");

        context.transition.panOut(context);
        context.transition.syncOut(context);
        set_next_start_project();
        context.finish();
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::Buttons::QuickTune
{
    function onActivate(context)
    {
        main::sound.play("ok");

        var quick_work = main::menu::MQuickWork();
        quick_work.cursorPosition = getIconIndex(context, "QuickTune");

        QuickTunePopup::open(context);
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::Buttons::Ranking
{
    function onActivate(context)
    {
        main::sound.play("ok");
        main::sound.stopStream();

        var quick_work = main::menu::MQuickWork();
        quick_work.cursorPosition = getIconIndex(context, "Ranking");

        start_page(context, RankingRoot);
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::Buttons::Logger
{
    function onActivate(context)
    {
        main::sound.play("ok");
        main::sound.stopStream();

        var quick_work = main::menu::MQuickWork();
        quick_work.selectedCommand = "COMMAND_LOGGER";
        quick_work.cursorPosition = getIconIndex(context, "Logger");

        context.transition.panOut(context);
        context.transition.syncOut(context);
        set_next_start_project();
        context.finish();
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::Buttons::SaveGhost
{
    function onActivate(context)
    {
        if (Buttons::Exit.insensitive == 1)
        {
            main::sound.play("disable");
            return;
        }

        main::sound.play("ok");
        main::sound.stopStream();

        var quick_work = main::menu::MQuickWork();
        quick_work.selectedCommand = "COMMAND_SAVE_GHOST";
        quick_work.cursorPosition = getIconIndex(context, "SaveGhost");

        context.transition.panOut(context);
        context.transition.syncOut(context);
        set_next_start_project();
        context.finish();
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::Buttons::LoadGhost
{
    function onActivate(context)
    {
        main::sound.play("ok");
        main::sound.stopStream();

        var quick_work = main::menu::MQuickWork();
        quick_work.selectedCommand = "COMMAND_LOAD_GHOST";
        quick_work.cursorPosition = getIconIndex(context, "LoadGhost");

        context.transition.panOut(context);
        context.transition.syncOut(context);
        set_next_start_project();
        context.finish();
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::Buttons::Option
{
    function onActivate(context)
    {
        main::sound.play("ok");
        main::sound.stopStream();

        var quick_work = main::menu::MQuickWork();
        quick_work.selectedCommand = "COMMAND_OPTION";
        quick_work.cursorPosition = getIconIndex(context, "Option");

        context.transition.panOut(context);
        context.transition.syncOut(context);
        set_next_start_project();
        context.finish();
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::Buttons::Exit
{
    function onActivate(context)
    {
        main::sound.play("ok");
        main::sound.stopStream();

        var quick_work = main::menu::MQuickWork();
        quick_work.selectedCommand = "COMMAND_EXIT";

        context.transition.panOut(context);
        context.transition.syncOut(context);
        set_next_start_project();
        context.finish();
        return EVENTRESULT_FILTER;
    }
}