module RankingProject
{
	class http
	{
		static http = main::menu::MHttp();
		
		method __init__()
		{
		}
		
		method Get(url)
		{
			var xml = main::menu::MXml();
			http.setEntityCB(EntityCallback, xml);
			if (!http.GET(url))
			{
				return nil;
			}
		
			var r = http.sync();
			http.response();
		
			if (!r)
			{
				return nil;
			}
		
			return xml.result;
		}


		method Post(url, arg)
		{
			var xml = main::menu::MXml();
		
			http.setEntityCB(EntityCallback, xml);
		
			if (!http.POST(url, arg))
			{
				return nil;
			}
		
			var r = http.sync();
			http.response();
		
			if (!r)
			{
				return nil;
			}
		
			return xml.result;
		}
	
	
		method PostSvoLogin(url, user, password, ip, arg)
		{
			var xml = main::menu::MXml();
		
			http.setEntityCB(EntityCallback, xml);
		
			if (!http.SVOLOGIN(url, user, password, ip, arg))
			{
				return nil;
			}
		
			var r = http.sync();
			http.response();
		
			if (!r)
			{
				return nil;
			}
		
			return xml.result;
		}
	
	
		method close()
		{
			http.close();
		}
	
	
		method ppr(str, level)
		{
			for (var d = 0; d < level; d++)
				d++;
		}
	
		method PrintXmlNodes(node, level)
		{
			if (node.value != "")
				ppr(node.value, level);
		
			var attrs = node.attrs;
			for (var a = 0; a < attrs.size; a++)
			{
				for (var d = 0; d < level; d++)
					;
		
				var attrName = attrs[a];
				var attrValue = node.getAttribute(attrName);
			}
		
			var names = node.elems;

			for (var i = 0; i < names.size; i++)
			{
				var name = names[i];
				var nodeList = node[name];
				for (var j = 0; j < nodeList.size; j++)
				{
					ppr("[" + name + "]", level);
					PrintXmlNodes(nodeList[j], level + 1);
				}
			}
		}
	}

	function EntityCallback(data, xml)
	{
		xml.parse(data, 0);
	}
	
#define SELECT_XML_NODE_SAFE(out_name, expr, ret_value_if_nil) \
	var out_name; \
	if ((out_name = expr) == nil) \
		return ret_value_if_nil

	module svo
	{
		class map
		{
			attribute mArray;

			method __init__()
			{
				mArray = [];
			}
			
			method begin()
			{
				return 0;
			}
			
			method end()
			{
				return mArray.size;
			}
			
			method empty()
			{
				return (mArray.size == 0);
			}

			method size()
			{
				return mArray.size;
			}
			
			method clear()
			{
				mArray = [];
			}
			
			method insert(pair)
			{
				var index = find(pair[0]);
			
				if (index != end())
				{
					mArray[index][1] = pair[1];
				}
				else
				{
					mArray.push(pair);
				}
			}

			method find(key)
			{
				var i;
				for (i = 0; i < mArray.size; i++)
				{
					if (mArray[i][0] == key)
						break;
				}
				return i;
			}
			
			method first(index)
			{
				return mArray[index][0];
			}
			
			method second(index)
			{
				return mArray[index][1];
			}
		}
	
		static sAccountId = "";
		static sUser = "";
		static sIpAddr = "";
		static sSvoGameId = "0";
		static sTrialRankingURL = nil;
		static sUrlMap = map.new();
	
		function GetUrlList()
		{
			var sSvoBase = "http://gt4-e3.svo.pdonline.scea.com:10070/GT4_XML/";
			SELECT_XML_NODE_SAFE(node, gHttp.Get(sSvoBase), false);
			SELECT_XML_NODE_SAFE(node, node["XML"], false);
			node = node[0];

			SELECT_XML_NODE_SAFE(node, node["XML"], false);
			node = node[0];

			sIpAddr = node.getAttribute("IPAddress");
		
			var urls = node.elems;
			for (var i = 0; i < urls.size; i++)
			{
				var tag = urls[i];
				var url = node[tag];
				sUrlMap.insert([tag, url[0].value]);
			}

			return true;
		}
	
	
		function GetFirstNode(urlName, firstNodeName)
		{
			var it = sUrlMap.find(urlName);
			if (it == sUrlMap.end())
			{
				return nil;
			}
		
			var url = sUrlMap.second(it);
			SELECT_XML_NODE_SAFE(node, gHttp.Get(url), nil);
		
			SELECT_XML_NODE_SAFE(node, node["XML"], nil);
			node = node[0];

			SELECT_XML_NODE_SAFE(node, node[firstNodeName], nil);
			return node;
		}

		function GetResultId(node, statusName)
		{
			if (node == nil)
				return nil;
		
			SELECT_XML_NODE_SAFE(node, node["XML"], nil);
			node = node[0];

			SELECT_XML_NODE_SAFE(node, node[statusName], nil);
			node = node[0];

			SELECT_XML_NODE_SAFE(node, node["status"], nil);
			node = node[0];

			SELECT_XML_NODE_SAFE(nodeMessage, node["message"], nil);
			SELECT_XML_NODE_SAFE(nodeId, node["id"], nil);
		
			return nodeId[0].value;
		}
	
		
		function GetResult(node, statusName, successId)
		{
			SELECT_XML_NODE_SAFE(id, GetResultId(node, statusName), 0)
		
			var success = (id == successId);
			if (!success)
			{
			}
		
			return success;
		}
	
	
		function LoginE3(user, password)
		{
			sUser = user;
		
			SELECT_XML_NODE_SAFE(node, GetFirstNode("loginE3URL", "Login"), false);
			node = node[0];
		
			var url = node.getAttribute("action");
		
			SELECT_XML_NODE_SAFE(nodeUser, node["userName"], false);
			SELECT_XML_NODE_SAFE(nodePass, node["passWord"], false);

			node = gHttp.Post(
				url,
				[
					nodeUser[0].getAttribute("name"), user,
					nodePass[0].getAttribute("name"), password
				]
			);
		
			var result = GetResultId(node, "Login");
			if (result == "20600")
			{
				SELECT_XML_NODE_SAFE(node, node["XML"][0]["Login"][0]["accountID"], false);
				sAccountId = node[0].value;

				return true;
			}
			else
			{
				return false;
			}
		}
	
	
		function CreateTimeTrialGame(locationId)
		{
			SELECT_XML_NODE_SAFE(node, GetFirstNode("gameTimeTrialCreateURL", "Create_Game"), false);
			node = node[0];
		
			var url = node.getAttribute("action");
			SELECT_XML_NODE_SAFE(nodeGameId, node["SCERTGameID"], false);
			SELECT_XML_NODE_SAFE(nodeGameMode, node["GameMode"], false);
			SELECT_XML_NODE_SAFE(nodeGameName, node["GameName"], false);
			SELECT_XML_NODE_SAFE(nodeHostPlayers, node["HostPlayerList"], false);
			SELECT_XML_NODE_SAFE(nodeRemotePlayers, node["RemotePlayerList"], false);
			SELECT_XML_NODE_SAFE(nodeTimePerDivision, node["TimePerDivision"], false);
			SELECT_XML_NODE_SAFE(nodeNumDivisions, node["NumDivisions"], false);
			SELECT_XML_NODE_SAFE(nodeTimeTrialId, node["timeTrialID"], false);

			var gameName = sUser + main::menu::MSystem::GetGMTDateTimeString();
			node = gHttp.Post(
				url,
				[nodeGameId[0].getAttribute("name"),
				"1",
				nodeGameMode[0].getAttribute("name"),
				nodeGameMode[0].value,
				nodeGameName[0].getAttribute("name"),
				gameName,
				nodeHostPlayers[0].getAttribute("name"),
				sAccountId,
				nodeRemotePlayers[0].getAttribute("name"),
				"",
				nodeTimePerDivision[0].getAttribute("name"),
				"5",
				nodeNumDivisions[0].getAttribute("name"),
				"1",
				nodeTimeTrialId[0].getAttribute("name"),
				locationId]
			);
			
			var result = GetResultId(node, "Create_Game");
			
			if (result == "20400")
			{
				SELECT_XML_NODE_SAFE(node, node["XML"][0]["Create_Game"][0]["gameID"], false);
				sSvoGameId = node[0].value;
				return true;
			}
			else
			{
				return false;
			}
		}
	
		function FinishGame(totalTime, carId, nickname)
		{
			SELECT_XML_NODE_SAFE(node, GetFirstNode("gameFinishURL", "Finish_Game"), false);
			node = node[0];
		
			var url = node.getAttribute("action");

			SELECT_XML_NODE_SAFE(nodeGameID, node["SVOGameID"], false);
			SELECT_XML_NODE_SAFE(nodeReturnState, node["ReturnState"], false);
			SELECT_XML_NODE_SAFE(nodeMetersDriven, node["metersDriven"], false);
			SELECT_XML_NODE_SAFE(nodeTimePlayed, node["timePlayed"], false);
			SELECT_XML_NODE_SAFE(nodePlace, node["place"], false);
			SELECT_XML_NODE_SAFE(nodeTotalLapTime, node["totalLapTime"], false);
			SELECT_XML_NODE_SAFE(nodeFastestLap, node["fastestLapTime"], false);
			SELECT_XML_NODE_SAFE(nodeCollisions, node["collisions"], false);
			SELECT_XML_NODE_SAFE(nodeCar, node["car"], false);
			SELECT_XML_NODE_SAFE(nodeDriveTrain, node["driveTrain"], false);
			SELECT_XML_NODE_SAFE(nodeHorsePower, node["horsePower"], false);
			SELECT_XML_NODE_SAFE(nodeAspirated, node["aspirated"], false);
			SELECT_XML_NODE_SAFE(nodeWeight, node["weight"], false);
			SELECT_XML_NODE_SAFE(nodeTires, node["tires"], false);
			SELECT_XML_NODE_SAFE(nodeNickName, node["USER_NAME"], false);

			node = gHttp.Post(
				url,
				[nodeGameID[0].getAttribute("name"),
				sSvoGameId,
				nodeReturnState[0].getAttribute("name"),
				"1",
				nodeMetersDriven[0].getAttribute("name"),
				"0",
				nodeTimePlayed[0].getAttribute("name"),
				"0",
				nodePlace[0].getAttribute("name"),
				"1",
				nodeTotalLapTime[0].getAttribute("name"),
				totalTime,
				nodeFastestLap[0].getAttribute("name"),
				"0",
				nodeCollisions[0].getAttribute("name"),
				"0",
				nodeCar[0].getAttribute("name"),
				carId,
				nodeDriveTrain[0].getAttribute("name"),
				"0",
				nodeHorsePower[0].getAttribute("name"),
				"0",
				nodeAspirated[0].getAttribute("name"),
				"0",
				nodeWeight[0].getAttribute("name"),
				"0",
				nodeTires[0].getAttribute("name"),
				"0",
				nodeNickName[0].getAttribute("name"),
				nickname]
			);

			return GetResult(node, "Finish_Game", "20407");
		}
	
		function GetTrialRankingUrl()
		{
			SELECT_XML_NODE_SAFE(node, GetFirstNode("statsTrialURL", "Trial_Leaderboard"), false);		
			node = node[0];
		
			var url = node.getAttribute("action");
		
			SELECT_XML_NODE_SAFE(node, node["trials"], false);		
			sTrialRankingURL = url + "?" + node[0].getAttribute("name") + "=";

			return true;
		}
	
	
		function GetTrialRanking(location, data, start, end)
		{
			if (sTrialRankingURL == nil)
				return false;
		
			var url = sTrialRankingURL + location + "&stsStart=" + start + "&statsEnd=" + end;
		
			SELECT_XML_NODE_SAFE(node, gHttp.Get(url), false);
			SELECT_XML_NODE_SAFE(node, node["XML"], false);
			node = node[0];

			SELECT_XML_NODE_SAFE(node, node["Trial_Leaderboard"], false);
			node = node[0];

			SELECT_XML_NODE_SAFE(nodeColumns, node["Stat_Columns"], false);
			SELECT_XML_NODE_SAFE(nodeStats, node["Stats"], false);
			nodeColumns = nodeColumns[0];
			nodeStats = nodeStats[0];
		
			var result = "";
			var nStats = nodeStats.getAttribute("total");
		
			if (nStats > 0)
			{
				SELECT_XML_NODE_SAFE(nodeStats, nodeStats["User_Stats"], false);

				for (var i = 0; i < nStats && i < (end - start + 1); i++)
				{
					if (nodeStats[i] == nil)
						return false;
		
					data[i].mUserName = nodeStats[i].getAttribute("initials");
		
					SELECT_XML_NODE_SAFE(nodeCar, nodeStats[i]["CAR"], false);
					SELECT_XML_NODE_SAFE(nodeResult, nodeStats[i]["RESULTS"], false);
					data[i].mCar = nodeCar[0].value;
					data[i].mTime = nodeResult[0].value;
				}
			}
			return true;
		}
	
		function GetTrialPosition(location, time, positionData)
		{
			SELECT_XML_NODE_SAFE(node, GetFirstNode("statsTrialPositionURL", "Trial_Leaderboard"), false)
			node = node[0];

			var url = node.getAttribute("action");
		
			SELECT_XML_NODE_SAFE(nodeTime, node["time"], false)
			SELECT_XML_NODE_SAFE(nodeTrials, node["trials"], false)

			url = url + "?" +
				nodeTrials[0].getAttribute("name") + "=" + location + "&" +
				nodeTime[0].getAttribute("name") + "=" + time;
		
			SELECT_XML_NODE_SAFE(node, gHttp.Get(url), false)
			SELECT_XML_NODE_SAFE(node, node["XML"], false)
			node = node[0];

			SELECT_XML_NODE_SAFE(node, node["Stats_TrialPosition"], false)
			node = node[0];
		
			var nodePosition = node["Position"];
			var nodeLast = node["LastPosition"];
			var position = nodePosition[0].getAttribute("rank");
			var last = nodeLast[0].getAttribute("rank");
		
			if (last.toInt() < 0)
				last = "0";
		
			var total = "%d".format(last.toInt() + 1);
		
			if (position.toInt() < 0)
				position = "%d".format(last.toInt() + 1);
		
			positionData[0] = position;
			positionData[1] = total;
		
			return true;
		}
	}
	
	class RankingData 
	{
		attribute mUserName;
		attribute mCar;
		attribute mTime;

		method __init__()
		{
			mUserName = "----------";
			mCar = "";
			mTime = "359999999"; // pdiext::MAXTIME1000
		}
	}

	class LocationData
	{
		attribute mId;

		static mPath = "image/arcade/crs/crs_name_";
		static mData = 
		[
			[10, "assisi", "assisi"],
			[20, "capri", "amalfi"],
			[30, "fisco", "fuji"],
			[40, "grandcanyon", "grand"],
			[50, "hongkong", "hongkong"],
			[60, "newyork", "ny"],
			[70, "nurburgring", "nur"],
			[80, "tsukuba", "tsukuba"]
		];


		method __init__()
		{
			mId = 10;
		}
	
		method GetId(id)
		{
			return mId;
		}
		
		method SetId(id)
		{
			mId = id;
		}
		
		method Find(id)
		{
			var i;
			for (i = 0; i < mData.size; i++)
			{
				if (mData[i][0] == id)
					break;
			}

			return i;
		}
	
	
		method SetIdByString(str)
		{
			for (var i = 0; i < mData.size; i++)
			{
				if (mData[i][1] == str)
				{
					mId = mData[i][0];
					return true;
				}
			}

			return false;
		}
	
	
		method GetString()
		{
			return mData[Find(mId)][1];
		}
		
		method GetTextureString()
		{
			return mPath + mData[Find(mId)][2] + ".png";
		}
	
	
		method Increase()
		{
			mId += 10;
			if (mId > mData[mData.size - 1][0])
				mId = mData[0][0];
		}
	
		method InitRankingData()
		{
			for (var i = 0; i < mData.size; i++)
			{
				var data = [];
				for (var j = 0; j < gNumOfData; j++)
				{
					data.push(RankingData.new());
				}

				mData[i].push(data);
			}
		}
	
	
		method GetRankingData()
		{
			return mData[Find(mId)].pop();
		}
	
	
		method SetRankingData(data)
		{
			mData[Find(mId)].push(data);
		}
	}
	
	
	static gHttp = http.new();
	static gLocation = LocationData.new();
	static gIsRankingMachine = (main::game.option.machine_role == "scoreboard");
	static gPosition = ["", ""];
	static gTime = main::game.last_record.toString();
	static gCarId = "";
	static gNumOfData = 8;
	
	function onLoad(context)
	{
		context.createRenderContext(1);
		var render_context = context.getRenderContext(0);
	
		var transition = main::menu::MColorTransition();
		transition.panIn(render_context);
		render_context.transition = transition;
	
		main::sound.load();
		main::game.next_menu_project = "arcade";
	
		var courseName = main::game.course_code;
		gLocation.SetIdByString(courseName);
	
		gCarId = main::game.car_code;
	
		if (gCarId != nil && gCarId != "")
		{
			gCarId = main::menu::MCarData::GetCarNumericCode(gCarId);
	
			var carName = main::menu::MCarData::GetCarNameByNumericCode(gCarId);
			carName != nil; // BUG: dummy statement, missing POP from their compiler
		}
	
		if (gCarId == "")
		{
			gIsRankingMachine = true;
		}
	
		var username = main::game.option.LAN_machine_name;
		username != nil; // BUG: dummy statement, missing POP from their compiler
		
		var r = svo::GetUrlList();
		if (r)
		{
			r = svo::LoginE3(username, "a");
			if (r)
			{
				r = svo::GetTrialRankingUrl();
				if (r)
				{
					r = svo::GetTrialPosition(gLocation.GetId(), gTime, gPosition);
				}
			}
		}
	
		gHttp.close();
	
		if (!r)
		{
			return;
		}
		
		if (gIsRankingMachine)
		{
			render_context.startPage(RankingRoot);
		}
		else
		{
			if (gPosition[0].toInt() > gNumOfData)
			{
				var r = svo::CreateTimeTrialGame(gLocation.GetId().toString());
				if (r)
				{
					r = svo::FinishGame(gTime, gCarId, username);
				}
			
				!r; // Empty
				
				gHttp.close();
				render_context.startPage(RankingRoot);
			}
			else
			{
				render_context.startPage(EntryRoot);
			}
		}
	}

	function onUnload()
	{
		main::menu::MMovieFace::terminate();
		main::sound.unload();
	}
}