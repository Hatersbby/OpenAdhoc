//notes:
	// class names can't have attibutes
	// multiple unresolved differences: != nil without a jump if false at line 856 and below

module RankingProject
{
	class http
	{
		static http = main::menu::MHttp();
		
		method __init__()
		{
		}
		
		method Get(url)
		{
			var xml = main::menu::MXml();
			http.setEntityCB(EntityCallback, xml);
			if (!http.GET(url))
			{
				return nil;
			}
		
			var r = http.sync();
			http.response();
		
			if (!r)
			{
				return nil;
			}
		
			return xml.result;
		}


		method Post(url, arg)
		{
			var xml = main::menu::MXml();
		
			http.setEntityCB(EntityCallback, xml);
		
			if (!http.POST(url, arg))
			{
				return nil;
			}
		
			var r = http.sync();
			http.response();
		
			if (!r)
			{
				return nil;
			}
		
			return xml.result;
		}
	
	
		method PostSvoLogin(url, user, password, ip, arg)
		{
			var xml = main::menu::MXml();
		
			http.setEntityCB(EntityCallback, xml);
		
			if (!http.SVOLOGIN(url, user, password, ip, arg))
			{
				return nil;
			}
		
			var r = http.sync();
			http.response();
		
			if (!r)
			{
				return nil;
			}
		
			return xml.result;
		}
	
	
		method close()
		{
			http.close();
		}
	
	
		method ppr(str, level)
		{
			var d = 0;
			while (d < level)
			{
				d++;
			}
		}
	
		method PrintXmlNodes(node, level)
		{
			if (node.value != "")
			{
				ppr(node.value, level);
			}
		
			var attrs = node.attrs;
			var a = 0;
		
			while (a < attrs.size)
			{
				var d = 0;
				while (d < level)
				{
					d++;
				}
		
				var attrName = attrs[a];
				var attrValue = node.getAttribute(attrName);
		
				a++;
			}
		
			var names = node.elems;
			var i = 0;
		
			while (i < names.size)
			{
				var name = names[i];
				var nodeList = node[name];
				var j = 0;
		
				while (j < nodeList.size)
				{
					ppr("[" + name + "]", level);
					PrintXmlNodes(nodeList[j], level + 1);
					j++;
				}
		
				i++;
			}
		}
	}

	function EntityCallback(data, xml)
	{
		xml.parse(data, 0);
	}
	
	module svo
	{
		// compiler does not like attribute mArray 
		// should be class map.mArray
		class map_mArray
		{
			method __init__()
			{
				mArray = [];
			}
			
			method begin()
			{
				return 0;
			}
			
			method end()
			{
				return mArray.size;
			}
			
			method empty()
			{
				return (mArray.size == 0);
			}

			method size()
			{
				return mArray.size;
			}
			
			method clear()
			{
				mArray = [];
			}
			
			method insert(pair)
			{
				var index = find(pair[0]);
			
				if (index != end())
				{
					mArray[index][1] = pair[1];
				}
				else
				{
					mArray.push(pair);
				}
			}

			method find(key)
			{
				var i = 0;
				while (i < mArray.size)
				{
					if (mArray[i][0] == key)
					{
						break;
					}
					i++;
				}
				return i;
			}
			
			method first(index)
			{
				return mArray[index][0];
			}
			
			method second(index)
			{
				return mArray[index][1];
			}
		}
	
		static sAccountId = "";
		static sUser = "";
		static sIpAddr = "";
		static sSvoGameId = "0";
		static sTrialRankingURL = nil;
		static sUrlMap = map.new();
	
		function GetUrlList()
		{
			var sSvoBase = "http://gt4-e3.svo.pdonline.scea.com:10070/GT4_XML/";
			var node;
			if (node = gHttp.Get(sSvoBase) == nil)
				return false;
		
			var node;
			if (node = node["XML"] == nil)
				return false;
		
			var node = node[0];
			if (node = node["URL_List"] == nil)
				return false;
		
			node = node[0];
			sIpAddr = node.getAttribute("IPAddress");
		
			var urls = node.elems;
			var i = 0;
			while (i < urls.size)
			{
				var tag = urls[i];
				var url = node[tag];
				sUrlMap.insert([tag, url[0].value]);
				i++;
			}
			return true;
		}
	
	
		function GetFirstNode(urlName, firstNodeName)
		{
			var it = sUrlMap.find(urlName);
			if (it == sUrlMap.end())
				return nil;
		
			var url = sUrlMap.second(it);
			var node;
			if (node = gHttp.Get(url) == nil)
				return nil;
		
			if (node = node["XML"] == nil)
				return nil;
		
			node = node[0];
			if (node = node[firstNodeName] == nil)
				return nil;
		
			return node;
		}
	
	
		function GetResultId(node, statusName)
		{
			if (node == nil)
				return nil;
		
			if (node = node["XML"] == nil)
				return nil;
		
			node = node[0];
			if (node = node[statusName] == nil)
				return nil;
		
			node = node[0];
			if (node = node["status"] == nil)
				return nil;
		
			node = node[0];
			var nodeMessage;
			if (nodeMessage = node["message"] == nil)
				return nil;
		
			var nodeId;
			if (nodeId = node["id"] == nil)
				return nil;
		
			return nodeId[0].value;
		}
	
	
		function GetResult(node, statusName, successId)
		{
			var id;
			if (id = GetResultId(node, statusName) == nil)
				return false;
		
			var success = (id == successId);
			if (!success)
			{
			}
		
			return success;
		}
	
	
		function LoginE3(user, password)
		{
			sUser = user;
		
			var node;
			if (node = GetFirstNode("loginE3URL", "Login") == nil)
				return false;
		
			node = node[0];
		
			var url = node.getAttribute("action");
		
			var nodeUser;
			if (nodeUser = node["userName"] == nil)
				return false;
		
			var nodePass;
			if (nodePass = node["passWord"] == nil)
				return false;
		
			node = gHttp.Post(
				url,
				[
					nodeUser[0].getAttribute("name"), user,
					nodePass[0].getAttribute("name"), password
				]
			);
		
			var result = GetResultId(node, "Login");
			if (result == "20600")
			{
				var node;
				if (node = node["XML"][0]["Login"][0]["accountID"] == nil)
					return false;
		
				sAccountId = node[0].value;
				return true;
			}
			else;
		
			return false;
		}
	
	
		function CreateTimeTrialGame(locationId)
		{
			var node;
			if (node = GetFirstNode("gameTimeTrialCreateURL", "Create_Game") == nil)
				return false;
		
			node = node[0];
		
			var url = node.getAttribute("action");
			var nodeGameId;
			if (nodeGameId = node["SCERTGameID"] == nil)
				return false;
		
			var nodeGameMode;
			if (nodeGameMode = node["GameMode"] == nil)
				return false;
		
			var nodeGameName;
			if (nodeGameName = node["GameName"] == nil)
				return false;
		
			var nodeHostPlayers;
			if (nodeHostPlayers = node["HostPlayerList"] == nil)
				return false;
		
			var nodeRemotePlayers;
			if (nodeRemotePlayers = node["RemotePlayerList"] == nil)
				return false;
		
			var nodeTimePerDivision;
			if (nodeTimePerDivision = node["TimePerDivision"] == nil)
				return false;
		
			var nodeNumDivisions;
			if (nodeNumDivisions = node["NumDivisions"] == nil)
				return false;
		
			var nodeTimeTrialId;
			if (nodeTimeTrialId = node["timeTrialID"] == nil)
				return false;
		
			var gameName = sUser + main::menu::MSystem::GetGMTDateTimeString();
			node = gHttp.Post(
				url,
				[nodeGameId[0].getAttribute("name"),
				"1",
				nodeGameMode[0].getAttribute("name"),
				nodeGameMode[0].value,
				nodeGameName[0].getAttribute("name"),
				gameName,
				nodeHostPlayers[0].getAttribute("name"),
				sAccountId,
				nodeRemotePlayers[0].getAttribute("name"),
				"",
				nodeTimePerDivision[0].getAttribute("name"),
				"5",
				nodeNumDivisions[0].getAttribute("name"),
				"1",
				nodeTimeTrialId[0].getAttribute("name"),
				locationId]
			);
			
			var result = GetResultId(node, "Create_Game");
			
			if (result == "20400")
			{
				var node;
				if (node = node["XML"][0]["Create_Game"][0]["gameID"] == nil)
					return false;
			
				sSvoGameId = node[0].value;
				return true;
			}
			else
				;
			
			return false;
		}
	
		function FinishGame(totalTime, carId, nickname)
		{
			var node;
			if (node = GetFirstNode("gameFinishURL", "Finish_Game") == nil)
				return false;
		
			node = node[0];
		
			var url = node.getAttribute("action");
			var nodeGameID;
			if (nodeGameID = node["SVOGameID"] == nil)
				return false;
		
			var nodeReturnState;
			if (nodeReturnState = node["ReturnState"] == nil)
				return false;
		
			var nodeMetersDriven;
			if (nodeMetersDriven = node["metersDriven"] == nil)
				return false;
		
			var nodeTimePlayed;
			if (nodeTimePlayed = node["timePlayed"] == nil)
				return false;
		
			var nodePlace;
			if (nodePlace = node["place"] == nil)
				return false;
		
			var nodeTotalLapTime;
			if (nodeTotalLapTime = node["totalLapTime"] == nil)
				return false;
		
			var nodeFastestLap;
			if (nodeFastestLap = node["fastestLapTime"] == nil)
				return false;
				
			var nodeCollisions;
			if (nodeCollisions = node["collisions"] == nil)
				return false;
		
			var nodeCar;
			if (nodeCar = node["car"] == nil)
				return false;
		
			var nodeDriveTrain;
			if (nodeDriveTrain = node["driveTrain"] == nil)
				return false;
		
			var nodeHorsePower;
			if (nodeHorsePower = node["horsePower"] == nil)
				return false;
		
			var nodeAspirated;
			if (nodeAspirated = node["aspirated"] == nil)
				return false;
		
			var nodeWeight;
			if (nodeWeight = node["weight"] == nil)
				return false;
		
			var nodeTires;
			if (nodeTires = node["tires"] == nil)
				return false;
				
			var nodeNickName;
			if (nodeNickName = node["USER_NAME"] == nil)
				return false;
		
			node = gHttp.Post(
				url,
				[nodeGameID[0].getAttribute("name"),
				sSvoGameId,
				nodeReturnState[0].getAttribute("name"),
				"1",
				nodeMetersDriven[0].getAttribute("name"),
				"0",
				nodeTimePlayed[0].getAttribute("name"),
				"0",
				nodePlace[0].getAttribute("name"),
				"1",
				nodeTotalLapTime[0].getAttribute("name"),
				totalTime,
				nodeFastestLap[0].getAttribute("name"),
				"0",
				nodeCollisions[0].getAttribute("name"),
				"0",
				nodeCar[0].getAttribute("name"),
				carId,
				nodeDriveTrain[0].getAttribute("name"),
				"0",
				nodeHorsePower[0].getAttribute("name"),
				"0",
				nodeAspirated[0].getAttribute("name"),
				"0",
				nodeWeight[0].getAttribute("name"),
				"0",
				nodeTires[0].getAttribute("name"),
				"0",
				nodeNickName[0].getAttribute("name"),
				nickname]
			);
			GetResult(node, "Finish_Game", "20407");
			return;
		}
	
	
		function GetTrialRankingUrl()
		{
			var node;
			if (node = GetFirstNode("statsTrialURL", "Trial_Leaderboard") == nil)
				false;
				return;
		
			node = node[0];
		
			var url = node.getAttribute("action");
		
			if (node = node["trials"] == nil)
				false;
				return;
		
			sTrialRankingURL = url + "?" + node[0].getAttribute("name") + "=";
		
			return true;
		}
	
	
		function GetTrialRanking(location, data, start, end)
		{
			if (sTrialRankingURL == nil)
				false;
				return;
		
			var url = sTrialRankingURL + location + "&stsStart=" + start + "&statsEnd=" + end;
		
			var node;
			if (node = gHttp.Get(url) == nil)
				false;
				return;
	
			if (node = node["XML"] == nil)
				false;
				return;
		
			node = node[0];
			if (node = node["Trial_Leaderboard"] == nil)
				false;
				return;
		
			node = node[0];
		
			var nodeColumns
			if (nodeColumns = node["Stat_Columns"] == nil)
				false;
				return;
		
			var nodeStats;
			if (nodeStats = node["Stats"] == nil)
				false;
				return;
		
			nodeColumns = nodeColumns[0];
			nodeStats = nodeStats[0];
		
			var result = "";
			var nStats = nodeStats.getAttribute("total");
		
			if (nStats > 0)
			{
				if (nodeStats = nodeStats["User_Stats"] == nil)
					return false;
		
				var i = 0;
				while (i < nStats && i < (end - start + 1))
				{
					if (nodeStats[i] == nil)
						return false;
		
					data[i].mUserName = nodeStats[i].getAttribute("initials");
		
					var nodeCar;
					if (nodeCar = nodeStats[i]["CAR"] == nil)
						return false;
		
					var nodeResult;
					if (nodeResult = nodeStats[i]["RESULTS"] == nil)
						return false;
		
					data[i].mCar = nodeCar[0].value;
					data[i].mTime = nodeResult[0].value;
		
					i++;
				}
			}
			return true;
		}
	
		function GetTrialPosition(location, time, positionData)
		{
			var node;
			if (node = GetFirstNode("statsTrialPositionURL", "Trial_Leaderboard") == nil)
				return false;
		
			node = node[0];
			var url = node.getAttribute("action");
		
			var nodeTime;
			if (nodeTime = node["time"] == nil)
				return false;
		
			var nodeTrials;
			if (nodeTrials = node["trials"] == nil)
				return false;
		
			url = url + "?" +
				nodeTrials[0].getAttribute("name") + "=" + location + "&" +
				nodeTime[0].getAttribute("name") + "=" + time;
		
			if (node = gHttp.Get(url) == nil)
				return false;
		
			if (node = node["XML"] == nil)
				return false;
		
			node = node[0];
			if (node = node["Stats_TrialPosition"] == nil)
				return false;
		
			node = node[0];
		
			var nodePosition = node["Position"];
			var nodeLast = node["LastPosition"];
			var position = nodePosition[0].getAttribute("rank");
			var last = nodeLast[0].getAttribute("rank");
		
			if (last.toInt() < 0)
				last = "0";
		
			var total = "%d".format(last.toInt() + 1);
		
			if (position.toInt() < 0)
				position = "%d".format(last.toInt() + 1);
		
			positionData[0] = position;
			positionData[1] = total;
		
			return true;
		}
	}
	
	// another one here
	// should be class RankingData.mUserName.mCar.mTime
	class RankingData_mUserName_mCar_mTime
	{
		method __init__()
		{
			mUserName = "----------";
			mCar = "";
			mTime = "359999999";
		}
	}
	// another one here
	// should be class LocationData.mId
	class LocationData_mId
	{
		static mPath = "image/arcade/crs/crs_name_";
		static mData = 
		[
			[10, "assisi", "assisi"],
			[20, "capri", "amalfi"],
			[30, "fisco", "fuji"],
			[40, "grandcanyon", "grand"],
			[50, "hongkong", "hongkong"],
			[60, "newyork", "ny"],
			[70, "nurburgring", "nur"],
			[80, "tsukuba", "tsukuba"]
		];


		method __init__()
		{
			mId = 10;
		}
	
		method GetId(id)
		{
			return mId;
		}
		
		method SetId(id)
		{
			mId = id;
		}
		
		method Find(id)
		{
			var i = 0;
			while (i < mData.size)
			{
				if (mData[i][0] == id)
					break;
				i++;
			}
			return i;
		}
	
	
		method SetIdByString(str)
		{
			var i = 0;
			while (i < mData.size)
			{
				if (mData[i][1] == str)
				{
					mId = mData[i][0];
					return 1;
				}
				i++;
			}
			return false;
		}
	
	
		method GetString()
		{
			mData[Find(mId)][1];
			return;
		}
		
		method GetTextureString()
		{
			mPath + mData[Find(mId)][2] + ".png";
			return;
		}
	
	
		method Increase()
		{
			mId += 10;
			if (mId > mData[mData.size - 1][0])
				mId = mData[0][0];
		}
	
	
		method InitRankingData()
		{
			var i = 0;
			while (i < mData.size)
			{
				var data = [];
				var j = 0;
				while (j < gNumOfData)
				{
					data.push(RankingData.new());
					j++;
				}
				mData[i].push(data);
				i++;
			}
		}
	
	
		method GetRankingData()
		{
			mData[Find(mId)].pop();
			return;
		}
	
	
		method SetRankingData(data)
		{
			mData[Find(mId)].push(data);
		}
	}
	
	
	static gHttp = http.new();
	static gLocation = LocationData.new();
	static gIsRankingMachine = (main::game.option.machine_role == "scoreboard");
	static gPosition = ["", ""];
	static gTime = main::game.last_record.toString();
	static gCarId = "";
	static gNumOfData = 8;
	
	function onLoad(context)
	{
		context.createRenderContext(1);
		var render_context = context.getRenderContext(0);
	
		var transition = main::menu::MColorTransition();
		transition.panIn(render_context);
		render_context.transition = transition;
	
		main::sound.load();
		main::game.next_menu_project = "arcade";
	
		var courseName = main::game.course_code;
		gLocation.SetIdByString(courseName);
	
		gCarId = main::game.car_code;
	
		if (gCarId != nil && gCarId != "")
		{
			gCarId = main::menu::MCarData::GetCarNumericCode(gCarId);
	
			var carName = main::menu::MCarData::GetCarNameByNumericCode(gCarId);
			carName != nil; // != nil without a jump if false
		}
	
		if (gCarId == "")
		{
			gIsRankingMachine = true;
		}
	
		var username = main::game.option.LAN_machine_name;
		username != nil; // != nil without a jump if false
		
		var r = svo::GetUrlList();
		if (r)
		{
			r = svo::LoginE3(username, "a");
			if (r)
			{
				r = svo::GetTrialRankingUrl();
				if (r)
					r = svo::GetTrialPosition(gLocation.GetId(), gTime, gPosition);
			}
		}
	
		gHttp.close();
	
		if (!r)
			return;
		
	
		if (gIsRankingMachine)
		{
			render_context.startPage(RankingRoot);
		}
		else
		{
			if (gPosition[0].toInt() > gNumOfData)
			{
				var r = svo::CreateTimeTrialGame(gLocation.GetId().toString());
			}
			if (r)
			{
				r = svo::FinishGame(gTime, gCarId, username);
			}
	
			if (!r)
			{
				gHttp.close();
				render_context.startPage(RankingRoot);
			}
			else
			{
				render_context.startPage(EntryRoot);
			}
		}
	}

	function onUnload()
	{
		main::menu::MMovieFace::terminate();
		main::sound.unload();
	}
}