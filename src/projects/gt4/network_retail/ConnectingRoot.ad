module NetworkProject::ConnectingRoot
{
    function setBarActor(widget)
    {
        widget.x = -widget.w;

        var actor = main::menu::MMoveActor(widget, 640.0, widget.y);
        widget.actor = actor;

        widget.actor.ratio = 0.01;
        widget.actor.repeat = 1;
        widget.actor.flip = 0;
        widget.actor.linear = 1;
        widget.actor.out = 0;

        widget.actor.warp();
        widget.actor.out = 1;
    }

    setBarActor(bar);

    function OnInitializeFailed(context)
    {
        openConfirmDialog(context, 0, context.translate(ConnectingRoot, "INIT_FAILED"));
        restart(context);
    }

    function OnFrame(context)
    {
        if (main::network.isNetworkInitialized())
        {
            DeleteWatcher();
            main::network.initializeRTIME(gNetMode);

            context.sync(0.5);
            context.sync(0.5);

            if (gNetMode == "WAN")
                start_page(context, DnasRoot);
            else
            {
                main::game.setReturnToLastMenuProject();
                start_page(context, nil);
            }
        }
    }

    function onInitialize(context)
    {
        context.cursor_visible = 0;

        ToolTip::tip.value = context.translate(ConnectingRoot, "TOOLTIP|Cancel");

        var event = main::menu::MScriptEvent(context, ConnectingRoot, "onConnecting");
        context.pushEvent(event);
    }

    function onFinalize(context)
    {
        context.cursor_visible = 1;
    }

    function onConnecting(context)
    {
        if (!main::network.isNetworkInitialized())
        {
            var ret = gNetcnf.GetEnvAddress();
            ret = main::network.initializeNetwork(ret, 0);
            if (!ret)
            {
                var event = main::menu::MScriptEvent(context, ConnectingRoot, "OnInitializeFailed");
                context.pushEvent(event);
                return;
            }

            CreateWatcher(context, OnFrame, 2);
            return;
        }

        if (!main::network.isRTIMEInitialized())
        {
            main::network.inLobby(1);
            main::network.setCallbackModule(NetworkProject);

            if (gNetMode == "WAN")
                start_page(context, DnasRoot);
            else
            {
                main::game.setReturnToLastMenuProject();
                start_page(context, nil);
            }
        }
    }

    function onCancel(context)
    {
        main::sound.play("cancel");

        var result = openConfirmDialog(context, 1, context.translate(ConnectRoot, "QUIT"));
        if (result != nil && result)
        {
            DeleteWatcher();
            restart(context);
        }

        return EVENTRESULT_FILTER;
    }
}