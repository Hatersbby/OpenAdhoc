module NetworkProject::DnasRoot
{
	static sDnas  = nil;
	static sPhase = 0;
	
	function StrError(context, errno)
	{
		var showFooter = 0;
		var str;
	
		switch (errno)
		{
			case -101:
				str = context.translate(DnasRoot, "SS_SERVER_BUSY");
				break;
	
			case -102:
				str = context.translate(DnasRoot, "SS_BEFORE_SERVICE");
				showFooter = 1;
				break;
	
			case -103:
				str = context.translate(DnasRoot, "SS_OUT_OF_SERVICE");
				showFooter = 1;
				break;
	
			case -104:
				str = context.translate(DnasRoot, "SS_END_OF_SERVICE");
				showFooter = 1;
				break;
	
			case -105:
				str = context.translate(DnasRoot, "SS_SESSION_TIME_OUT");
				break;
	
			case -106:
				str = context.translate(DnasRoot, "SS_INVALID_SERVER");
				showFooter = 1;
				break;
	
			case -107:
				str = context.translate(DnasRoot, "SS_INTERNAL_ERROR");
				showFooter = 1;
				break;
	
			case -108:
				str = context.translate(DnasRoot, "SS_EXTERNAL_ERROR");
				showFooter = 1;
				break;
	
			case -401:
			case -404:
				str = context.translate(DnasRoot, "SS_INVALID_HW");
				showFooter = 1;
				break;
	
			case -402:
			case -403:
				str = context.translate(DnasRoot, "SS_INVALID_MEDIA");
				showFooter = 1;
				break;
	
			case -601:
				str = context.translate(DnasRoot, "GLUE_ABORT");
				break;
	
			case -602:
				str = context.translate(DnasRoot, "NET_PROXY");
				break;
				
			case -617:
			case -603:
				str = context.translate(DnasRoot, "NET_TIMEOUT");
				break;
	
			case -612:
				str = context.translate(DnasRoot, "DNS_TRY_AGAIN");
				break;
	
			case -611:
			case -613:
			case -614:
				str = context.translate(DnasRoot, "DNS_COMMON");
				break;
	
			case -615:
				str = context.translate(DnasRoot, "DNS_OTHERS");
				break;
	
			case -610:
			case -616:
			case -618:
			case -619:
			case -620:
			case -626:
				str = context.translate(DnasRoot, "NET_SERVER");
				break;
	
			case -621:
			case -622:
			case -623:
			case -624:
			case -625:
				str = context.translate(DnasRoot, "NET_COMM");
				break;
	
			default:
				str = context.translate(DnasRoot, "OTHER");
				if (errno <= -800)
					showFooter = 1;
				break;
		}
	
		if (showFooter)
		{
			footer.visible = 1;
			footer["text"].text = context.translate(DnasRoot, "footer");
		}
	
		return str;
	}


	function OnFrame(context)
	{
		if (sPhase != 0)
			;
	
		var done  = sDnas.IsDone();
		if (done)
			;
	
		var error = sDnas.GetLastError();
	
		if (!error)
		{
			switch (sPhase)
			{
				case 1:
					if (sDnas.RequestId())
					{
						sPhase = 2;
					}
					else
					{
						error = sDnas.GetLastError();
					}
					break;
	
				case 2:
					main::network.setDnasSignature(sDnas.GetId());
					sPhase = 0;
					DeleteWatcher();
					start_page(context, ServerRoot);
					break;
			}
		}
	
		if (error)
		{
			message["text"].text = "%d: %s".format(error, StrError(context, error));
			sPhase = 0;
			DeleteWatcher();
		}
	}



	function GetPassPhrase(code)
	{
		var a = []
	
		if (code == "dna_beta")
		{
			a.push(64)
			a.push(188)
			a.push(9)
			a.push(213)
			a.push(83)
			a.push(53)
			a.push(156)
			a.push(224)
		}
		else
		{
			a.push(51)
			a.push(179)
			a.push(239)
			a.push(66)
			a.push(75)
			a.push(76)
			a.push(123)
			a.push(96)
		}
		return a;
	}


	function OnInitialize(context)
	{
		footer.visible = false;
	
		mark::TextFace.text = context.translate(DnasRoot, "notice");
	
		var code = main::menu::MSystem::GetDnasCode();
		var ver  = main::menu::MSystem::GetVersionBranch();
	
		if (code == "dna" && (ver == "beta" || ver == "main"))
			code = "dna_beta";
	
		var filename = "/dnas/auth_" + code + ".dat";
		var netconf  = main::game.option.netconf;
	
		var success = false;
	
		if (netconf.use_proxy)
		{
			success = sDnas.Initialize(
				filename,
				GetPassPhrase(code),
				netconf.proxy,
				netconf.proxy_port
			);
		}
		else
		{
			success = sDnas.Initialize(
				filename,
				GetPassPhrase(code)
			);
		}
	
		if (success)
		{
			success = sDnas.RequestAuthorization();
			if (success)
			{
				sPhase = 1;
				CreateWatcher(context, OnFrame, 2);
			}
		}
	
		if (!success)
		{
			var error = sDnas.GetLastError();
			message["text"].text = "%d: %s".format(error, StrError(context, error));
		}
	}



	function onInitialize(context)
	{
		message["text"].text = context.translate(DnasRoot, "AUTH");
	
		sDnas = main::menu::MDnas();
	
		var event = main::menu::MScriptEvent(context, DnasRoot, "OnInitialize");
		context.pushEvent(event);
	}
	
	function onFinalize(context)
	{
		DeleteWatcher();
		sDnas = nil;
	}
	
	function onCancel(context)
	{
		main::sound.play("cancel");
	
		var result = openConfirmDialog(context, 1, context.translate(ConnectRoot, "QUIT"));
		if (result)
		{
			DeleteWatcher();
			sDnas.Abort();
			main::network.disconnect();
			restart(context);
		}
	
		return EVENTRESULT_FILTER;
	}
}