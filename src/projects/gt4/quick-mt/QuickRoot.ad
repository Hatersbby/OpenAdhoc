module PROJECT::ROOT
{
	#include "../quick-share/icon.ad"

	var quick_work = main::menu::MQuickWork();
	for (var i = 1; i <= quick_work.numberOfEntries; i++)
	{
		var widget = ROOT["Grid" + i];
		setMoveActor(widget, 640 + (392 * 2 * i), 0, 0.15);
	}
	
	static is_maxspeed = nil;
	
	function onInitialize(context)
	{
#ifndef GT4O_US_BETA
		context.transition = main::menu::MColorTransition();
#endif

		var quick_work = main::menu::MQuickWork();
		if (quick_work.canReplay == false)
		{
			Buttons::Replay.visible = false;
			Buttons::SaveReplay.visible = false;
		}
		else
		{
			Buttons::Replay.visible = true;
			Buttons::SaveReplay.visible = true;
		}
		Buttons::LoadGhost.visible = false;
		Buttons::SaveGhost.visible = false;
	
		var entryNum = 1;
		for (var i = 0; i < entryNum; i++)
		{
			ROOT["Grid" + (i + 1)]["CarName"].text = quick_work.getGridCarName(i);
			ROOT["Grid" + (i + 1)]["CarName"].abbreviate();
			ROOT["Grid" + (i + 1)]["ColorChip"].setColor(quick_work.getColorChipInfo(i));
		}

		for (var i = 1; i <= entryNum; i++)
		{
			var widget = ROOT["Grid" + i];
			rewindMoveActor(widget);
		}

		if (quick_work.playerGridNumber >= 0)
		{
			var gnum = (quick_work.playerGridNumber + 1);
			ROOT["Grid" + gnum]["CarName"].color = ROOT::Hidden::MyGridColor.color;
			ROOT["Grid" + gnum]["GridNumber"].color = ROOT::Hidden::MyGridColor.color;
		}
		var course_label = quick_work.courseLabel;
		var race_label = quick_work.raceLabel;
		is_maxspeed = (race_label == "mtmax_testcourse");
		if (is_maxspeed)
		{
			var sp_str = main::menu::MUnit::GetUnitOfVelocity();
			if (quick_work.BestMaxSpeed == 0)
			{
				Sessionbest_Time.text = "---- " + sp_str;
			}
			else
			{
				sp_str = "%.2t " + sp_str;
				Sessionbest_Time.text = sp_str.format(
					main::menu::MUnit::GetVelocityForDisplay(quick_work.BestMaxSpeed)
				);
			}
		}
		else
		{
			Sessionbest_Time.text = main::menu::MUtility::GetTimeString(quick_work.BestTime);
		}
	
		Title.text = getTitleName(context, race_label, course_label);
		Title.adjustScale();
		main::sound.startStreamEx("pcm", "default_quick", -1, 1, main::game.option.menu_bgm_volume);
		setIconPosition(context);
		setDefaultIconFocus(context);
	}
	
	function set_next_start_project()
	{
		main::game.next_menu_project = main::game.major_menu_project;
	}
	
	static icon_name_tbl = ["Start", "Replay", "Ranking", "SaveReplay", "Setting", "Option", "Exit"];
	
	function setIconPosition(context)
	{
		var max = icon_name_tbl.size;
		var num = 0;
		for (var i = 0; i < max; i++)
		{
			if (ROOT::Buttons[icon_name_tbl[i]].visible == true)
			{
				num++;
			}
		}

		var screen_w = 640;
		var icon_w = 72;
		var space = 4;
		var st = (screen_w - (num * icon_w) - (space * (num - 1))) / 2;
		var c = 0;
		for (var i = 0; i < max; i++)
		{
			if (ROOT::Buttons[icon_name_tbl[i]].visible == true)
			{
				ROOT::Buttons[icon_name_tbl[i]].x = st + (icon_w + space) * c;
				c++;
			}
			i++;
		}
	}
	
	function onCancel(context, event, item)
	{
		main::sound.play("cancel");
		main::sound.stopStream();
	
		var quick_work = main::menu::MQuickWork();
		quick_work.selectedCommand = "COMMAND_EXIT";
	
		context.transition.panOut(context);
		context.transition.syncOut(context);
	
		set_next_start_project();
		context.finish();
	
		return EVENTRESULT_FILTER;
	}
}

module PROJECT::ROOT::Buttons::Start
{
	function onActivate(context)
	{
		main::sound.play("ok");
		main::sound.stopStream();
		var quick_work = main::menu::MQuickWork();
		quick_work.selectedCommand = "COMMAND_START";
		quick_work.cursorPosition = getIconIndex(context, "Start");
		context.transition.panOut(context);
		context.transition.syncOut(context);
		context.finish();
		return EVENTRESULT_FILTER;
	}
}

module PROJECT::ROOT::Buttons::Replay
{
	function onActivate(context)
	{
		main::sound.play("ok");
		main::sound.stopStream();
		var quick_work = main::menu::MQuickWork();
		quick_work.selectedCommand = "COMMAND_REPLAY";
		quick_work.cursorPosition = getIconIndex(context, "Replay");
		context.transition.panOut(context);
		context.transition.syncOut(context);
		context.finish();
		return EVENTRESULT_FILTER;
	}
}

module PROJECT::ROOT::Buttons::Ranking
{
    function onActivate(context)
    {
        main::sound.play("ok");
        main::sound.stopStream();

        var quick_work = main::menu::MQuickWork();
        quick_work.cursorPosition = getIconIndex(context, "Ranking");

        start_page(context, RankingRoot);

        return EVENTRESULT_FILTER;
    }
}
  
module PROJECT::ROOT::Buttons::SaveReplay
{

	function onActivate(context)
	{
		main::sound.play("ok");
		main::sound.stopStream();
		var quick_work = main::menu::MQuickWork();
		quick_work.selectedCommand = "COMMAND_SAVE_REPLAY";
		quick_work.cursorPosition = getIconIndex(context, "SaveReplay");
		context.transition.panOut(context);
		context.transition.syncOut(context);
		context.finish();
		return EVENTRESULT_FILTER;
	}
}

module PROJECT::ROOT::Buttons::SaveGhost
{
    function onActivate(context)
    {
        main::sound.play("ok");
        main::sound.stopStream();
        var quick_work = main::menu::MQuickWork();
        quick_work.selectedCommand = "COMMAND_SAVE_GHOST";
        quick_work.cursorPosition = getIconIndex(context, "SaveGhost");
        context.transition.panOut(context);
        context.transition.syncOut(context);
        set_next_start_project();
        context.finish();
        return EVENTRESULT_FILTER;
    }
}
  
module PROJECT::ROOT::Buttons::LoadGhost
{
    function onActivate(context)
    {
        main::sound.play("ok");
        main::sound.stopStream();
        var quick_work = main::menu::MQuickWork();
        quick_work.selectedCommand = "COMMAND_LOAD_GHOST";
        quick_work.cursorPosition = getIconIndex(context, "LoadGhost");
        context.transition.panOut(context);
        context.transition.syncOut(context);
        set_next_start_project();
        context.finish();
        return EVENTRESULT_FILTER;
    }
}
  
module PROJECT::ROOT::Buttons::Setting
{

	function onActivate(context)
	{
		main::sound.play("ok");
		main::sound.stopStream();
	
		var quick_work = main::menu::MQuickWork();
		quick_work.selectedCommand = "COMMAND_SETTINGS";
		quick_work.cursorPosition = getIconIndex(context, "Setting");
	
		context.transition.panOut(context);
		context.transition.syncOut(context);
	
		set_next_start_project();
		context.finish();
		return EVENTRESULT_FILTER;
	}
}

module PROJECT::ROOT::Buttons::Option
{

	function onActivate(context)
	{
		main::sound.play("ok");
		main::sound.stopStream();
		var quick_work = main::menu::MQuickWork();
		quick_work.selectedCommand = "COMMAND_OPTION";
		quick_work.cursorPosition = getIconIndex(context, "Option");
		context.transition.panOut(context);
		context.transition.syncOut(context);
		set_next_start_project();
		context.finish();
		return EVENTRESULT_FILTER;
	}
}

module PROJECT::ROOT::Buttons::Exit
{

	function onActivate(context)
	{
		main::sound.play("ok");
		main::sound.stopStream();
	
		var quick_work = main::menu::MQuickWork();
		quick_work.selectedCommand = "COMMAND_EXIT";
	
		context.transition.panOut(context);
		context.transition.syncOut(context);
	
		set_next_start_project();
		context.finish();
		return EVENTRESULT_FILTER;
	}
}