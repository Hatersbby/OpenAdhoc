module LoggerProject::LoggerMenu
{
	function onInitialize(context)
	{
		var quick_work = main::menu::MQuickWork();
		if (quick_work.CanLogger == 0)
		{
			LoggerMenu::Pane::Logger.insensitive = true;
			LoggerMenu::Pane::Logger::Button.insensitive = true;
			LoggerMenu::Pane::Logger::Button::bgf.insensitive = true;
			LoggerMenu::Pane::Logger::Button::bgb.insensitive = true;
			LoggerMenu::Pane::TrackB.insensitive = true;
			LoggerMenu::Pane::TrackB::Button.insensitive = true;
			LoggerMenu::Pane::TrackB::Button::bgf.insensitive = true;
			LoggerMenu::Pane::Logger::Button::bgb.insensitive = true;
		}
		
		context.cursor_visible = true;
	}

	function onFinalize(context){}
	
	function close(context)
	{
		context.closePage(LoggerMenu);
		LoggerRoot::logger_mode(context);
	}
	
	function cancel(context)
	{
		main::sound.play("cancel");
		close(context);
	}
	
	function onCancel(context)
	{
		var quick_work = main::menu::MQuickWork();
		if (quick_work.CanLogger == 1 && LoggerRoot::analyzed == 1)
		{
			cancel(context);
		}
		return 2;
	}
}	
module LoggerProject::LoggerMenu::Pane::Logger::Button
{
	function onActivate(context)
	{
		main::sound.play("ok");
		context.closePage(LoggerMenu);
		LoggerRoot::logger_restart(context);
		return 2;
	}
}

module LoggerProject::LoggerMenu::Pane::TrackA::Button
{
	function onActivate(context)	
	{
		main::sound.play("ok");
		LoggerRoot::load_mode(context, 0);
		return 2;
	}
}

module LoggerProject::LoggerMenu::Pane::TrackB::Button
{
	function onActivate(context)	
	{
		main::sound.play("ok");
		LoggerRoot::load_mode(context, 1);
		return 2;
	}
}	

module LoggerProject::LoggerMenu::Pane::Exit::Button
{
	function onActivate(context)	
	{
		main::sound.play("ok");
		LoggerRoot::exit(context);
		return 2;
	}
}	
