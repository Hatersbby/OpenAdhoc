//---------------------------------------------------------------------------------------
// DealerRoot.ad
//
// Dealership nation tuner selection root (new/legend/tuning/events selection window)
// 
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// module
//---------------------------------------------------------------------------------------

module PROJECT::ROOT
{
    function onInitialize(context)
    {
        var nation = main::game.menuRef(1);
        var dealer = main::game.menuRef();

        enterPageNation(context, ROOT, context.translate(NationRoot, "CarTown_" + nation), nation);
        Logo.from_disk = true;
        Logo.cache = false;
        Logo.image_path = "piece/tuner_logo/" + dealer + ".img";
        Logo.doInitialize(context);
        
        screen.flash_path = "piece/tuner_screen/" + dealer + ".strb";
        screen.doInitialize(context);

        wall.image_path = "image/gtmode/dealer/wall_" + nation + ".png";
        wall.doInitialize(context);

        var subtuner = DealerData::getSubTuner(dealer);
        Tuner::bg.image_path = "piece/tuneshop_logo/" + subtuner + ".img";
        Tuner::bg.doInitialize(context);

        New.visible = getCarNum(NewCarData, dealer) > 0;
        Legend.visible = getCarNum(LegendCarData, dealer) > 0;
        Event.visible = EventData.defined(dealer + "Events");

        NewArrow.active = New.visible;
        LegendArrow.active = Legend.visible;
        TunerArrow.active = Tuner.visible;
        EventArrow.active = Event.visible;

        var visible_widget = nil;
        if (New.visible)
            visible_widget = New;
        else if (Legend.visible)
            visible_widget = Legend;
        else if (Tuner.visible)
            visible_widget = Tuner;
        else if (Event.visible)
            visible_widget = Event;

        focus_last(ROOT, ROOT);
        var focused_widget = ROOT.getFocusedWidget();
        if (focused_widget == nil)
            ROOT.setFocus(visible_widget);
        else if (!New.visible && focused_widget.name == New.name)
            ROOT.setFocus(visible_widget);
        else if (!Legend.visible && focused_widget.name == Legend.name)
            ROOT.setFocus(visible_widget);
        else if (!Tuner.visible && focused_widget.name == Tuner.name)
            ROOT.setFocus(visible_widget);
        else if (!Event.visible && focused_widget.name == Event.name)
            ROOT.setFocus(visible_widget);
    }

    function onFinalize(context)
    {
        leavePage(context, ROOT);
    }

    function onCancel(context)
    {
        main::sound.play("cancel");
        var dealer = main::game.menuPop();
        set_last_focus(dealer);
        start_page(context, NationRoot);
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::New
{
    function onActivate(context)
    {
        main::sound.play("ok");
        var dealer = main::game.menuRef();
        BuyCarRoot::open(context, NewCarData[dealer + "_carlist"], ROOT, dealer, "new");
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::Event
{
    function onActivate(context)
    {
        if (!sureRiding(context))
        {
            return EVENTRESULT_FILTER;
        }

        main::sound.play("ok");
        var dealer = main::game.menuRef();
        main::game.menuPush(ROOT.name);
        main::game.menuPush("Event");
        main::game.menuPush("onemake.swf");
        main::game.menuPush(dealer + "Events");

        start_page(context, EventHallRoot);
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::Legend
{
    function onActivate(context)
    {
        main::sound.play("ok");
        var dealer = main::game.menuRef();
        BuyCarRoot::open(context, LegendCarData[dealer + "_carlist"], ROOT, dealer, "legend");
        return EVENTRESULT_FILTER;
    }
}

module PROJECT::ROOT::Tuner
{
    function onActivate(context)
    {
        main::sound.play("ok");
        start_page(context, TuningRoot);
        return EVENTRESULT_FILTER;
    }
}